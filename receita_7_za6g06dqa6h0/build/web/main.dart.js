// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const _internal = dart_sdk._internal;
  const html = dart_sdk.html;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const change_notifier = flutter_sdk.src__foundation__change_notifier;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const framework = flutter_sdk.src__widgets__framework;
  const basic = flutter_sdk.src__widgets__basic;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const value_listenable_builder = flutter_sdk.src__widgets__value_listenable_builder;
  const dropdown = flutter_sdk.src__material__dropdown;
  const bottom_navigation_bar = flutter_sdk.src__material__bottom_navigation_bar;
  const bottom_navigation_bar_item = flutter_sdk.src__widgets__bottom_navigation_bar_item;
  const icon = flutter_sdk.src__widgets__icon;
  const icon_data = flutter_sdk.src__widgets__icon_data;
  const data_table = flutter_sdk.src__material__data_table;
  const text_style = flutter_sdk.src__painting__text_style;
  const binding = flutter_sdk.src__widgets__binding;
  const diagnostics = flutter_sdk.src__foundation__diagnostics;
  const assertions = flutter_sdk.src__foundation__assertions;
  const animation = flutter_sdk.src__animation__animation;
  const animation_controller = flutter_sdk.src__animation__animation_controller;
  const ticker = flutter_sdk.src__scheduler__ticker;
  const ticker_provider = flutter_sdk.src__widgets__ticker_provider;
  const async$ = flutter_sdk.src__widgets__async;
  const tab_controller = flutter_sdk.src__material__tab_controller;
  const editable_text = flutter_sdk.src__widgets__editable_text;
  const text_input = flutter_sdk.src__services__text_input;
  const focus_manager = flutter_sdk.src__widgets__focus_manager;
  const raw_keyboard = flutter_sdk.src__services__raw_keyboard;
  const hardware_keyboard = flutter_sdk.src__services__hardware_keyboard;
  const scroll_controller = flutter_sdk.src__widgets__scroll_controller;
  const page_view = flutter_sdk.src__widgets__page_view;
  const interactive_viewer = flutter_sdk.src__widgets__interactive_viewer;
  const vector_math_64 = flutter_sdk.vector_math_64;
  const automatic_keep_alive = flutter_sdk.src__widgets__automatic_keep_alive;
  const string_scanner = flutter_sdk.src__string_scanner;
  const canonicalized_map = flutter_sdk.src__canonicalized_map;
  const span_exception = flutter_sdk.src__span_exception;
  const queue_list = flutter_sdk.src__queue_list;
  const serialization = flutter_sdk.src__foundation__serialization;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var http = Object.create(dart.library);
  var flutter_hooks = Object.create(dart.library);
  var client$ = Object.create(dart.library);
  var exception = Object.create(dart.library);
  var request$ = Object.create(dart.library);
  var response$ = Object.create(dart.library);
  var streamed_request = Object.create(dart.library);
  var base_client = Object.create(dart.library);
  var base_request = Object.create(dart.library);
  var base_response = Object.create(dart.library);
  var byte_stream = Object.create(dart.library);
  var multipart_file = Object.create(dart.library);
  var multipart_request = Object.create(dart.library);
  var streamed_response = Object.create(dart.library);
  var framework$ = Object.create(dart.library);
  var hooks = Object.create(dart.library);
  var browser_client = Object.create(dart.library);
  var http_parser = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var multipart_file_stub = Object.create(dart.library);
  var boundary_characters = Object.create(dart.library);
  var authentication_challenge = Object.create(dart.library);
  var case_insensitive_map = Object.create(dart.library);
  var chunked_coding = Object.create(dart.library);
  var http_date = Object.create(dart.library);
  var media_type = Object.create(dart.library);
  var scan = Object.create(dart.library);
  var utils$ = Object.create(dart.library);
  var decoder = Object.create(dart.library);
  var encoder = Object.create(dart.library);
  var typed_data$ = Object.create(dart.library);
  var charcodes = Object.create(dart.library);
  var typed_queue = Object.create(dart.library);
  var typed_buffers = Object.create(dart.library);
  var typed_buffer = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $length = dartx.length;
  var $containsKey = dartx.containsKey;
  var $remove = dartx.remove;
  var $_set = dartx._set;
  var $toLowerCase = dartx.toLowerCase;
  var $hashCode = dartx.hashCode;
  var $addAll = dartx.addAll;
  var $cast = dartx.cast;
  var $forEach = dartx.forEach;
  var $entries = dartx.entries;
  var $replaceAll = dartx.replaceAll;
  var $iterator = dartx.iterator;
  var $any = dartx.any;
  var $isNotEmpty = dartx.isNotEmpty;
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $responseType = dartx.responseType;
  var $onLoad = dartx.onLoad;
  var $response = dartx.response;
  var $asUint8List = dartx.asUint8List;
  var $responseHeaders = dartx.responseHeaders;
  var $onError = dartx.onError;
  var $add = dartx.add;
  var $join = dartx.join;
  var $buffer = dartx.buffer;
  var $contains = dartx.contains;
  var $indexOf = dartx.indexOf;
  var $split = dartx.split;
  var $replaceAllMapped = dartx.replaceAllMapped;
  var $substring = dartx.substring;
  var $toRadixString = dartx.toRadixString;
  var $toUpperCase = dartx.toUpperCase;
  var $codeUnits = dartx.codeUnits;
  var $setRange = dartx.setRange;
  var $fillRange = dartx.fillRange;
  var $rightShift = dartx['>>'];
  var $sublist = dartx.sublist;
  var $isEmpty = dartx.isEmpty;
  var $elementSizeInBytes = dartx.elementSizeInBytes;
  var $offsetInBytes = dartx.offsetInBytes;
  var $insertAll = dartx.insertAll;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T$.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ListOfString()])))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    ValueNotifierOfList: () => (T$.ValueNotifierOfList = dart.constFn(change_notifier.ValueNotifier$(core.List)))(),
    ValueNotifierOfListOfString: () => (T$.ValueNotifierOfListOfString = dart.constFn(change_notifier.ValueNotifier$(T$.ListOfString())))(),
    ValueNotifierOfint: () => (T$.ValueNotifierOfint = dart.constFn(change_notifier.ValueNotifier$(core.int)))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    JSArrayOfVoidToFutureOfvoid: () => (T$.JSArrayOfVoidToFutureOfvoid = dart.constFn(_interceptors.JSArray$(T$.VoidToFutureOfvoid())))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    ValueListenableBuilderOfint: () => (T$.ValueListenableBuilderOfint = dart.constFn(value_listenable_builder.ValueListenableBuilder$(core.int)))(),
    DropdownButtonOfint: () => (T$.DropdownButtonOfint = dart.constFn(dropdown.DropdownButton$(core.int)))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    DropdownMenuItemOfint: () => (T$.DropdownMenuItemOfint = dart.constFn(dropdown.DropdownMenuItem$(core.int)))(),
    intToDropdownMenuItemOfint: () => (T$.intToDropdownMenuItemOfint = dart.constFn(dart.fnType(T$.DropdownMenuItemOfint(), [core.int])))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    intNTovoid: () => (T$.intNTovoid = dart.constFn(dart.fnType(dart.void, [T$.intN()])))(),
    WidgetN: () => (T$.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndintAndWidgetNToDropdownButtonOfint: () => (T$.BuildContextAndintAndWidgetNToDropdownButtonOfint = dart.constFn(dart.fnType(T$.DropdownButtonOfint(), [framework.BuildContext, core.int, T$.WidgetN()])))(),
    ValueListenableBuilderOfList: () => (T$.ValueListenableBuilderOfList = dart.constFn(value_listenable_builder.ValueListenableBuilder$(core.List)))(),
    ValueListenableBuilderOfListOfString: () => (T$.ValueListenableBuilderOfListOfString = dart.constFn(value_listenable_builder.ValueListenableBuilder$(T$.ListOfString())))(),
    BuildContextAndListOfStringAndWidgetNToDataTableWidget: () => (T$.BuildContextAndListOfStringAndWidgetNToDataTableWidget = dart.constFn(dart.fnType(main.DataTableWidget, [framework.BuildContext, T$.ListOfString(), T$.WidgetN()])))(),
    BuildContextAndListOfStringAndWidgetNToValueListenableBuilderOfListOfString: () => (T$.BuildContextAndListOfStringAndWidgetNToValueListenableBuilderOfListOfString = dart.constFn(dart.fnType(T$.ValueListenableBuilderOfListOfString(), [framework.BuildContext, T$.ListOfString(), T$.WidgetN()])))(),
    BuildContextAndListAndWidgetNToValueListenableBuilderOfListOfString: () => (T$.BuildContextAndListAndWidgetNToValueListenableBuilderOfListOfString = dart.constFn(dart.fnType(T$.ValueListenableBuilderOfListOfString(), [framework.BuildContext, core.List, T$.WidgetN()])))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    intTovoid: () => (T$.intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))(),
    StringToDataColumn: () => (T$.StringToDataColumn = dart.constFn(dart.fnType(data_table.DataColumn, [core.String])))(),
    StringToDataCell: () => (T$.StringToDataCell = dart.constFn(dart.fnType(data_table.DataCell, [core.String])))(),
    dynamicToDataRow: () => (T$.dynamicToDataRow = dart.constFn(dart.fnType(data_table.DataRow, [dart.dynamic])))(),
    FutureOfResponse: () => (T$.FutureOfResponse = dart.constFn(async.Future$(response$.Response)))(),
    ClientToFutureOfResponse: () => (T$.ClientToFutureOfResponse = dart.constFn(dart.fnType(T$.FutureOfResponse(), [client$.Client])))(),
    FutureOfString: () => (T$.FutureOfString = dart.constFn(async.Future$(core.String)))(),
    ClientToFutureOfString: () => (T$.ClientToFutureOfString = dart.constFn(dart.fnType(T$.FutureOfString(), [client$.Client])))(),
    FutureOfUint8List: () => (T$.FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))(),
    ClientToFutureOfUint8List: () => (T$.ClientToFutureOfUint8List = dart.constFn(dart.fnType(T$.FutureOfUint8List(), [client$.Client])))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    LinkedMapOfObjectN$ObjectN: () => (T$.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ObjectN())))(),
    VoidToClient: () => (T$.VoidToClient = dart.constFn(dart.fnType(client$.Client, [])))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    LinkedHashMapOfString$String: () => (T$.LinkedHashMapOfString$String = dart.constFn(collection.LinkedHashMap$(core.String, core.String)))(),
    StringAndStringTobool: () => (T$.StringAndStringTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.String])))(),
    StringToint: () => (T$.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    _EmptyStreamOfListOfint: () => (T$._EmptyStreamOfListOfint = dart.constFn(async._EmptyStream$(T$.ListOfint())))(),
    StreamControllerOfListOfint: () => (T$.StreamControllerOfListOfint = dart.constFn(async.StreamController$(T$.ListOfint())))(),
    StreamOfListOfint: () => (T$.StreamOfListOfint = dart.constFn(async.Stream$(T$.ListOfint())))(),
    CompleterOfUint8List: () => (T$.CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))(),
    ListOfintTovoid: () => (T$.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T$.ListOfint()])))(),
    JSArrayOfMultipartFile: () => (T$.JSArrayOfMultipartFile = dart.constFn(_interceptors.JSArray$(multipart_file.MultipartFile)))(),
    StringAndStringTovoid: () => (T$.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    _AsyncStarImplOfListOfint: () => (T$._AsyncStarImplOfListOfint = dart.constFn(async._AsyncStarImpl$(T$.ListOfint())))(),
    intToint: () => (T$.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    _EntryOfVoidTobool: () => (T$._EntryOfVoidTobool = dart.constFn(framework$._Entry$(T$.VoidTobool())))(),
    DiagnosticsPropertyOfObject: () => (T$.DiagnosticsPropertyOfObject = dart.constFn(diagnostics.DiagnosticsProperty$(core.Object)))(),
    HookOfObjectN: () => (T$.HookOfObjectN = dart.constFn(framework$.Hook$(T$.ObjectN())))(),
    HookStateOfObjectN$HookOfObjectN: () => (T$.HookStateOfObjectN$HookOfObjectN = dart.constFn(framework$.HookState$(T$.ObjectN(), T$.HookOfObjectN())))(),
    _EntryOfHookStateOfObjectN$HookOfObjectN: () => (T$._EntryOfHookStateOfObjectN$HookOfObjectN = dart.constFn(framework$._Entry$(T$.HookStateOfObjectN$HookOfObjectN())))(),
    LinkedListOf_EntryOfHookStateOfObjectN$HookOfObjectN: () => (T$.LinkedListOf_EntryOfHookStateOfObjectN$HookOfObjectN = dart.constFn(collection.LinkedList$(T$._EntryOfHookStateOfObjectN$HookOfObjectN())))(),
    LinkedListOf_EntryOfVoidTobool: () => (T$.LinkedListOf_EntryOfVoidTobool = dart.constFn(collection.LinkedList$(T$._EntryOfVoidTobool())))(),
    JSArrayOfHookStateOfObjectN$HookOfObjectN: () => (T$.JSArrayOfHookStateOfObjectN$HookOfObjectN = dart.constFn(_interceptors.JSArray$(T$.HookStateOfObjectN$HookOfObjectN())))(),
    _EntryOfVoidToboolTobool: () => (T$._EntryOfVoidToboolTobool = dart.constFn(dart.fnType(core.bool, [T$._EntryOfVoidTobool()])))(),
    DiagnosticsPropertyOfHookStateOfObjectN$HookOfObjectN: () => (T$.DiagnosticsPropertyOfHookStateOfObjectN$HookOfObjectN = dart.constFn(diagnostics.DiagnosticsProperty$(T$.HookStateOfObjectN$HookOfObjectN())))(),
    HookOfRToHookStateOfR$HookOfR: () => (T$.HookOfRToHookStateOfR$HookOfR = dart.constFn(dart.gFnType(R => {
      var __t$HookOfR = () => (__t$HookOfR = dart.constFn(framework$.Hook$(R)))();
      var __t$HookStateOfR$HookOfR = () => (__t$HookStateOfR$HookOfR = dart.constFn(framework$.HookState$(R, __t$HookOfR())))();
      return [__t$HookStateOfR$HookOfR(), [__t$HookOfR()]];
    }, R => {
      var __t$HookOfR = () => (__t$HookOfR = dart.constFn(framework$.Hook$(R)))();
      var __t$HookStateOfR$HookOfR = () => (__t$HookStateOfR$HookOfR = dart.constFn(framework$.HookState$(R, __t$HookOfR())))();
      return [T$.ObjectN()];
    })))(),
    HookOfRTovoid: () => (T$.HookOfRTovoid = dart.constFn(dart.gFnType(R => {
      var __t$HookOfR = () => (__t$HookOfR = dart.constFn(framework$.Hook$(R)))();
      return [dart.void, [__t$HookOfR()]];
    }, R => {
      var __t$HookOfR = () => (__t$HookOfR = dart.constFn(framework$.Hook$(R)))();
      return [T$.ObjectN()];
    })))(),
    AnimationN: () => (T$.AnimationN = dart.constFn(dart.nullable(animation.Animation)))(),
    DiagnosticsPropertyOfDuration: () => (T$.DiagnosticsPropertyOfDuration = dart.constFn(diagnostics.DiagnosticsProperty$(core.Duration)))(),
    ObjectAndStackTraceToNull: () => (T$.ObjectAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))(),
    ValueListenableN: () => (T$.ValueListenableN = dart.constFn(dart.nullable(change_notifier.ValueListenable)))(),
    AppLifecycleStateN: () => (T$.AppLifecycleStateN = dart.constFn(dart.nullable(ui.AppLifecycleState)))(),
    LinkedHashSetOfHttpRequest: () => (T$.LinkedHashSetOfHttpRequest = dart.constFn(collection.LinkedHashSet$(html.HttpRequest)))(),
    CompleterOfStreamedResponse: () => (T$.CompleterOfStreamedResponse = dart.constFn(async.Completer$(streamed_response.StreamedResponse)))(),
    ProgressEventToNull: () => (T$.ProgressEventToNull = dart.constFn(dart.fnType(core.Null, [html.ProgressEvent])))(),
    JSArrayOfListOfString: () => (T$.JSArrayOfListOfString = dart.constFn(_interceptors.JSArray$(T$.ListOfString())))(),
    ListOfStringToString: () => (T$.ListOfStringToString = dart.constFn(dart.fnType(core.String, [T$.ListOfString()])))(),
    UnmodifiableMapViewOfString$String: () => (T$.UnmodifiableMapViewOfString$String = dart.constFn(collection.UnmodifiableMapView$(core.String, core.String)))(),
    CaseInsensitiveMapOfString: () => (T$.CaseInsensitiveMapOfString = dart.constFn(case_insensitive_map.CaseInsensitiveMap$(core.String)))(),
    ListOfAuthenticationChallenge: () => (T$.ListOfAuthenticationChallenge = dart.constFn(core.List$(authentication_challenge.AuthenticationChallenge)))(),
    VoidToAuthenticationChallenge: () => (T$.VoidToAuthenticationChallenge = dart.constFn(dart.fnType(authentication_challenge.AuthenticationChallenge, [])))(),
    VoidToListOfAuthenticationChallenge: () => (T$.VoidToListOfAuthenticationChallenge = dart.constFn(dart.fnType(T$.ListOfAuthenticationChallenge(), [])))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    VoidToDateTime: () => (T$.VoidToDateTime = dart.constFn(dart.fnType(core.DateTime, [])))(),
    VoidToMediaType: () => (T$.VoidToMediaType = dart.constFn(dart.fnType(media_type.MediaType, [])))(),
    MatchToString: () => (T$.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),
    SinkOfListOfint: () => (T$.SinkOfListOfint = dart.constFn(core.Sink$(T$.ListOfint())))(),
    intAndStringTovoid: () => (T$.intAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.String])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T$.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Dicas"
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 8,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 8
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 61288
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[6] || CT.C6
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Cafés",
        [BottomNavigationBarItem_activeIcon]: C[5] || CT.C5,
        [BottomNavigationBarItem_icon]: C[5] || CT.C5
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 61817
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[9] || CT.C9
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Cervejas",
        [BottomNavigationBarItem_activeIcon]: C[8] || CT.C8,
        [BottomNavigationBarItem_icon]: C[8] || CT.C8
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 61563
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[12] || CT.C12
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Nações",
        [BottomNavigationBarItem_activeIcon]: C[11] || CT.C11,
        [BottomNavigationBarItem_icon]: C[11] || CT.C11
      });
    },
    get C3() {
      return C[3] = dart.constList([C[4] || CT.C4, C[7] || CT.C7, C[10] || CT.C10], bottom_navigation_bar_item.BottomNavigationBarItem);
    },
    get C13() {
      return C[13] = dart.constList([], dart.dynamic);
    },
    get C14() {
      return C[14] = dart.constList([], core.String);
    },
    get C15() {
      return C[15] = dart.const(new _js_helper.PrivateSymbol.new('_clientToken', _clientToken));
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: T$._EmptyStreamOfListOfint().prototype
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: byte_stream.ByteStream.prototype,
        [StreamView__stream]: C[17] || CT.C17
      });
    },
    get C18() {
      return C[18] = dart.constMap(core.String, core.String, []);
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: convert.Utf8Codec.prototype,
        [Utf8Codec__allowMalformed]: false
      });
    },
    get C20() {
      return C[20] = dart.constList([13, 10], core.int);
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: animation_controller.AnimationBehavior.prototype,
        [_Enum__name]: "normal",
        [_Enum_index]: 0
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: hooks._SingleTickerProviderHook.prototype,
        [keys$]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: hooks._IsMountedHook.prototype,
        [keys$]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: hooks._PlatformBrightnessHook.prototype,
        [keys$]: null,
        [onBrightnessChange$]: null,
        [rebuildOnChange$0]: true
      });
    },
    get C25() {
      return C[25] = dart.constList([], core.Object);
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: hooks._AppLifecycleHook.prototype,
        [keys$]: null,
        [onStateChanged$]: null,
        [rebuildOnChange$]: true
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: hooks._TextEditingControllerHookCreator.prototype
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: convert.Latin1Codec.prototype,
        [Latin1Codec__allowInvalid]: false
      });
    },
    get C29() {
      return C[29] = dart.constList([43, 95, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], core.int);
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: chunked_coding.ChunkedCodingCodec.prototype
      });
    },
    get C31() {
      return C[31] = dart.constList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], core.String);
    },
    get C32() {
      return C[32] = dart.constList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], core.String);
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "boundary"
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "size"
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "size before LF"
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "body"
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "body before CR"
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "body before LF"
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "end before CR"
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "end before LF"
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "end"
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: decoder.ChunkedCodingDecoder.prototype
      });
    },
    get C43() {
      return C[43] = dart.constList([], core.int);
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: encoder.ChunkedCodingEncoder.prototype
      });
    },
    get C45() {
      return C[45] = dart.const(new _js_helper.PrivateSymbol.new('_add', _add));
    },
    get C46() {
      return C[46] = dart.const(new _js_helper.PrivateSymbol.new('_head', _head$));
    },
    get C47() {
      return C[47] = dart.const(new _js_helper.PrivateSymbol.new('_writeToList', _writeToList));
    },
    get C48() {
      return C[48] = dart.const(new _js_helper.PrivateSymbol.new('_grow', _grow));
    },
    get C49() {
      return C[49] = dart.const(new _js_helper.PrivateSymbol.new('_preGrow', _preGrow));
    },
    get C50() {
      return C[50] = dart.const(new _js_helper.PrivateSymbol.new('_table', _table$));
    },
    get C51() {
      return C[51] = dart.const(new _js_helper.PrivateSymbol.new('_tail', _tail$));
    },
    get C52() {
      return C[52] = dart.const(new _js_helper.PrivateSymbol.new('_head=', _head_));
    },
    get C53() {
      return C[53] = dart.const(new _js_helper.PrivateSymbol.new('_table=', _table_));
    },
    get C54() {
      return C[54] = dart.const(new _js_helper.PrivateSymbol.new('_tail=', _tail_));
    }
  }, false);
  var C = Array(55).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "package:flutter_hooks/src/framework.dart",
    "package:http/src/client.dart",
    "package:http/src/exception.dart",
    "package:http/src/base_request.dart",
    "package:http/src/request.dart",
    "package:http/src/base_response.dart",
    "package:http/src/response.dart",
    "package:http/src/streamed_request.dart",
    "package:http/src/base_client.dart",
    "package:http/src/byte_stream.dart",
    "package:http/src/multipart_file.dart",
    "package:http/src/multipart_request.dart",
    "package:http/src/streamed_response.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/framework.dart",
    "package:flutter_hooks/src/hooks.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/animation.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/misc.dart",
    "package:http/src/browser_client.dart",
    "package:http_parser/src/authentication_challenge.dart",
    "package:http_parser/src/case_insensitive_map.dart",
    "package:http_parser/src/chunked_coding.dart",
    "package:http_parser/src/media_type.dart",
    "package:http_parser/src/chunked_coding/decoder.dart",
    "package:http_parser/src/chunked_coding/encoder.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_queue.dart",
    "package:typed_data/src/typed_queue.dart",
    "package:typed_data/src/typed_buffer.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T$.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T$.ListOfStringTodynamic().as(C[0] || CT.C0)(T$.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T$.dynamicToNull()));
      }
    }, T$.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T$.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T$.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T$.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T$.VoidToNull())});
    });
  };
  var tableStateNotifier = dart.privateName(main, "DataService.tableStateNotifier");
  var columnNamesNotifier = dart.privateName(main, "DataService.columnNamesNotifier");
  var propertyNamesNotifier = dart.privateName(main, "DataService.propertyNamesNotifier");
  var tamanho = dart.privateName(main, "DataService.tamanho");
  main.DataService = class DataService extends core.Object {
    get tableStateNotifier() {
      return this[tableStateNotifier];
    }
    set tableStateNotifier(value) {
      super.tableStateNotifier = value;
    }
    get columnNamesNotifier() {
      return this[columnNamesNotifier];
    }
    set columnNamesNotifier(value) {
      super.columnNamesNotifier = value;
    }
    get propertyNamesNotifier() {
      return this[propertyNamesNotifier];
    }
    set propertyNamesNotifier(value) {
      super.propertyNamesNotifier = value;
    }
    get tamanho() {
      return this[tamanho];
    }
    set tamanho(value) {
      super.tamanho = value;
    }
    carregar(index) {
      let funcoes = T$.JSArrayOfVoidToFutureOfvoid().of([dart.bind(this, 'carregarCafes'), dart.bind(this, 'carregarCervejas'), dart.bind(this, 'carregarNacoes')]);
      funcoes[$_get](index)();
    }
    carregarCafes() {
      return async.async(dart.void, (function* carregarCafes() {
        let coffeeUri = core._Uri.new({scheme: "https", host: "random-data-api.com", path: "api/coffee/random_coffee", queryParameters: new (T$.IdentityMapOfString$dynamic()).from(["size", this.tamanho.value[$toString]()])});
        let jsonString = (yield http.read(coffeeUri));
        let coffeeJson = convert.jsonDecode(jsonString);
        this.tableStateNotifier.value = core.List.as(coffeeJson);
        this.columnNamesNotifier.value = T$.JSArrayOfString().of(["Nome", "Origem", "Variedade"]);
        this.propertyNamesNotifier.value = T$.JSArrayOfString().of(["blend_name", "origin", "variety"]);
      }).bind(this));
    }
    carregarCervejas() {
      return async.async(dart.void, (function* carregarCervejas() {
        let beersUri = core._Uri.new({scheme: "https", host: "random-data-api.com", path: "api/beer/random_beer", queryParameters: new (T$.IdentityMapOfString$dynamic()).from(["size", this.tamanho.value[$toString]()])});
        let jsonString = (yield http.read(beersUri));
        let beersJson = convert.jsonDecode(jsonString);
        this.tableStateNotifier.value = core.List.as(beersJson);
        this.columnNamesNotifier.value = T$.JSArrayOfString().of(["Nome", "Estilo", "IBU"]);
        this.propertyNamesNotifier.value = T$.JSArrayOfString().of(["name", "style", "ibu"]);
      }).bind(this));
    }
    carregarNacoes() {
      return async.async(dart.void, (function* carregarNacoes() {
        let nationsUri = core._Uri.new({scheme: "https", host: "random-data-api.com", path: "api/nation/random_nation", queryParameters: new (T$.IdentityMapOfString$dynamic()).from(["size", this.tamanho.value[$toString]()])});
        let jsonString = (yield http.read(nationsUri));
        let nationsJson = convert.jsonDecode(jsonString);
        this.tableStateNotifier.value = core.List.as(nationsJson);
        this.columnNamesNotifier.value = T$.JSArrayOfString().of(["Nação", "Idioma", "Capital"]);
        this.propertyNamesNotifier.value = T$.JSArrayOfString().of(["nationality", "language", "capital"]);
      }).bind(this));
    }
    static ['_#new#tearOff']() {
      return new main.DataService.new();
    }
  };
  (main.DataService.new = function() {
    this[tableStateNotifier] = new (T$.ValueNotifierOfList()).new([]);
    this[columnNamesNotifier] = new (T$.ValueNotifierOfListOfString()).new(T$.JSArrayOfString().of([]));
    this[propertyNamesNotifier] = new (T$.ValueNotifierOfListOfString()).new(T$.JSArrayOfString().of([]));
    this[tamanho] = new (T$.ValueNotifierOfint()).new(5);
    ;
  }).prototype = main.DataService.prototype;
  dart.addTypeTests(main.DataService);
  dart.addTypeCaches(main.DataService);
  dart.setMethodSignature(main.DataService, () => ({
    __proto__: dart.getMethods(main.DataService.__proto__),
    carregar: dart.fnType(dart.void, [core.int]),
    carregarCafes: dart.fnType(async.Future$(dart.void), []),
    carregarCervejas: dart.fnType(async.Future$(dart.void), []),
    carregarNacoes: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setLibraryUri(main.DataService, I[0]);
  dart.setFieldSignature(main.DataService, () => ({
    __proto__: dart.getFields(main.DataService.__proto__),
    tableStateNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.List)),
    columnNamesNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.List$(core.String))),
    propertyNamesNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.List$(core.String))),
    tamanho: dart.finalFieldType(change_notifier.ValueNotifier$(core.int))
  }));
  var Widget_key = dart.privateName(framework, "Widget.key");
  var Text_selectionColor = dart.privateName(text, "Text.selectionColor");
  var Text_textHeightBehavior = dart.privateName(text, "Text.textHeightBehavior");
  var Text_textWidthBasis = dart.privateName(text, "Text.textWidthBasis");
  var Text_semanticsLabel = dart.privateName(text, "Text.semanticsLabel");
  var Text_maxLines = dart.privateName(text, "Text.maxLines");
  var Text_textScaleFactor = dart.privateName(text, "Text.textScaleFactor");
  var Text_overflow = dart.privateName(text, "Text.overflow");
  var Text_softWrap = dart.privateName(text, "Text.softWrap");
  var Text_locale = dart.privateName(text, "Text.locale");
  var Text_textDirection = dart.privateName(text, "Text.textDirection");
  var Text_textAlign = dart.privateName(text, "Text.textAlign");
  var Text_strutStyle = dart.privateName(text, "Text.strutStyle");
  var Text_style = dart.privateName(text, "Text.style");
  var Text_textSpan = dart.privateName(text, "Text.textSpan");
  var Text_data = dart.privateName(text, "Text.data");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  main.MyApp = class MyApp extends framework.StatelessWidget {
    build(context) {
      return new app.MaterialApp.new({theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.deepPurple}), debugShowCheckedModeBanner: false, home: new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[1] || CT.C1}), body: new basic.Column.new({children: T$.JSArrayOfWidget().of([new basic.Padding.new({padding: C[2] || CT.C2, child: new (T$.ValueListenableBuilderOfint()).new({valueListenable: main.dataService.tamanho, builder: dart.fn((context, value, child) => new (T$.DropdownButtonOfint()).new({value: value, items: T$.JSArrayOfint().of([5, 10, 15])[$map](T$.DropdownMenuItemOfint(), dart.fn(tamanho => new (T$.DropdownMenuItemOfint()).new({value: tamanho, child: new text.Text.new("Size: " + dart.str(tamanho))}), T$.intToDropdownMenuItemOfint()))[$toList](), onChanged: dart.fn(newSize => {
                      main.dataService.tamanho.value = dart.nullCheck(newSize);
                    }, T$.intNTovoid())}), T$.BuildContextAndintAndWidgetNToDropdownButtonOfint())})}), new basic.Expanded.new({child: new (T$.ValueListenableBuilderOfList()).new({valueListenable: main.dataService.tableStateNotifier, builder: dart.fn((_, value, __) => new (T$.ValueListenableBuilderOfListOfString()).new({valueListenable: main.dataService.columnNamesNotifier, builder: dart.fn((_, columnNames, __) => new (T$.ValueListenableBuilderOfListOfString()).new({valueListenable: main.dataService.propertyNamesNotifier, builder: dart.fn((_, propertyNames, __) => new main.DataTableWidget.new({jsonObjects: value, columnNames: columnNames, propertyNames: propertyNames}), T$.BuildContextAndListOfStringAndWidgetNToDataTableWidget())}), T$.BuildContextAndListOfStringAndWidgetNToValueListenableBuilderOfListOfString())}), T$.BuildContextAndListAndWidgetNToValueListenableBuilderOfListOfString())})})])}), bottomNavigationBar: new main.NewNavBar.new({itemSelectedCallback: dart.bind(main.dataService, 'carregar')})})});
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  var _itemSelectedCallback = dart.privateName(main, "_itemSelectedCallback");
  var BottomNavigationBarItem_tooltip = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.tooltip");
  var BottomNavigationBarItem_backgroundColor = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.backgroundColor");
  var BottomNavigationBarItem_label = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.label");
  var Icon_textDirection = dart.privateName(icon, "Icon.textDirection");
  var Icon_semanticLabel = dart.privateName(icon, "Icon.semanticLabel");
  var Icon_shadows = dart.privateName(icon, "Icon.shadows");
  var Icon_color = dart.privateName(icon, "Icon.color");
  var Icon_opticalSize = dart.privateName(icon, "Icon.opticalSize");
  var Icon_grade = dart.privateName(icon, "Icon.grade");
  var Icon_weight = dart.privateName(icon, "Icon.weight");
  var Icon_fill = dart.privateName(icon, "Icon.fill");
  var Icon_size = dart.privateName(icon, "Icon.size");
  var IconData_matchTextDirection = dart.privateName(icon_data, "IconData.matchTextDirection");
  var IconData_fontPackage = dart.privateName(icon_data, "IconData.fontPackage");
  var IconData_fontFamily = dart.privateName(icon_data, "IconData.fontFamily");
  var IconData_codePoint = dart.privateName(icon_data, "IconData.codePoint");
  var Icon_icon = dart.privateName(icon, "Icon.icon");
  var BottomNavigationBarItem_activeIcon = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.activeIcon");
  var BottomNavigationBarItem_icon = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.icon");
  framework$.HookWidget = class HookWidget extends framework.StatelessWidget {
    createElement() {
      return new framework$._StatelessHookElement.new(this);
    }
  };
  (framework$.HookWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    framework$.HookWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = framework$.HookWidget.prototype;
  dart.addTypeTests(framework$.HookWidget);
  dart.addTypeCaches(framework$.HookWidget);
  dart.setMethodSignature(framework$.HookWidget, () => ({
    __proto__: dart.getMethods(framework$.HookWidget.__proto__),
    createElement: dart.fnType(framework$._StatelessHookElement, [])
  }));
  dart.setLibraryUri(framework$.HookWidget, I[1]);
  main.NewNavBar = class NewNavBar extends framework$.HookWidget {
    static ['_#new#tearOff'](opts) {
      let itemSelectedCallback = opts && 'itemSelectedCallback' in opts ? opts.itemSelectedCallback : null;
      return new main.NewNavBar.new({itemSelectedCallback: itemSelectedCallback});
    }
    build(context) {
      let state = hooks.useState(core.int, 0);
      return new bottom_navigation_bar.BottomNavigationBar.new({onTap: dart.fn(index => {
          let t0;
          state.value = index;
          t0 = index;
          this[_itemSelectedCallback](t0);
        }, T$.intTovoid()), currentIndex: state.value, items: C[3] || CT.C3});
    }
  };
  (main.NewNavBar.new = function(opts) {
    let itemSelectedCallback = opts && 'itemSelectedCallback' in opts ? opts.itemSelectedCallback : null;
    this[_itemSelectedCallback] = itemSelectedCallback;
    main.NewNavBar.__proto__.new.call(this);
    ;
  }).prototype = main.NewNavBar.prototype;
  dart.addTypeTests(main.NewNavBar);
  dart.addTypeCaches(main.NewNavBar);
  dart.setMethodSignature(main.NewNavBar, () => ({
    __proto__: dart.getMethods(main.NewNavBar.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.NewNavBar, I[0]);
  dart.setFieldSignature(main.NewNavBar, () => ({
    __proto__: dart.getFields(main.NewNavBar.__proto__),
    [_itemSelectedCallback]: dart.finalFieldType(dart.fnType(dart.dynamic, [core.int]))
  }));
  var jsonObjects$ = dart.privateName(main, "DataTableWidget.jsonObjects");
  var columnNames$ = dart.privateName(main, "DataTableWidget.columnNames");
  var propertyNames$ = dart.privateName(main, "DataTableWidget.propertyNames");
  main.DataTableWidget = class DataTableWidget extends framework.StatelessWidget {
    get jsonObjects() {
      return this[jsonObjects$];
    }
    set jsonObjects(value) {
      super.jsonObjects = value;
    }
    get columnNames() {
      return this[columnNames$];
    }
    set columnNames(value) {
      super.columnNames = value;
    }
    get propertyNames() {
      return this[propertyNames$];
    }
    set propertyNames(value) {
      super.propertyNames = value;
    }
    static ['_#new#tearOff'](opts) {
      let jsonObjects = opts && 'jsonObjects' in opts ? opts.jsonObjects : C[13] || CT.C13;
      let columnNames = opts && 'columnNames' in opts ? opts.columnNames : C[14] || CT.C14;
      let propertyNames = opts && 'propertyNames' in opts ? opts.propertyNames : C[14] || CT.C14;
      return new main.DataTableWidget.new({jsonObjects: jsonObjects, columnNames: columnNames, propertyNames: propertyNames});
    }
    build(context) {
      return new data_table.DataTable.new({columns: this.columnNames[$map](data_table.DataColumn, dart.fn(name => new data_table.DataColumn.new({label: new basic.Expanded.new({child: new text.Text.new(name, {style: new text_style.TextStyle.new({fontStyle: ui.FontStyle.italic})})})}), T$.StringToDataColumn()))[$toList](), rows: this.jsonObjects[$map](data_table.DataRow, dart.fn(obj => new data_table.DataRow.new({cells: this.propertyNames[$map](data_table.DataCell, dart.fn(propName => new data_table.DataCell.new(new text.Text.new(dart.toString(dart.dsend(obj, '_get', [propName])))), T$.StringToDataCell()))[$toList]()}), T$.dynamicToDataRow()))[$toList]()});
    }
  };
  (main.DataTableWidget.new = function(opts) {
    let jsonObjects = opts && 'jsonObjects' in opts ? opts.jsonObjects : C[13] || CT.C13;
    let columnNames = opts && 'columnNames' in opts ? opts.columnNames : C[14] || CT.C14;
    let propertyNames = opts && 'propertyNames' in opts ? opts.propertyNames : C[14] || CT.C14;
    this[jsonObjects$] = jsonObjects;
    this[columnNames$] = columnNames;
    this[propertyNames$] = propertyNames;
    main.DataTableWidget.__proto__.new.call(this);
    ;
  }).prototype = main.DataTableWidget.prototype;
  dart.addTypeTests(main.DataTableWidget);
  dart.addTypeCaches(main.DataTableWidget);
  dart.setMethodSignature(main.DataTableWidget, () => ({
    __proto__: dart.getMethods(main.DataTableWidget.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.DataTableWidget, I[0]);
  dart.setFieldSignature(main.DataTableWidget, () => ({
    __proto__: dart.getFields(main.DataTableWidget.__proto__),
    jsonObjects: dart.finalFieldType(core.List),
    columnNames: dart.finalFieldType(core.List$(core.String)),
    propertyNames: dart.finalFieldType(core.List$(core.String))
  }));
  main.main = function main$0() {
    let app = new main.MyApp.new();
    binding.runApp(app);
  };
  dart.defineLazy(main, {
    /*main.dataService*/get dataService() {
      return new main.DataService.new();
    }
  }, false);
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  http.head = function head(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(response$.Response, dart.fn(client => client.head(url, {headers: headers}), T$.ClientToFutureOfResponse()));
  };
  http.get = function get(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(response$.Response, dart.fn(client => client.get(url, {headers: headers}), T$.ClientToFutureOfResponse()));
  };
  http.post = function post(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.post(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.put = function put(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.put(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.patch = function patch(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.patch(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.delete = function $delete(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.delete(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.read = function read(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(core.String, dart.fn(client => client.read(url, {headers: headers}), T$.ClientToFutureOfString()));
  };
  http.readBytes = function readBytes(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(typed_data.Uint8List, dart.fn(client => client.readBytes(url, {headers: headers}), T$.ClientToFutureOfUint8List()));
  };
  http._withClient = function _withClient(T, fn) {
    return async.async(T, function* _withClient() {
      let client = client$.Client.new();
      try {
        return yield fn(client);
      } finally {
        client.close();
      }
    });
  };
  client$.Client = class Client extends core.Object {
    static new() {
      let t0;
      t0 = client$.zoneClient;
      return t0 == null ? browser_client.createClient() : t0;
    }
    static ['_#new#tearOff']() {
      return client$.Client.new();
    }
  };
  (client$.Client[dart.mixinNew] = function() {
  }).prototype = client$.Client.prototype;
  dart.addTypeTests(client$.Client);
  dart.addTypeCaches(client$.Client);
  dart.setStaticMethodSignature(client$.Client, () => ['new']);
  dart.setLibraryUri(client$.Client, I[2]);
  var _clientToken = dart.privateName(client$, "_clientToken");
  client$.runWithClient = function runWithClient(R, body, clientFactory, opts) {
    let zoneSpecification = opts && 'zoneSpecification' in opts ? opts.zoneSpecification : null;
    return async.runZoned(R, body, {zoneValues: new (T$.LinkedMapOfObjectN$ObjectN()).from([C[15] || CT.C15, async.Zone.current.bindCallback(client$.Client, clientFactory)]), zoneSpecification: zoneSpecification});
  };
  dart.copyProperties(client$, {
    get zoneClient() {
      let client = async.Zone.current._get(C[15] || CT.C15);
      return client == null ? null : T$.VoidToClient().as(client)();
    }
  });
  var message$ = dart.privateName(exception, "ClientException.message");
  var uri$ = dart.privateName(exception, "ClientException.uri");
  exception.ClientException = class ClientException extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    static ['_#new#tearOff'](message, uri = null) {
      return new exception.ClientException.new(message, uri);
    }
    toString() {
      return this.message;
    }
  };
  (exception.ClientException.new = function(message, uri = null) {
    this[message$] = message;
    this[uri$] = uri;
    ;
  }).prototype = exception.ClientException.prototype;
  dart.addTypeTests(exception.ClientException);
  dart.addTypeCaches(exception.ClientException);
  exception.ClientException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(exception.ClientException, I[3]);
  dart.setFieldSignature(exception.ClientException, () => ({
    __proto__: dart.getFields(exception.ClientException.__proto__),
    message: dart.finalFieldType(core.String),
    uri: dart.finalFieldType(dart.nullable(core.Uri))
  }));
  dart.defineExtensionMethods(exception.ClientException, ['toString']);
  var _defaultEncoding = dart.privateName(request$, "_defaultEncoding");
  var _bodyBytes = dart.privateName(request$, "_bodyBytes");
  var _contentType = dart.privateName(request$, "_contentType");
  var _checkFinalized = dart.privateName(request$, "_checkFinalized");
  var method$ = dart.privateName(base_request, "BaseRequest.method");
  var url$ = dart.privateName(base_request, "BaseRequest.url");
  var headers = dart.privateName(base_request, "BaseRequest.headers");
  var _contentLength = dart.privateName(base_request, "_contentLength");
  var _persistentConnection = dart.privateName(base_request, "_persistentConnection");
  var _followRedirects = dart.privateName(base_request, "_followRedirects");
  var _maxRedirects = dart.privateName(base_request, "_maxRedirects");
  var _finalized = dart.privateName(base_request, "_finalized");
  var _checkFinalized$ = dart.privateName(base_request, "_checkFinalized");
  var StreamView__stream = dart.privateName(async, "StreamView._stream");
  base_request.BaseRequest = class BaseRequest extends core.Object {
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get headers() {
      return this[headers];
    }
    set headers(value) {
      super.headers = value;
    }
    get contentLength() {
      return this[_contentLength];
    }
    set contentLength(value) {
      if (value != null && dart.notNull(value) < 0) {
        dart.throw(new core.ArgumentError.new("Invalid content length " + dart.str(value) + "."));
      }
      this[_checkFinalized$]();
      this[_contentLength] = value;
    }
    get persistentConnection() {
      return this[_persistentConnection];
    }
    set persistentConnection(value) {
      this[_checkFinalized$]();
      this[_persistentConnection] = value;
    }
    get followRedirects() {
      return this[_followRedirects];
    }
    set followRedirects(value) {
      this[_checkFinalized$]();
      this[_followRedirects] = value;
    }
    get maxRedirects() {
      return this[_maxRedirects];
    }
    set maxRedirects(value) {
      this[_checkFinalized$]();
      this[_maxRedirects] = value;
    }
    get finalized() {
      return this[_finalized];
    }
    static _validateMethod(method) {
      if (!base_request.BaseRequest._tokenRE.hasMatch(method)) {
        dart.throw(new core.ArgumentError.value(method, "method", "Not a valid method"));
      }
      return method;
    }
    finalize() {
      if (this.finalized) dart.throw(new core.StateError.new("Can't finalize a finalized Request."));
      this[_finalized] = true;
      return C[16] || CT.C16;
    }
    send() {
      return async.async(streamed_response.StreamedResponse, (function* send() {
        let client = client$.Client.new();
        try {
          let response = (yield client.send(this));
          let stream = utils.onDone(T$.ListOfint(), response.stream, dart.bind(client, 'close'));
          return new streamed_response.StreamedResponse.new(new byte_stream.ByteStream.new(stream), response.statusCode, {contentLength: response.contentLength, request: response.request, headers: response.headers, isRedirect: response.isRedirect, persistentConnection: response.persistentConnection, reasonPhrase: response.reasonPhrase});
        } catch (e) {
          let _ = dart.getThrown(e);
          if (core.Object.is(_)) {
            client.close();
            dart.rethrow(e);
          } else
            throw e;
        }
      }).bind(this));
    }
    [_checkFinalized$]() {
      if (!this.finalized) return;
      dart.throw(new core.StateError.new("Can't modify a finalized Request."));
    }
    toString() {
      return this.method + " " + dart.str(this.url);
    }
  };
  (base_request.BaseRequest.new = function(method, url) {
    this[_contentLength] = null;
    this[_persistentConnection] = true;
    this[_followRedirects] = true;
    this[_maxRedirects] = 5;
    this[_finalized] = false;
    this[url$] = url;
    this[method$] = base_request.BaseRequest._validateMethod(method);
    this[headers] = T$.LinkedHashMapOfString$String().new({equals: dart.fn((key1, key2) => key1[$toLowerCase]() === key2[$toLowerCase](), T$.StringAndStringTobool()), hashCode: dart.fn(key => key[$toLowerCase]()[$hashCode], T$.StringToint())});
    ;
  }).prototype = base_request.BaseRequest.prototype;
  dart.addTypeTests(base_request.BaseRequest);
  dart.addTypeCaches(base_request.BaseRequest);
  dart.setMethodSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getMethods(base_request.BaseRequest.__proto__),
    finalize: dart.fnType(byte_stream.ByteStream, []),
    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), []),
    [_checkFinalized$]: dart.fnType(dart.void, [])
  }));
  dart.setStaticMethodSignature(base_request.BaseRequest, () => ['_validateMethod']);
  dart.setGetterSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getGetters(base_request.BaseRequest.__proto__),
    contentLength: dart.nullable(core.int),
    persistentConnection: core.bool,
    followRedirects: core.bool,
    maxRedirects: core.int,
    finalized: core.bool
  }));
  dart.setSetterSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getSetters(base_request.BaseRequest.__proto__),
    contentLength: dart.nullable(core.int),
    persistentConnection: core.bool,
    followRedirects: core.bool,
    maxRedirects: core.int
  }));
  dart.setLibraryUri(base_request.BaseRequest, I[4]);
  dart.setFieldSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getFields(base_request.BaseRequest.__proto__),
    method: dart.finalFieldType(core.String),
    url: dart.finalFieldType(core.Uri),
    [_contentLength]: dart.fieldType(dart.nullable(core.int)),
    [_persistentConnection]: dart.fieldType(core.bool),
    [_followRedirects]: dart.fieldType(core.bool),
    [_maxRedirects]: dart.fieldType(core.int),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    [_finalized]: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(base_request.BaseRequest, () => ['_tokenRE']);
  dart.defineExtensionMethods(base_request.BaseRequest, ['toString']);
  dart.defineLazy(base_request.BaseRequest, {
    /*base_request.BaseRequest._tokenRE*/get _tokenRE() {
      return core.RegExp.new("^[\\w!#%&'*+\\-.^`|~]+$");
    }
  }, false);
  request$.Request = class Request extends base_request.BaseRequest {
    get contentLength() {
      return this.bodyBytes[$length];
    }
    set contentLength(value) {
      dart.throw(new core.UnsupportedError.new("Cannot set the contentLength property of " + "non-streaming Request objects."));
    }
    get encoding() {
      if (this[_contentType] == null || !dart.nullCheck(this[_contentType]).parameters[$containsKey]("charset")) {
        return this[_defaultEncoding];
      }
      return utils.requiredEncodingForCharset(dart.nullCheck(dart.nullCheck(this[_contentType]).parameters[$_get]("charset")));
    }
    set encoding(value) {
      this[_checkFinalized]();
      this[_defaultEncoding] = value;
      let contentType = this[_contentType];
      if (contentType == null) return;
      this[_contentType] = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", value.name])});
    }
    get bodyBytes() {
      return this[_bodyBytes];
    }
    set bodyBytes(value) {
      this[_checkFinalized]();
      this[_bodyBytes] = utils.toUint8List(value);
    }
    get body() {
      return this.encoding.decode(this.bodyBytes);
    }
    set body(value) {
      this.bodyBytes = this.encoding.encode(value);
      let contentType = this[_contentType];
      if (contentType == null) {
        this[_contentType] = new media_type.MediaType.new("text", "plain", new (T$.IdentityMapOfString$String()).from(["charset", this.encoding.name]));
      } else if (!contentType.parameters[$containsKey]("charset")) {
        this[_contentType] = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", this.encoding.name])});
      }
    }
    get bodyFields() {
      let contentType = this[_contentType];
      if (contentType == null || contentType.mimeType !== "application/x-www-form-urlencoded") {
        dart.throw(new core.StateError.new("Cannot access the body fields of a Request without " + "content-type \"application/x-www-form-urlencoded\"."));
      }
      return core.Uri.splitQueryString(this.body, {encoding: this.encoding});
    }
    set bodyFields(fields) {
      let contentType = this[_contentType];
      if (contentType == null) {
        this[_contentType] = new media_type.MediaType.new("application", "x-www-form-urlencoded");
      } else if (contentType.mimeType !== "application/x-www-form-urlencoded") {
        dart.throw(new core.StateError.new("Cannot set the body fields of a Request with " + "content-type \"" + contentType.mimeType + "\"."));
      }
      this.body = utils.mapToQuery(fields, {encoding: this.encoding});
    }
    static ['_#new#tearOff'](method, url) {
      return new request$.Request.new(method, url);
    }
    finalize() {
      super.finalize();
      return byte_stream.ByteStream.fromBytes(this.bodyBytes);
    }
    get [_contentType]() {
      let contentType = this.headers[$_get]("content-type");
      if (contentType == null) return null;
      return media_type.MediaType.parse(contentType);
    }
    set [_contentType](value) {
      if (value == null) {
        this.headers[$remove]("content-type");
      } else {
        this.headers[$_set]("content-type", dart.toString(value));
      }
    }
    [_checkFinalized]() {
      if (!this.finalized) return;
      dart.throw(new core.StateError.new("Can't modify a finalized Request."));
    }
  };
  (request$.Request.new = function(method, url) {
    this[_defaultEncoding] = convert.utf8;
    this[_bodyBytes] = _native_typed_data.NativeUint8List.new(0);
    request$.Request.__proto__.new.call(this, method, url);
    ;
  }).prototype = request$.Request.prototype;
  dart.addTypeTests(request$.Request);
  dart.addTypeCaches(request$.Request);
  dart.setMethodSignature(request$.Request, () => ({
    __proto__: dart.getMethods(request$.Request.__proto__),
    [_checkFinalized]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(request$.Request, () => ({
    __proto__: dart.getGetters(request$.Request.__proto__),
    contentLength: core.int,
    encoding: convert.Encoding,
    bodyBytes: typed_data.Uint8List,
    body: core.String,
    bodyFields: core.Map$(core.String, core.String),
    [_contentType]: dart.nullable(media_type.MediaType)
  }));
  dart.setSetterSignature(request$.Request, () => ({
    __proto__: dart.getSetters(request$.Request.__proto__),
    encoding: convert.Encoding,
    bodyBytes: core.List$(core.int),
    body: core.String,
    bodyFields: core.Map$(core.String, core.String),
    [_contentType]: dart.nullable(media_type.MediaType)
  }));
  dart.setLibraryUri(request$.Request, I[5]);
  dart.setFieldSignature(request$.Request, () => ({
    __proto__: dart.getFields(request$.Request.__proto__),
    [_defaultEncoding]: dart.fieldType(convert.Encoding),
    [_bodyBytes]: dart.fieldType(typed_data.Uint8List)
  }));
  var bodyBytes$ = dart.privateName(response$, "Response.bodyBytes");
  var request$0 = dart.privateName(base_response, "BaseResponse.request");
  var statusCode$ = dart.privateName(base_response, "BaseResponse.statusCode");
  var reasonPhrase$ = dart.privateName(base_response, "BaseResponse.reasonPhrase");
  var contentLength$ = dart.privateName(base_response, "BaseResponse.contentLength");
  var headers$ = dart.privateName(base_response, "BaseResponse.headers");
  var isRedirect$ = dart.privateName(base_response, "BaseResponse.isRedirect");
  var persistentConnection$ = dart.privateName(base_response, "BaseResponse.persistentConnection");
  base_response.BaseResponse = class BaseResponse extends core.Object {
    get request() {
      return this[request$0];
    }
    set request(value) {
      super.request = value;
    }
    get statusCode() {
      return this[statusCode$];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    get reasonPhrase() {
      return this[reasonPhrase$];
    }
    set reasonPhrase(value) {
      super.reasonPhrase = value;
    }
    get contentLength() {
      return this[contentLength$];
    }
    set contentLength(value) {
      super.contentLength = value;
    }
    get headers() {
      return this[headers$];
    }
    set headers(value) {
      super.headers = value;
    }
    get isRedirect() {
      return this[isRedirect$];
    }
    set isRedirect(value) {
      super.isRedirect = value;
    }
    get persistentConnection() {
      return this[persistentConnection$];
    }
    set persistentConnection(value) {
      super.persistentConnection = value;
    }
  };
  (base_response.BaseResponse.new = function(statusCode, opts) {
    let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[18] || CT.C18;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[statusCode$] = statusCode;
    this[contentLength$] = contentLength;
    this[request$0] = request;
    this[headers$] = headers;
    this[isRedirect$] = isRedirect;
    this[persistentConnection$] = persistentConnection;
    this[reasonPhrase$] = reasonPhrase;
    if (this.statusCode < 100) {
      dart.throw(new core.ArgumentError.new("Invalid status code " + dart.str(this.statusCode) + "."));
    } else if (this.contentLength != null && dart.nullCheck(this.contentLength) < 0) {
      dart.throw(new core.ArgumentError.new("Invalid content length " + dart.str(this.contentLength) + "."));
    }
  }).prototype = base_response.BaseResponse.prototype;
  dart.addTypeTests(base_response.BaseResponse);
  dart.addTypeCaches(base_response.BaseResponse);
  dart.setLibraryUri(base_response.BaseResponse, I[6]);
  dart.setFieldSignature(base_response.BaseResponse, () => ({
    __proto__: dart.getFields(base_response.BaseResponse.__proto__),
    request: dart.finalFieldType(dart.nullable(base_request.BaseRequest)),
    statusCode: dart.finalFieldType(core.int),
    reasonPhrase: dart.finalFieldType(dart.nullable(core.String)),
    contentLength: dart.finalFieldType(dart.nullable(core.int)),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    isRedirect: dart.finalFieldType(core.bool),
    persistentConnection: dart.finalFieldType(core.bool)
  }));
  response$.Response = class Response extends base_response.BaseResponse {
    get bodyBytes() {
      return this[bodyBytes$];
    }
    set bodyBytes(value) {
      super.bodyBytes = value;
    }
    get body() {
      return response$._encodingForHeaders(this.headers).decode(this.bodyBytes);
    }
    static ['_#new#tearOff'](body, statusCode, opts) {
      let request = opts && 'request' in opts ? opts.request : null;
      let headers = opts && 'headers' in opts ? opts.headers : C[18] || CT.C18;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
      return new response$.Response.new(body, statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
    static ['_#bytes#tearOff'](bodyBytes, statusCode, opts) {
      let request = opts && 'request' in opts ? opts.request : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
      return new response$.Response.bytes(bodyBytes, statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
    static fromStream(response) {
      return async.async(response$.Response, function* fromStream() {
        let body = (yield response.stream.toBytes());
        return new response$.Response.bytes(body, response.statusCode, {request: response.request, headers: response.headers, isRedirect: response.isRedirect, persistentConnection: response.persistentConnection, reasonPhrase: response.reasonPhrase});
      });
    }
  };
  (response$.Response.new = function(body, statusCode, opts) {
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[18] || CT.C18;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    response$.Response.bytes.call(this, response$._encodingForHeaders(headers).encode(body), statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
  }).prototype = response$.Response.prototype;
  (response$.Response.bytes = function(bodyBytes, statusCode, opts) {
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[18] || CT.C18;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[bodyBytes$] = utils.toUint8List(bodyBytes);
    response$.Response.__proto__.new.call(this, statusCode, {contentLength: bodyBytes[$length], request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    ;
  }).prototype = response$.Response.prototype;
  dart.addTypeTests(response$.Response);
  dart.addTypeCaches(response$.Response);
  dart.setStaticMethodSignature(response$.Response, () => ['fromStream']);
  dart.setGetterSignature(response$.Response, () => ({
    __proto__: dart.getGetters(response$.Response.__proto__),
    body: core.String
  }));
  dart.setLibraryUri(response$.Response, I[7]);
  dart.setFieldSignature(response$.Response, () => ({
    __proto__: dart.getFields(response$.Response.__proto__),
    bodyBytes: dart.finalFieldType(typed_data.Uint8List)
  }));
  response$._encodingForHeaders = function _encodingForHeaders(headers) {
    return utils.encodingForCharset(response$._contentTypeForHeaders(headers).parameters[$_get]("charset"));
  };
  response$._contentTypeForHeaders = function _contentTypeForHeaders(headers) {
    let contentType = headers[$_get]("content-type");
    if (contentType != null) return media_type.MediaType.parse(contentType);
    return new media_type.MediaType.new("application", "octet-stream");
  };
  var _controller = dart.privateName(streamed_request, "_controller");
  streamed_request.StreamedRequest = class StreamedRequest extends base_request.BaseRequest {
    get sink() {
      return this[_controller].sink;
    }
    static ['_#new#tearOff'](method, url) {
      return new streamed_request.StreamedRequest.new(method, url);
    }
    finalize() {
      super.finalize();
      return new byte_stream.ByteStream.new(this[_controller].stream);
    }
  };
  (streamed_request.StreamedRequest.new = function(method, url) {
    this[_controller] = T$.StreamControllerOfListOfint().new({sync: true});
    streamed_request.StreamedRequest.__proto__.new.call(this, method, url);
    ;
  }).prototype = streamed_request.StreamedRequest.prototype;
  dart.addTypeTests(streamed_request.StreamedRequest);
  dart.addTypeCaches(streamed_request.StreamedRequest);
  dart.setGetterSignature(streamed_request.StreamedRequest, () => ({
    __proto__: dart.getGetters(streamed_request.StreamedRequest.__proto__),
    sink: async.EventSink$(core.List$(core.int))
  }));
  dart.setLibraryUri(streamed_request.StreamedRequest, I[8]);
  dart.setFieldSignature(streamed_request.StreamedRequest, () => ({
    __proto__: dart.getFields(streamed_request.StreamedRequest.__proto__),
    [_controller]: dart.finalFieldType(async.StreamController$(core.List$(core.int)))
  }));
  var _sendUnstreamed = dart.privateName(base_client, "_sendUnstreamed");
  var _checkResponseSuccess = dart.privateName(base_client, "_checkResponseSuccess");
  base_client.BaseClient = class BaseClient extends core.Object {
    head(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return this[_sendUnstreamed]("HEAD", url, headers);
    }
    get(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return this[_sendUnstreamed]("GET", url, headers);
    }
    post(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[_sendUnstreamed]("POST", url, headers, body, encoding);
    }
    put(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[_sendUnstreamed]("PUT", url, headers, body, encoding);
    }
    patch(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[_sendUnstreamed]("PATCH", url, headers, body, encoding);
    }
    delete(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[_sendUnstreamed]("DELETE", url, headers, body, encoding);
    }
    read(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(core.String, (function* read() {
        let response = (yield this.get(url, {headers: headers}));
        this[_checkResponseSuccess](url, response);
        return response.body;
      }).bind(this));
    }
    readBytes(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(typed_data.Uint8List, (function* readBytes() {
        let response = (yield this.get(url, {headers: headers}));
        this[_checkResponseSuccess](url, response);
        return response.bodyBytes;
      }).bind(this));
    }
    [_sendUnstreamed](method, url, headers, body = null, encoding = null) {
      return async.async(response$.Response, (function* _sendUnstreamed() {
        let request = new request$.Request.new(method, url);
        if (headers != null) request.headers[$addAll](headers);
        if (encoding != null) request.encoding = encoding;
        if (body != null) {
          if (typeof body == 'string') {
            request.body = body;
          } else if (core.List.is(body)) {
            request.bodyBytes = body[$cast](core.int);
          } else if (core.Map.is(body)) {
            request.bodyFields = body[$cast](core.String, core.String);
          } else {
            dart.throw(new core.ArgumentError.new("Invalid request body \"" + dart.str(body) + "\"."));
          }
        }
        return response$.Response.fromStream(yield this.send(request));
      }).bind(this));
    }
    [_checkResponseSuccess](url, response) {
      if (response.statusCode < 400) return;
      let message = "Request to " + dart.str(url) + " failed with status " + dart.str(response.statusCode);
      if (response.reasonPhrase != null) {
        message = message + ": " + dart.str(response.reasonPhrase);
      }
      dart.throw(new exception.ClientException.new(message + ".", url));
    }
    close() {
    }
  };
  (base_client.BaseClient.new = function() {
    ;
  }).prototype = base_client.BaseClient.prototype;
  dart.addTypeTests(base_client.BaseClient);
  dart.addTypeCaches(base_client.BaseClient);
  base_client.BaseClient[dart.implements] = () => [client$.Client];
  dart.setMethodSignature(base_client.BaseClient, () => ({
    __proto__: dart.getMethods(base_client.BaseClient.__proto__),
    head: dart.fnType(async.Future$(response$.Response), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    get: dart.fnType(async.Future$(response$.Response), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    post: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    put: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    patch: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    delete: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    read: dart.fnType(async.Future$(core.String), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    readBytes: dart.fnType(async.Future$(typed_data.Uint8List), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    [_sendUnstreamed]: dart.fnType(async.Future$(response$.Response), [core.String, core.Uri, dart.nullable(core.Map$(core.String, core.String))], [dart.nullable(core.Object), dart.nullable(convert.Encoding)]),
    [_checkResponseSuccess]: dart.fnType(dart.void, [core.Uri, response$.Response]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(base_client.BaseClient, I[9]);
  var Utf8Codec__allowMalformed = dart.privateName(convert, "Utf8Codec._allowMalformed");
  byte_stream.ByteStream = class ByteStream extends async.StreamView$(core.List$(core.int)) {
    static ['_#new#tearOff'](stream) {
      return new byte_stream.ByteStream.new(stream);
    }
    static fromBytes(bytes) {
      return new byte_stream.ByteStream.new(T$.StreamOfListOfint().value(bytes));
    }
    static ['_#fromBytes#tearOff'](bytes) {
      return byte_stream.ByteStream.fromBytes(bytes);
    }
    toBytes() {
      let completer = T$.CompleterOfUint8List().new();
      let sink = new convert._ByteCallbackSink.new(dart.fn(bytes => completer.complete(_native_typed_data.NativeUint8List.fromList(bytes)), T$.ListOfintTovoid()));
      this.listen(T$.ListOfintTovoid().as(dart.bind(sink, 'add')), {onError: dart.bind(completer, 'completeError'), onDone: dart.bind(sink, 'close'), cancelOnError: true});
      return completer.future;
    }
    bytesToString(encoding = C[19] || CT.C19) {
      return encoding.decodeStream(this);
    }
    toStringStream(encoding = C[19] || CT.C19) {
      return encoding.decoder.bind(this);
    }
  };
  (byte_stream.ByteStream.new = function(stream) {
    byte_stream.ByteStream.__proto__.new.call(this, stream);
    ;
  }).prototype = byte_stream.ByteStream.prototype;
  dart.addTypeTests(byte_stream.ByteStream);
  dart.addTypeCaches(byte_stream.ByteStream);
  dart.setMethodSignature(byte_stream.ByteStream, () => ({
    __proto__: dart.getMethods(byte_stream.ByteStream.__proto__),
    toBytes: dart.fnType(async.Future$(typed_data.Uint8List), []),
    bytesToString: dart.fnType(async.Future$(core.String), [], [convert.Encoding]),
    toStringStream: dart.fnType(async.Stream$(core.String), [], [convert.Encoding])
  }));
  dart.setStaticMethodSignature(byte_stream.ByteStream, () => ['fromBytes']);
  dart.setLibraryUri(byte_stream.ByteStream, I[10]);
  var field$ = dart.privateName(multipart_file, "MultipartFile.field");
  var length$ = dart.privateName(multipart_file, "MultipartFile.length");
  var filename$ = dart.privateName(multipart_file, "MultipartFile.filename");
  var contentType$ = dart.privateName(multipart_file, "MultipartFile.contentType");
  var _isFinalized = dart.privateName(multipart_file, "_isFinalized");
  var _stream = dart.privateName(multipart_file, "_stream");
  multipart_file.MultipartFile = class MultipartFile extends core.Object {
    get field() {
      return this[field$];
    }
    set field(value) {
      super.field = value;
    }
    get length() {
      return this[length$];
    }
    set length(value) {
      super.length = value;
    }
    get filename() {
      return this[filename$];
    }
    set filename(value) {
      super.filename = value;
    }
    get contentType() {
      return this[contentType$];
    }
    set contentType(value) {
      super.contentType = value;
    }
    get isFinalized() {
      return this[_isFinalized];
    }
    static ['_#new#tearOff'](field, stream, length, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return new multipart_file.MultipartFile.new(field, stream, length, {filename: filename, contentType: contentType});
    }
    static fromBytes(field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let stream = byte_stream.ByteStream.fromBytes(value);
      return new multipart_file.MultipartFile.new(field, stream, value[$length], {filename: filename, contentType: contentType});
    }
    static ['_#fromBytes#tearOff'](field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return multipart_file.MultipartFile.fromBytes(field, value, {filename: filename, contentType: contentType});
    }
    static fromString(field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      contentType == null ? contentType = new media_type.MediaType.new("text", "plain") : null;
      let encoding = utils.encodingForCharset(contentType.parameters[$_get]("charset"), convert.utf8);
      contentType = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", encoding.name])});
      return multipart_file.MultipartFile.fromBytes(field, encoding.encode(value), {filename: filename, contentType: contentType});
    }
    static ['_#fromString#tearOff'](field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return multipart_file.MultipartFile.fromString(field, value, {filename: filename, contentType: contentType});
    }
    static fromPath(field, filePath, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return multipart_file_stub.multipartFileFromPath(field, filePath, {filename: filename, contentType: contentType});
    }
    finalize() {
      if (this.isFinalized) {
        dart.throw(new core.StateError.new("Can't finalize a finalized MultipartFile."));
      }
      this[_isFinalized] = true;
      return this[_stream];
    }
  };
  (multipart_file.MultipartFile.new = function(field, stream, length, opts) {
    let t1;
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    this[_isFinalized] = false;
    this[field$] = field;
    this[length$] = length;
    this[filename$] = filename;
    this[_stream] = utils.toByteStream(stream);
    this[contentType$] = (t1 = contentType, t1 == null ? new media_type.MediaType.new("application", "octet-stream") : t1);
    ;
  }).prototype = multipart_file.MultipartFile.prototype;
  dart.addTypeTests(multipart_file.MultipartFile);
  dart.addTypeCaches(multipart_file.MultipartFile);
  dart.setMethodSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getMethods(multipart_file.MultipartFile.__proto__),
    finalize: dart.fnType(byte_stream.ByteStream, [])
  }));
  dart.setStaticMethodSignature(multipart_file.MultipartFile, () => ['fromBytes', 'fromString', 'fromPath']);
  dart.setGetterSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getGetters(multipart_file.MultipartFile.__proto__),
    isFinalized: core.bool
  }));
  dart.setLibraryUri(multipart_file.MultipartFile, I[11]);
  dart.setFieldSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getFields(multipart_file.MultipartFile.__proto__),
    field: dart.finalFieldType(core.String),
    length: dart.finalFieldType(core.int),
    filename: dart.finalFieldType(dart.nullable(core.String)),
    contentType: dart.finalFieldType(media_type.MediaType),
    [_stream]: dart.finalFieldType(byte_stream.ByteStream),
    [_isFinalized]: dart.fieldType(core.bool)
  }));
  var fields = dart.privateName(multipart_request, "MultipartRequest.fields");
  var files = dart.privateName(multipart_request, "MultipartRequest.files");
  var _headerForField = dart.privateName(multipart_request, "_headerForField");
  var _headerForFile = dart.privateName(multipart_request, "_headerForFile");
  var _boundaryString = dart.privateName(multipart_request, "_boundaryString");
  var _finalize = dart.privateName(multipart_request, "_finalize");
  var _browserEncode = dart.privateName(multipart_request, "_browserEncode");
  multipart_request.MultipartRequest = class MultipartRequest extends base_request.BaseRequest {
    get fields() {
      return this[fields];
    }
    set fields(value) {
      super.fields = value;
    }
    get files() {
      return this[files];
    }
    set files(value) {
      super.files = value;
    }
    static ['_#new#tearOff'](method, url) {
      return new multipart_request.MultipartRequest.new(method, url);
    }
    get contentLength() {
      let length = 0;
      this.fields[$forEach](dart.fn((name, value) => {
        length = length + ("--".length + 70 + "\r\n".length + convert.utf8.encode(this[_headerForField](name, value))[$length] + convert.utf8.encode(value)[$length] + "\r\n".length);
      }, T$.StringAndStringTovoid()));
      for (let file of this.files) {
        length = length + ("--".length + 70 + "\r\n".length + convert.utf8.encode(this[_headerForFile](file))[$length] + file.length + "\r\n".length);
      }
      return length + "--".length + 70 + "--\r\n".length;
    }
    set contentLength(value) {
      dart.throw(new core.UnsupportedError.new("Cannot set the contentLength property of " + "multipart requests."));
    }
    finalize() {
      let boundary = this[_boundaryString]();
      this.headers[$_set]("content-type", "multipart/form-data; boundary=" + boundary);
      super.finalize();
      return new byte_stream.ByteStream.new(this[_finalize](boundary));
    }
    [_finalize](boundary) {
      return new (T$._AsyncStarImplOfListOfint()).new((function* _finalize(stream) {
        let line = C[20] || CT.C20;
        let separator = convert.utf8.encode("--" + boundary + "\r\n");
        let close = convert.utf8.encode("--" + boundary + "--\r\n");
        for (let field of this.fields[$entries]) {
          if (stream.add(separator)) return;
          yield;
          if (stream.add(convert.utf8.encode(this[_headerForField](field.key, field.value)))) return;
          yield;
          if (stream.add(convert.utf8.encode(field.value))) return;
          yield;
          if (stream.add(line)) return;
          yield;
        }
        for (let file of this.files) {
          if (stream.add(separator)) return;
          yield;
          if (stream.add(convert.utf8.encode(this[_headerForFile](file)))) return;
          yield;
          if (stream.addStream(file.finalize())) return;
          yield;
          if (stream.add(line)) return;
          yield;
        }
        if (stream.add(close)) return;
        yield;
      }).bind(this)).stream;
    }
    [_headerForField](name, value) {
      let header = "content-disposition: form-data; name=\"" + this[_browserEncode](name) + "\"";
      if (!utils.isPlainAscii(value)) {
        header = header + "\r\n" + "content-type: text/plain; charset=utf-8\r\n" + "content-transfer-encoding: binary";
      }
      return header + "\r\n\r\n";
    }
    [_headerForFile](file) {
      let header = "content-type: " + dart.str(file.contentType) + "\r\n" + "content-disposition: form-data; name=\"" + this[_browserEncode](file.field) + "\"";
      if (file.filename != null) {
        header = header + "; filename=\"" + this[_browserEncode](dart.nullCheck(file.filename)) + "\"";
      }
      return header + "\r\n\r\n";
    }
    [_browserEncode](value) {
      return value[$replaceAll](multipart_request._newlineRegExp, "%0D%0A")[$replaceAll]("\"", "%22");
    }
    [_boundaryString]() {
      let prefix = "dart-http-boundary-";
      let list = T$.ListOfint().generate(70 - prefix.length, dart.fn(index => boundary_characters.boundaryCharacters[$_get](multipart_request.MultipartRequest._random.nextInt(boundary_characters.boundaryCharacters[$length])), T$.intToint()), {growable: false});
      return prefix + core.String.fromCharCodes(list);
    }
  };
  (multipart_request.MultipartRequest.new = function(method, url) {
    this[fields] = new (T$.IdentityMapOfString$String()).new();
    this[files] = T$.JSArrayOfMultipartFile().of([]);
    multipart_request.MultipartRequest.__proto__.new.call(this, method, url);
    ;
  }).prototype = multipart_request.MultipartRequest.prototype;
  dart.addTypeTests(multipart_request.MultipartRequest);
  dart.addTypeCaches(multipart_request.MultipartRequest);
  dart.setMethodSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getMethods(multipart_request.MultipartRequest.__proto__),
    [_finalize]: dart.fnType(async.Stream$(core.List$(core.int)), [core.String]),
    [_headerForField]: dart.fnType(core.String, [core.String, core.String]),
    [_headerForFile]: dart.fnType(core.String, [multipart_file.MultipartFile]),
    [_browserEncode]: dart.fnType(core.String, [core.String]),
    [_boundaryString]: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getGetters(multipart_request.MultipartRequest.__proto__),
    contentLength: core.int
  }));
  dart.setLibraryUri(multipart_request.MultipartRequest, I[12]);
  dart.setFieldSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getFields(multipart_request.MultipartRequest.__proto__),
    fields: dart.finalFieldType(core.Map$(core.String, core.String)),
    files: dart.finalFieldType(core.List$(multipart_file.MultipartFile))
  }));
  dart.setStaticFieldSignature(multipart_request.MultipartRequest, () => ['_boundaryLength', '_random']);
  dart.defineLazy(multipart_request.MultipartRequest, {
    /*multipart_request.MultipartRequest._boundaryLength*/get _boundaryLength() {
      return 70;
    },
    /*multipart_request.MultipartRequest._random*/get _random() {
      return math.Random.new();
    }
  }, false);
  dart.defineLazy(multipart_request, {
    /*multipart_request._newlineRegExp*/get _newlineRegExp() {
      return core.RegExp.new("\\r\\n|\\r|\\n");
    }
  }, false);
  var stream$ = dart.privateName(streamed_response, "StreamedResponse.stream");
  streamed_response.StreamedResponse = class StreamedResponse extends base_response.BaseResponse {
    get stream() {
      return this[stream$];
    }
    set stream(value) {
      super.stream = value;
    }
    static ['_#new#tearOff'](stream, statusCode, opts) {
      let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
      let request = opts && 'request' in opts ? opts.request : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
      return new streamed_response.StreamedResponse.new(stream, statusCode, {contentLength: contentLength, request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
  };
  (streamed_response.StreamedResponse.new = function(stream, statusCode, opts) {
    let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[18] || CT.C18;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[stream$] = utils.toByteStream(stream);
    streamed_response.StreamedResponse.__proto__.new.call(this, statusCode, {contentLength: contentLength, request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    ;
  }).prototype = streamed_response.StreamedResponse.prototype;
  dart.addTypeTests(streamed_response.StreamedResponse);
  dart.addTypeCaches(streamed_response.StreamedResponse);
  dart.setLibraryUri(streamed_response.StreamedResponse, I[13]);
  dart.setFieldSignature(streamed_response.StreamedResponse, () => ({
    __proto__: dart.getFields(streamed_response.StreamedResponse.__proto__),
    stream: dart.finalFieldType(byte_stream.ByteStream)
  }));
  var keys$ = dart.privateName(framework$, "Hook.keys");
  var _use = dart.privateName(framework$, "_use");
  const _is_Hook_default = Symbol('_is_Hook_default');
  framework$.Hook$ = dart.generic(R => {
    const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
    (Object_Diagnosticable$36.new = function() {
    }).prototype = Object_Diagnosticable$36.prototype;
    dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
    class Hook extends Object_Diagnosticable$36 {
      get keys() {
        return this[keys$];
      }
      set keys(value) {
        super.keys = value;
      }
      static use(R, hook) {
        if (!(framework$.HookElement._currentHookElement != null)) dart.assertFailed("Hooks can only be called from the build method of a widget that mix-in `Hooks`.\n\nHooks should only be called within the build method of a widget.\nCalling them outside of build method leads to an unstable state and is therefore prohibited.\n", I[14], 133, 12, "HookElement._currentHookElement != null");
        return dart.nullCheck(framework$.HookElement._currentHookElement)[_use](R, hook);
      }
      static shouldPreserveState(hook1, hook2) {
        let p1 = hook1.keys;
        let p2 = hook2.keys;
        if (dart.equals(p1, p2)) {
          return true;
        }
        if (p1 == null || p2 == null || p1[$length] !== p2[$length]) {
          return false;
        }
        let i1 = p1[$iterator];
        let i2 = p2[$iterator];
        while (true) {
          if (!i1.moveNext() || !i2.moveNext()) {
            return true;
          }
          if (!dart.equals(i1.current, i2.current)) {
            return false;
          }
        }
      }
    }
    (Hook.new = function(opts) {
      let keys = opts && 'keys' in opts ? opts.keys : null;
      this[keys$] = keys;
      ;
    }).prototype = Hook.prototype;
    dart.addTypeTests(Hook);
    Hook.prototype[_is_Hook_default] = true;
    dart.addTypeCaches(Hook);
    dart.setStaticMethodSignature(Hook, () => ['use', 'shouldPreserveState']);
    dart.setLibraryUri(Hook, I[1]);
    dart.setFieldSignature(Hook, () => ({
      __proto__: dart.getFields(Hook.__proto__),
      keys: dart.finalFieldType(dart.nullable(core.List$(dart.nullable(core.Object))))
    }));
    return Hook;
  });
  framework$.Hook = framework$.Hook$();
  dart.addTypeTests(framework$.Hook, _is_Hook_default);
  var _debugLastBuiltValue = dart.privateName(framework$, "HookState._debugLastBuiltValue");
  var _hook = dart.privateName(framework$, "HookState._hook");
  var _element = dart.privateName(framework$, "_element");
  var _debugLastBuiltValue$ = dart.privateName(framework$, "_debugLastBuiltValue");
  var _hook$ = dart.privateName(framework$, "_hook");
  var _isOptionalRebuild = dart.privateName(framework$, "_isOptionalRebuild");
  var _shouldRebuildQueue = dart.privateName(framework$, "_shouldRebuildQueue");
  const _is_HookState_default = Symbol('_is_HookState_default');
  framework$.HookState$ = dart.generic((R, T) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
    (Object_Diagnosticable$36.new = function() {
    }).prototype = Object_Diagnosticable$36.prototype;
    dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
    class HookState extends Object_Diagnosticable$36 {
      get [_debugLastBuiltValue$]() {
        return this[_debugLastBuiltValue];
      }
      set [_debugLastBuiltValue$](value) {
        this[_debugLastBuiltValue] = __t$RN().as(value);
      }
      get [_hook$]() {
        return this[_hook];
      }
      set [_hook$](value) {
        this[_hook] = __t$TN().as(value);
      }
      get context() {
        return dart.nullCheck(this[_element]);
      }
      get debugValue() {
        return this[_debugLastBuiltValue$];
      }
      get debugSkipValue() {
        return false;
      }
      get debugLabel() {
        return null;
      }
      get debugHasShortDescription() {
        return true;
      }
      get hook() {
        return dart.nullCheck(this[_hook$]);
      }
      initHook() {
      }
      dispose() {
      }
      didUpdateHook(oldHook) {
        T.as(oldHook);
      }
      deactivate() {
      }
      reassemble() {
      }
      shouldRebuild() {
        return true;
      }
      markMayNeedRebuild() {
        let t1;
        if (dart.nullCheck(this[_element])[_isOptionalRebuild] !== false) {
          t1 = dart.nullCheck(this[_element]);
          (() => {
            t1[_isOptionalRebuild] = true;
            t1[_shouldRebuildQueue].add(new (T$._EntryOfVoidTobool()).new(dart.bind(this, 'shouldRebuild')));
            t1.markNeedsBuild();
            return t1;
          })();
        }
        if (!dart.nullCheck(this[_element]).dirty) dart.assertFailed("Bad state", I[14], 280, 12, "_element!.dirty");
      }
      setState(fn) {
        let t1;
        fn();
        t1 = dart.nullCheck(this[_element]);
        (() => {
          t1[_isOptionalRebuild] = false;
          t1.markNeedsBuild();
          return t1;
        })();
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        let value = this.debugValue;
        if (!dart.equals(value, this)) {
          properties.add(new (T$.DiagnosticsPropertyOfObject()).new(null, value));
        }
        this.hook.debugFillProperties(properties);
      }
    }
    (HookState.new = function() {
      this[_element] = null;
      this[_debugLastBuiltValue] = null;
      this[_hook] = null;
      ;
    }).prototype = HookState.prototype;
    dart.addTypeTests(HookState);
    HookState.prototype[_is_HookState_default] = true;
    dart.addTypeCaches(HookState);
    dart.setMethodSignature(HookState, () => ({
      __proto__: dart.getMethods(HookState.__proto__),
      initHook: dart.fnType(dart.void, []),
      dispose: dart.fnType(dart.void, []),
      didUpdateHook: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      deactivate: dart.fnType(dart.void, []),
      reassemble: dart.fnType(dart.void, []),
      shouldRebuild: dart.fnType(core.bool, []),
      markMayNeedRebuild: dart.fnType(dart.void, []),
      setState: dart.fnType(dart.void, [dart.fnType(dart.void, [])])
    }));
    dart.setGetterSignature(HookState, () => ({
      __proto__: dart.getGetters(HookState.__proto__),
      context: framework.BuildContext,
      debugValue: dart.nullable(core.Object),
      debugSkipValue: core.bool,
      debugLabel: dart.nullable(core.String),
      debugHasShortDescription: core.bool,
      hook: T
    }));
    dart.setLibraryUri(HookState, I[1]);
    dart.setFieldSignature(HookState, () => ({
      __proto__: dart.getFields(HookState.__proto__),
      [_element]: dart.fieldType(dart.nullable(framework$.HookElement)),
      [_debugLastBuiltValue$]: dart.fieldType(dart.nullable(R)),
      [_hook$]: dart.fieldType(dart.nullable(T))
    }));
    return HookState;
  });
  framework$.HookState = framework$.HookState$();
  dart.addTypeTests(framework$.HookState, _is_HookState_default);
  var value$ = dart.privateName(framework$, "_Entry.value");
  const _is__Entry_default = Symbol('_is__Entry_default');
  framework$._Entry$ = dart.generic(T => {
    class _Entry extends collection.LinkedListEntry {
      get value() {
        return this[value$];
      }
      set value(value) {
        this[value$] = T.as(value);
      }
      static ['_#new#tearOff'](T, value) {
        return new (framework$._Entry$(T)).new(value);
      }
    }
    (_Entry.new = function(value) {
      this[value$] = value;
      _Entry.__proto__.new.call(this);
      ;
    }).prototype = _Entry.prototype;
    dart.addTypeTests(_Entry);
    _Entry.prototype[_is__Entry_default] = true;
    dart.addTypeCaches(_Entry);
    dart.setLibraryUri(_Entry, I[1]);
    dart.setFieldSignature(_Entry, () => ({
      __proto__: dart.getFields(_Entry.__proto__),
      value: dart.fieldType(T)
    }));
    return _Entry;
  }, T => {
    dart.setBaseClass(framework$._Entry$(T), collection.LinkedListEntry$(framework$._Entry$(T)));
  });
  framework$._Entry = framework$._Entry$();
  dart.addTypeTests(framework$._Entry, _is__Entry_default);
  var _currentHookState = dart.privateName(framework$, "HookElement._currentHookState");
  var _hooks = dart.privateName(framework$, "HookElement._hooks");
  var _shouldRebuildQueue$ = dart.privateName(framework$, "HookElement._shouldRebuildQueue");
  var _needDispose = dart.privateName(framework$, "HookElement._needDispose");
  var _isOptionalRebuild$ = dart.privateName(framework$, "HookElement._isOptionalRebuild");
  var _buildCache = dart.privateName(framework$, "HookElement._buildCache");
  var _debugIsInitHook = dart.privateName(framework$, "HookElement._debugIsInitHook");
  var _debugDidReassemble = dart.privateName(framework$, "HookElement._debugDidReassemble");
  var _currentHookState$ = dart.privateName(framework$, "_currentHookState");
  var _hooks$ = dart.privateName(framework$, "_hooks");
  var _needDispose$ = dart.privateName(framework$, "_needDispose");
  var _buildCache$ = dart.privateName(framework$, "_buildCache");
  var _debugIsInitHook$ = dart.privateName(framework$, "_debugIsInitHook");
  var _debugDidReassemble$ = dart.privateName(framework$, "_debugDidReassemble");
  framework$.HookElement = class HookElement extends framework.ComponentElement {};
  framework$.HookElement[dart.mixinOn] = ComponentElement => class HookElement extends ComponentElement {
    get [_currentHookState$]() {
      return this[_currentHookState];
    }
    set [_currentHookState$](value) {
      this[_currentHookState] = value;
    }
    get [_hooks$]() {
      return this[_hooks];
    }
    set [_hooks$](value) {
      super[_hooks$] = value;
    }
    get [_shouldRebuildQueue]() {
      return this[_shouldRebuildQueue$];
    }
    set [_shouldRebuildQueue](value) {
      super[_shouldRebuildQueue] = value;
    }
    get [_needDispose$]() {
      return this[_needDispose];
    }
    set [_needDispose$](value) {
      this[_needDispose] = value;
    }
    get [_isOptionalRebuild]() {
      return this[_isOptionalRebuild$];
    }
    set [_isOptionalRebuild](value) {
      this[_isOptionalRebuild$] = value;
    }
    get [_buildCache$]() {
      return this[_buildCache];
    }
    set [_buildCache$](value) {
      this[_buildCache] = value;
    }
    get [_debugIsInitHook$]() {
      return this[_debugIsInitHook];
    }
    set [_debugIsInitHook$](value) {
      this[_debugIsInitHook] = value;
    }
    get [_debugDidReassemble$]() {
      return this[_debugDidReassemble];
    }
    set [_debugDidReassemble$](value) {
      this[_debugDidReassemble] = value;
    }
    get debugHooks() {
      ;
      return (() => {
        let t1 = T$.JSArrayOfHookStateOfObjectN$HookOfObjectN().of([]);
        for (let hook of this[_hooks$])
          t1.push(hook.value);
        return t1;
      })();
    }
    update(newWidget) {
      framework.Widget.as(newWidget);
      this[_isOptionalRebuild] = false;
      super.update(newWidget);
    }
    didChangeDependencies() {
      this[_isOptionalRebuild] = false;
      super.didChangeDependencies();
    }
    reassemble() {
      super.reassemble();
      this[_isOptionalRebuild] = false;
      this[_debugDidReassemble$] = true;
      for (let hook of this[_hooks$]) {
        hook.value.reassemble();
      }
    }
    build() {
      let mustRebuild = this[_isOptionalRebuild] !== true || this[_shouldRebuildQueue][$any](dart.fn(cb => cb.value(), T$._EntryOfVoidToboolTobool()));
      this[_isOptionalRebuild] = null;
      this[_shouldRebuildQueue].clear();
      if (!mustRebuild) {
        return dart.nullCheck(this[_buildCache$]);
      }
      {
        this[_debugIsInitHook$] = false;
      }
      this[_currentHookState$] = this[_hooks$].isEmpty ? null : this[_hooks$].first;
      framework$.HookElement._currentHookElement = this;
      try {
        this[_buildCache$] = super.build();
      } finally {
        this[_isOptionalRebuild] = null;
        framework$['_extension#0|_unmountAllRemainingHooks'](this);
        framework$.HookElement._currentHookElement = null;
        if (this[_needDispose$] != null && dart.nullCheck(this[_needDispose$])[$isNotEmpty]) {
          for (let toDispose = dart.nullCheck(this[_needDispose$]).last; toDispose != null; toDispose = toDispose.previous) {
            toDispose.value.dispose();
          }
          this[_needDispose$] = null;
        }
      }
      return dart.nullCheck(this[_buildCache$]);
    }
    [_use](R, hook) {
      let t2;
      if (this[_currentHookState$] == null) {
        framework$['_extension#0|_appendHook'](R, this, hook);
      } else if (!hook[$runtimeType]._equals(dart.nullCheck(this[_currentHookState$]).value.hook[$runtimeType])) {
        let previousHookType = dart.nullCheck(this[_currentHookState$]).value.hook[$runtimeType];
        framework$['_extension#0|_unmountAllRemainingHooks'](this);
        if (true && this[_debugDidReassemble$]) {
          framework$['_extension#0|_appendHook'](R, this, hook);
        } else {
          dart.throw(new core.StateError.new("Type mismatch between hooks:\n- previous hook: " + dart.str(previousHookType) + "\n- new hook: " + dart.str(hook[$runtimeType]) + "\n"));
        }
      } else if (!hook[$_equals](dart.nullCheck(this[_currentHookState$]).value.hook)) {
        let previousHook = dart.nullCheck(this[_currentHookState$]).value.hook;
        if (framework$.Hook.shouldPreserveState(previousHook, hook)) {
          t2 = dart.nullCheck(this[_currentHookState$]).value;
          (() => {
            t2[_hook$] = hook;
            t2.didUpdateHook(previousHook);
            return t2;
          })();
        } else {
          this[_needDispose$] == null ? this[_needDispose$] = new (T$.LinkedListOf_EntryOfHookStateOfObjectN$HookOfObjectN()).new() : null;
          dart.nullCheck(this[_needDispose$]).add(new (T$._EntryOfHookStateOfObjectN$HookOfObjectN()).new(dart.nullCheck(this[_currentHookState$]).value));
          dart.nullCheck(this[_currentHookState$]).value = framework$['_extension#0|_createHookState'](R, this, hook);
        }
      }
      let result = R.as(dart.nullCheck(this[_currentHookState$]).value.build(this));
      if (!dart.fn(() => {
        dart.nullCheck(this[_currentHookState$]).value[_debugLastBuiltValue$] = result;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed("", I[14], 465, 12, "() {\n      _currentHookState!.value._debugLastBuiltValue = result;\n      return true;\n    }()");
      this[_currentHookState$] = dart.nullCheck(this[_currentHookState$]).next;
      return result;
    }
    dependOnInheritedWidgetOfExactType(T, opts) {
      let aspect = opts && 'aspect' in opts ? opts.aspect : null;
      if (!!this[_debugIsInitHook$]) dart.assertFailed("Cannot listen to inherited widgets inside HookState.initState." + " Use HookState.build instead", I[14], 478, 7, "!_debugIsInitHook");
      return super.dependOnInheritedWidgetOfExactType(T, {aspect: aspect});
    }
    unmount() {
      super.unmount();
      if (this[_hooks$][$isNotEmpty]) {
        for (let hook = this[_hooks$].last; hook != null; hook = hook.previous) {
          try {
            hook.value.dispose();
          } catch (e) {
            let exception = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            if (core.Object.is(exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "hooks library", context: diagnostics.DiagnosticsNode.message("while disposing " + dart.str(dart.runtimeType(hook)))}));
            } else
              throw e;
          }
        }
      }
    }
    deactivate() {
      for (let hook of this[_hooks$]) {
        try {
          hook.value.deactivate();
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "hooks library", context: diagnostics.DiagnosticsNode.message("while deactivating " + dart.str(hook[$runtimeType]))}));
          } else
            throw e;
        }
      }
      super.deactivate();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      for (let hookState of dart.nullCheck(this.debugHooks)) {
        if (hookState.debugHasShortDescription) {
          if (hookState.debugSkipValue) {
            properties.add(new diagnostics.StringProperty.new(dart.nullCheck(hookState.debugLabel), "", {ifEmpty: ""}));
          } else {
            properties.add(new diagnostics.DiagnosticsProperty.new(hookState.debugLabel, hookState.debugValue));
          }
        } else {
          properties.add(new (T$.DiagnosticsPropertyOfHookStateOfObjectN$HookOfObjectN()).new(hookState.debugLabel, hookState));
        }
      }
    }
  };
  (framework$.HookElement[dart.mixinNew] = function() {
    this[_currentHookState] = null;
    this[_hooks] = new (T$.LinkedListOf_EntryOfHookStateOfObjectN$HookOfObjectN()).new();
    this[_shouldRebuildQueue$] = new (T$.LinkedListOf_EntryOfVoidTobool()).new();
    this[_needDispose] = null;
    this[_isOptionalRebuild$] = false;
    this[_buildCache] = null;
    this[_debugIsInitHook] = false;
    this[_debugDidReassemble] = false;
  }).prototype = framework$.HookElement.prototype;
  dart.addTypeTests(framework$.HookElement);
  dart.addTypeCaches(framework$.HookElement);
  framework$.HookElement[dart.implements] = () => [framework.ComponentElement];
  dart.setMethodSignature(framework$.HookElement, () => ({
    __proto__: dart.getMethods(framework$.HookElement.__proto__),
    build: dart.fnType(framework.Widget, []),
    [_use]: dart.gFnType(R => [R, [framework$.Hook$(R)]], R => [dart.nullable(core.Object)]),
    dependOnInheritedWidgetOfExactType: dart.gFnType(T => [dart.nullable(T), [], {aspect: dart.nullable(core.Object)}, {}], T => [framework.InheritedWidget])
  }));
  dart.setGetterSignature(framework$.HookElement, () => ({
    __proto__: dart.getGetters(framework$.HookElement.__proto__),
    debugHooks: dart.nullable(core.List$(framework$.HookState$(dart.nullable(core.Object), framework$.Hook$(dart.nullable(core.Object)))))
  }));
  dart.setLibraryUri(framework$.HookElement, I[1]);
  dart.setFieldSignature(framework$.HookElement, () => ({
    __proto__: dart.getFields(framework$.HookElement.__proto__),
    [_currentHookState$]: dart.fieldType(dart.nullable(framework$._Entry$(framework$.HookState$(dart.nullable(core.Object), framework$.Hook$(dart.nullable(core.Object)))))),
    [_hooks$]: dart.finalFieldType(collection.LinkedList$(framework$._Entry$(framework$.HookState$(dart.nullable(core.Object), framework$.Hook$(dart.nullable(core.Object)))))),
    [_shouldRebuildQueue]: dart.finalFieldType(collection.LinkedList$(framework$._Entry$(dart.fnType(core.bool, [])))),
    [_needDispose$]: dart.fieldType(dart.nullable(collection.LinkedList$(framework$._Entry$(framework$.HookState$(dart.nullable(core.Object), framework$.Hook$(dart.nullable(core.Object))))))),
    [_isOptionalRebuild]: dart.fieldType(dart.nullable(core.bool)),
    [_buildCache$]: dart.fieldType(dart.nullable(framework.Widget)),
    [_debugIsInitHook$]: dart.fieldType(core.bool),
    [_debugDidReassemble$]: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(framework$.HookElement, () => ['_currentHookElement']);
  dart.defineLazy(framework$.HookElement, {
    /*framework$.HookElement._currentHookElement*/get _currentHookElement() {
      return null;
    },
    set _currentHookElement(value) {}
  }, false);
  const StatelessElement_HookElement$36 = class StatelessElement_HookElement extends framework.StatelessElement {};
  (StatelessElement_HookElement$36.new = function(widget) {
    framework$.HookElement[dart.mixinNew].call(this);
    StatelessElement_HookElement$36.__proto__.new.call(this, widget);
  }).prototype = StatelessElement_HookElement$36.prototype;
  dart.applyMixin(StatelessElement_HookElement$36, framework$.HookElement);
  framework$._StatelessHookElement = class _StatelessHookElement extends StatelessElement_HookElement$36 {
    static ['_#new#tearOff'](hooks) {
      return new framework$._StatelessHookElement.new(hooks);
    }
  };
  (framework$._StatelessHookElement.new = function(hooks) {
    framework$._StatelessHookElement.__proto__.new.call(this, hooks);
    ;
  }).prototype = framework$._StatelessHookElement.prototype;
  dart.addTypeTests(framework$._StatelessHookElement);
  dart.addTypeCaches(framework$._StatelessHookElement);
  dart.setLibraryUri(framework$._StatelessHookElement, I[1]);
  framework$.StatefulHookWidget = class StatefulHookWidget extends framework.StatefulWidget {
    createElement() {
      return new framework$._StatefulHookElement.new(this);
    }
  };
  (framework$.StatefulHookWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    framework$.StatefulHookWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = framework$.StatefulHookWidget.prototype;
  dart.addTypeTests(framework$.StatefulHookWidget);
  dart.addTypeCaches(framework$.StatefulHookWidget);
  dart.setMethodSignature(framework$.StatefulHookWidget, () => ({
    __proto__: dart.getMethods(framework$.StatefulHookWidget.__proto__),
    createElement: dart.fnType(framework$._StatefulHookElement, [])
  }));
  dart.setLibraryUri(framework$.StatefulHookWidget, I[1]);
  const StatefulElement_HookElement$36 = class StatefulElement_HookElement extends framework.StatefulElement {};
  (StatefulElement_HookElement$36.new = function(widget) {
    framework$.HookElement[dart.mixinNew].call(this);
    StatefulElement_HookElement$36.__proto__.new.call(this, widget);
  }).prototype = StatefulElement_HookElement$36.prototype;
  dart.applyMixin(StatefulElement_HookElement$36, framework$.HookElement);
  framework$._StatefulHookElement = class _StatefulHookElement extends StatefulElement_HookElement$36 {
    static ['_#new#tearOff'](hooks) {
      return new framework$._StatefulHookElement.new(hooks);
    }
  };
  (framework$._StatefulHookElement.new = function(hooks) {
    framework$._StatefulHookElement.__proto__.new.call(this, hooks);
    ;
  }).prototype = framework$._StatefulHookElement.prototype;
  dart.addTypeTests(framework$._StatefulHookElement);
  dart.addTypeCaches(framework$._StatefulHookElement);
  dart.setLibraryUri(framework$._StatefulHookElement, I[1]);
  var builder$ = dart.privateName(framework$, "HookBuilder.builder");
  framework$.HookBuilder = class HookBuilder extends framework$.HookWidget {
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    static ['_#new#tearOff'](opts) {
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let key = opts && 'key' in opts ? opts.key : null;
      return new framework$.HookBuilder.new({builder: builder, key: key});
    }
    build(context) {
      let t4;
      t4 = context;
      return this.builder(t4);
    }
  };
  (framework$.HookBuilder.new = function(opts) {
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let key = opts && 'key' in opts ? opts.key : null;
    this[builder$] = builder;
    framework$.HookBuilder.__proto__.new.call(this, {key: key});
    ;
  }).prototype = framework$.HookBuilder.prototype;
  dart.addTypeTests(framework$.HookBuilder);
  dart.addTypeCaches(framework$.HookBuilder);
  dart.setMethodSignature(framework$.HookBuilder, () => ({
    __proto__: dart.getMethods(framework$.HookBuilder.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(framework$.HookBuilder, I[1]);
  dart.setFieldSignature(framework$.HookBuilder, () => ({
    __proto__: dart.getFields(framework$.HookBuilder.__proto__),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext]))
  }));
  framework$.use = function use(R, hook) {
    return framework$.Hook.use(R, hook);
  };
  framework$['_extension#0|_createHookState'] = function _extension$350$124_createHookState(R, $this, hook) {
    let t5;
    if (!dart.fn(() => {
      $this[_debugIsInitHook$] = true;
      return true;
    }, T$.VoidTobool())()) dart.assertFailed("", I[14], 310, 12, "() {\n      _debugIsInitHook = true;\n      return true;\n    }()");
    let state = (t5 = hook.createState(), (() => {
      t5[_element] = $this;
      t5[_hook$] = hook;
      t5.initHook();
      return t5;
    })());
    if (!dart.fn(() => {
      $this[_debugIsInitHook$] = false;
      return true;
    }, T$.VoidTobool())()) dart.assertFailed("", I[14], 320, 12, "() {\n      _debugIsInitHook = false;\n      return true;\n    }()");
    return state;
  };
  framework$['_extension#0|get#_createHookState'] = function _extension$350$124get$35_createHookState($this) {
    return dart.fn((R, hook) => framework$['_extension#0|_createHookState'](R, $this, hook), T$.HookOfRToHookStateOfR$HookOfR());
  };
  framework$['_extension#0|_appendHook'] = function _extension$350$124_appendHook(R, $this, hook) {
    let result = framework$['_extension#0|_createHookState'](R, $this, hook);
    $this[_currentHookState$] = new (T$._EntryOfHookStateOfObjectN$HookOfObjectN()).new(result);
    $this[_hooks$].add(dart.nullCheck($this[_currentHookState$]));
  };
  framework$['_extension#0|get#_appendHook'] = function _extension$350$124get$35_appendHook($this) {
    return dart.fn((R, hook) => framework$['_extension#0|_appendHook'](R, $this, hook), T$.HookOfRTovoid());
  };
  framework$['_extension#0|_unmountAllRemainingHooks'] = function _extension$350$124_unmountAllRemainingHooks($this) {
    let t9;
    if ($this[_currentHookState$] != null) {
      t9 = $this;
      t9[_needDispose$] == null ? t9[_needDispose$] = new (T$.LinkedListOf_EntryOfHookStateOfObjectN$HookOfObjectN()).new() : null;
      while ($this[_currentHookState$] != null) {
        let previousHookState = dart.nullCheck($this[_currentHookState$]);
        $this[_currentHookState$] = dart.nullCheck($this[_currentHookState$]).next;
        previousHookState.unlink();
        dart.nullCheck($this[_needDispose$]).add(previousHookState);
      }
    }
  };
  framework$['_extension#0|get#_unmountAllRemainingHooks'] = function _extension$350$124get$35_unmountAllRemainingHooks($this) {
    return dart.fn(() => framework$['_extension#0|_unmountAllRemainingHooks']($this), T$.VoidTovoid());
  };
  framework$.useContext = function useContext() {
    if (!(framework$.HookElement._currentHookElement != null)) dart.assertFailed("`useContext` can only be called from the build method of HookWidget", I[14], 598, 5, "HookElement._currentHookElement != null");
    return dart.nullCheck(framework$.HookElement._currentHookElement);
  };
  dart.defineLazy(framework$, {
    /*framework$.debugHotReloadHooksEnabled*/get debugHotReloadHooksEnabled() {
      return true;
    },
    set debugHotReloadHooksEnabled(value) {}
  }, false);
  var listenable$ = dart.privateName(hooks, "_ListenableHook.listenable");
  hooks._ListenableHook = class _ListenableHook extends framework$.Hook$(dart.void) {
    get listenable() {
      return this[listenable$];
    }
    set listenable(value) {
      super.listenable = value;
    }
    static ['_#new#tearOff'](listenable) {
      return new hooks._ListenableHook.new(listenable);
    }
    createState() {
      return new hooks._ListenableStateHook.new();
    }
  };
  (hooks._ListenableHook.new = function(listenable) {
    this[listenable$] = listenable;
    hooks._ListenableHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._ListenableHook.prototype;
  dart.addTypeTests(hooks._ListenableHook);
  dart.addTypeCaches(hooks._ListenableHook);
  dart.setMethodSignature(hooks._ListenableHook, () => ({
    __proto__: dart.getMethods(hooks._ListenableHook.__proto__),
    createState: dart.fnType(hooks._ListenableStateHook, [])
  }));
  dart.setLibraryUri(hooks._ListenableHook, I[15]);
  dart.setFieldSignature(hooks._ListenableHook, () => ({
    __proto__: dart.getFields(hooks._ListenableHook.__proto__),
    listenable: dart.finalFieldType(dart.nullable(change_notifier.Listenable))
  }));
  const _is__UseAnimationHook_default = Symbol('_is__UseAnimationHook_default');
  hooks._UseAnimationHook$ = dart.generic(T => {
    class _UseAnimationHook extends hooks._ListenableHook {
      static ['_#new#tearOff'](T, animation) {
        return new (hooks._UseAnimationHook$(T)).new(animation);
      }
      createState() {
        return new hooks._UseAnimationStateHook.new();
      }
    }
    (_UseAnimationHook.new = function(animation) {
      _UseAnimationHook.__proto__.new.call(this, animation);
      ;
    }).prototype = _UseAnimationHook.prototype;
    dart.addTypeTests(_UseAnimationHook);
    _UseAnimationHook.prototype[_is__UseAnimationHook_default] = true;
    dart.addTypeCaches(_UseAnimationHook);
    dart.setMethodSignature(_UseAnimationHook, () => ({
      __proto__: dart.getMethods(_UseAnimationHook.__proto__),
      createState: dart.fnType(hooks._UseAnimationStateHook, [])
    }));
    dart.setLibraryUri(_UseAnimationHook, I[15]);
    return _UseAnimationHook;
  });
  hooks._UseAnimationHook = hooks._UseAnimationHook$();
  dart.addTypeTests(hooks._UseAnimationHook, _is__UseAnimationHook_default);
  var _listener = dart.privateName(hooks, "_listener");
  hooks._ListenableStateHook = class _ListenableStateHook extends framework$.HookState$(dart.void, hooks._ListenableHook) {
    initHook() {
      let t10;
      super.initHook();
      t10 = this.hook.listenable;
      t10 == null ? null : t10.addListener(dart.bind(this, _listener));
    }
    didUpdateHook(oldHook) {
      let t10, t10$;
      hooks._ListenableHook.as(oldHook);
      super.didUpdateHook(oldHook);
      if (!dart.equals(this.hook.listenable, oldHook.listenable)) {
        t10 = oldHook.listenable;
        t10 == null ? null : t10.removeListener(dart.bind(this, _listener));
        t10$ = this.hook.listenable;
        t10$ == null ? null : t10$.addListener(dart.bind(this, _listener));
      }
    }
    build(context) {
    }
    [_listener]() {
      this.setState(dart.fn(() => {
      }, T$.VoidTovoid()));
    }
    dispose() {
      let t10;
      t10 = this.hook.listenable;
      t10 == null ? null : t10.removeListener(dart.bind(this, _listener));
    }
    get debugLabel() {
      return "useListenable";
    }
    get debugValue() {
      return this.hook.listenable;
    }
    static ['_#new#tearOff']() {
      return new hooks._ListenableStateHook.new();
    }
  };
  (hooks._ListenableStateHook.new = function() {
    hooks._ListenableStateHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._ListenableStateHook.prototype;
  dart.addTypeTests(hooks._ListenableStateHook);
  dart.addTypeCaches(hooks._ListenableStateHook);
  dart.setMethodSignature(hooks._ListenableStateHook, () => ({
    __proto__: dart.getMethods(hooks._ListenableStateHook.__proto__),
    build: dart.fnType(dart.void, [framework.BuildContext]),
    [_listener]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(hooks._ListenableStateHook, () => ({
    __proto__: dart.getGetters(hooks._ListenableStateHook.__proto__),
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._ListenableStateHook, I[15]);
  hooks._UseAnimationStateHook = class _UseAnimationStateHook extends hooks._ListenableStateHook {
    get debugLabel() {
      return "useAnimation";
    }
    get debugValue() {
      let t10;
      t10 = T$.AnimationN().as(this.hook.listenable);
      return t10 == null ? null : t10.value;
    }
    static ['_#new#tearOff']() {
      return new hooks._UseAnimationStateHook.new();
    }
  };
  (hooks._UseAnimationStateHook.new = function() {
    hooks._UseAnimationStateHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._UseAnimationStateHook.prototype;
  dart.addTypeTests(hooks._UseAnimationStateHook);
  dart.addTypeCaches(hooks._UseAnimationStateHook);
  dart.setLibraryUri(hooks._UseAnimationStateHook, I[15]);
  var duration$ = dart.privateName(hooks, "_AnimationControllerHook.duration");
  var reverseDuration$ = dart.privateName(hooks, "_AnimationControllerHook.reverseDuration");
  var debugLabel$ = dart.privateName(hooks, "_AnimationControllerHook.debugLabel");
  var initialValue$ = dart.privateName(hooks, "_AnimationControllerHook.initialValue");
  var lowerBound$ = dart.privateName(hooks, "_AnimationControllerHook.lowerBound");
  var upperBound$ = dart.privateName(hooks, "_AnimationControllerHook.upperBound");
  var vsync$ = dart.privateName(hooks, "_AnimationControllerHook.vsync");
  var animationBehavior$ = dart.privateName(hooks, "_AnimationControllerHook.animationBehavior");
  hooks._AnimationControllerHook = class _AnimationControllerHook extends framework$.Hook$(animation_controller.AnimationController) {
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get reverseDuration() {
      return this[reverseDuration$];
    }
    set reverseDuration(value) {
      super.reverseDuration = value;
    }
    get debugLabel() {
      return this[debugLabel$];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get initialValue() {
      return this[initialValue$];
    }
    set initialValue(value) {
      super.initialValue = value;
    }
    get lowerBound() {
      return this[lowerBound$];
    }
    set lowerBound(value) {
      super.lowerBound = value;
    }
    get upperBound() {
      return this[upperBound$];
    }
    set upperBound(value) {
      super.upperBound = value;
    }
    get vsync() {
      return this[vsync$];
    }
    set vsync(value) {
      super.vsync = value;
    }
    get animationBehavior() {
      return this[animationBehavior$];
    }
    set animationBehavior(value) {
      super.animationBehavior = value;
    }
    static ['_#new#tearOff'](opts) {
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let reverseDuration = opts && 'reverseDuration' in opts ? opts.reverseDuration : null;
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
      let lowerBound = opts && 'lowerBound' in opts ? opts.lowerBound : null;
      let upperBound = opts && 'upperBound' in opts ? opts.upperBound : null;
      let vsync = opts && 'vsync' in opts ? opts.vsync : null;
      let animationBehavior = opts && 'animationBehavior' in opts ? opts.animationBehavior : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return new hooks._AnimationControllerHook.new({duration: duration, reverseDuration: reverseDuration, debugLabel: debugLabel, initialValue: initialValue, lowerBound: lowerBound, upperBound: upperBound, vsync: vsync, animationBehavior: animationBehavior, keys: keys});
    }
    createState() {
      return new hooks._AnimationControllerHookState.new();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfDuration()).new("duration", this.duration));
      properties.add(new (T$.DiagnosticsPropertyOfDuration()).new("reverseDuration", this.reverseDuration));
    }
  };
  (hooks._AnimationControllerHook.new = function(opts) {
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let reverseDuration = opts && 'reverseDuration' in opts ? opts.reverseDuration : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
    let lowerBound = opts && 'lowerBound' in opts ? opts.lowerBound : null;
    let upperBound = opts && 'upperBound' in opts ? opts.upperBound : null;
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    let animationBehavior = opts && 'animationBehavior' in opts ? opts.animationBehavior : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    this[duration$] = duration;
    this[reverseDuration$] = reverseDuration;
    this[debugLabel$] = debugLabel;
    this[initialValue$] = initialValue;
    this[lowerBound$] = lowerBound;
    this[upperBound$] = upperBound;
    this[vsync$] = vsync;
    this[animationBehavior$] = animationBehavior;
    hooks._AnimationControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._AnimationControllerHook.prototype;
  dart.addTypeTests(hooks._AnimationControllerHook);
  dart.addTypeCaches(hooks._AnimationControllerHook);
  dart.setMethodSignature(hooks._AnimationControllerHook, () => ({
    __proto__: dart.getMethods(hooks._AnimationControllerHook.__proto__),
    createState: dart.fnType(hooks._AnimationControllerHookState, [])
  }));
  dart.setLibraryUri(hooks._AnimationControllerHook, I[15]);
  dart.setFieldSignature(hooks._AnimationControllerHook, () => ({
    __proto__: dart.getFields(hooks._AnimationControllerHook.__proto__),
    duration: dart.finalFieldType(dart.nullable(core.Duration)),
    reverseDuration: dart.finalFieldType(dart.nullable(core.Duration)),
    debugLabel: dart.finalFieldType(dart.nullable(core.String)),
    initialValue: dart.finalFieldType(core.double),
    lowerBound: dart.finalFieldType(core.double),
    upperBound: dart.finalFieldType(core.double),
    vsync: dart.finalFieldType(ticker.TickerProvider),
    animationBehavior: dart.finalFieldType(animation_controller.AnimationBehavior)
  }));
  var ___AnimationControllerHookState__animationController = dart.privateName(hooks, "_#_AnimationControllerHookState#_animationController");
  var _animationController = dart.privateName(hooks, "_animationController");
  hooks._AnimationControllerHookState = class _AnimationControllerHookState extends framework$.HookState$(animation_controller.AnimationController, hooks._AnimationControllerHook) {
    get [_animationController]() {
      let t11, t10;
      t10 = this[___AnimationControllerHookState__animationController];
      return t10 == null ? (t11 = new animation_controller.AnimationController.new({vsync: this.hook.vsync, duration: this.hook.duration, reverseDuration: this.hook.reverseDuration, debugLabel: this.hook.debugLabel, lowerBound: this.hook.lowerBound, upperBound: this.hook.upperBound, animationBehavior: this.hook.animationBehavior, value: this.hook.initialValue}), this[___AnimationControllerHookState__animationController] == null ? this[___AnimationControllerHookState__animationController] = t11 : dart.throw(new _internal.LateError.fieldADI("_animationController"))) : t10;
    }
    didUpdateHook(oldHook) {
      hooks._AnimationControllerHook.as(oldHook);
      super.didUpdateHook(oldHook);
      if (!this.hook.vsync[$_equals](oldHook.vsync)) {
        this[_animationController].resync(this.hook.vsync);
      }
      if (!dart.equals(this.hook.duration, oldHook.duration)) {
        this[_animationController].duration = this.hook.duration;
      }
      if (!dart.equals(this.hook.reverseDuration, oldHook.reverseDuration)) {
        this[_animationController].reverseDuration = this.hook.reverseDuration;
      }
    }
    build(context) {
      return this[_animationController];
    }
    dispose() {
      this[_animationController].dispose();
    }
    get debugHasShortDescription() {
      return false;
    }
    get debugLabel() {
      return "useAnimationController";
    }
    static ['_#new#tearOff']() {
      return new hooks._AnimationControllerHookState.new();
    }
  };
  (hooks._AnimationControllerHookState.new = function() {
    this[___AnimationControllerHookState__animationController] = null;
    hooks._AnimationControllerHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._AnimationControllerHookState.prototype;
  dart.addTypeTests(hooks._AnimationControllerHookState);
  dart.addTypeCaches(hooks._AnimationControllerHookState);
  dart.setMethodSignature(hooks._AnimationControllerHookState, () => ({
    __proto__: dart.getMethods(hooks._AnimationControllerHookState.__proto__),
    build: dart.fnType(animation_controller.AnimationController, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._AnimationControllerHookState, () => ({
    __proto__: dart.getGetters(hooks._AnimationControllerHookState.__proto__),
    [_animationController]: animation_controller.AnimationController,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._AnimationControllerHookState, I[15]);
  dart.setFieldSignature(hooks._AnimationControllerHookState, () => ({
    __proto__: dart.getFields(hooks._AnimationControllerHookState.__proto__),
    [___AnimationControllerHookState__animationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController))
  }));
  hooks._SingleTickerProviderHook = class _SingleTickerProviderHook extends framework$.Hook$(ticker.TickerProvider) {
    static ['_#new#tearOff'](keys = null) {
      return new hooks._SingleTickerProviderHook.new(keys);
    }
    createState() {
      return new hooks._TickerProviderHookState.new();
    }
  };
  (hooks._SingleTickerProviderHook.new = function(keys = null) {
    hooks._SingleTickerProviderHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._SingleTickerProviderHook.prototype;
  dart.addTypeTests(hooks._SingleTickerProviderHook);
  dart.addTypeCaches(hooks._SingleTickerProviderHook);
  dart.setMethodSignature(hooks._SingleTickerProviderHook, () => ({
    __proto__: dart.getMethods(hooks._SingleTickerProviderHook.__proto__),
    createState: dart.fnType(hooks._TickerProviderHookState, [])
  }));
  dart.setLibraryUri(hooks._SingleTickerProviderHook, I[15]);
  var _ticker = dart.privateName(hooks, "_ticker");
  hooks._TickerProviderHookState = class _TickerProviderHookState extends framework$.HookState$(ticker.TickerProvider, hooks._SingleTickerProviderHook) {
    createTicker(onTick) {
      if (!dart.fn(() => {
        if (this[_ticker] == null) {
          return true;
        }
        dart.throw(assertions.FlutterError.new(dart.str(this.context.widget[$runtimeType]) + " attempted to use a useSingleTickerProvider multiple times.\n" + "A SingleTickerProviderStateMixin can only be used as a TickerProvider once. " + "If you need multiple Ticker, consider using useSingleTickerProvider multiple times " + "to create as many Tickers as needed."));
      }, T$.VoidTobool())()) dart.assertFailed("", I[16], 177, 12, "() {\n      if (_ticker == null) {\n        return true;\n      }\n      throw FlutterError(\n          '${context.widget.runtimeType} attempted to use a useSingleTickerProvider multiple times.\\n'\n          'A SingleTickerProviderStateMixin can only be used as a TickerProvider once. '\n          'If you need multiple Ticker, consider using useSingleTickerProvider multiple times '\n          'to create as many Tickers as needed.');\n    }()");
      return this[_ticker] = new ticker.Ticker.new(onTick, {debugLabel: "created by " + dart.str(this.context)});
    }
    dispose() {
      if (!dart.fn(() => {
        if (this[_ticker] == null || !dart.nullCheck(this[_ticker]).isActive) {
          return true;
        }
        dart.throw(assertions.FlutterError.new("useSingleTickerProvider created a Ticker, but at the time " + "dispose() was called on the Hook, that Ticker was still active. Tickers used " + " by AnimationControllers should be disposed by calling dispose() on " + " the AnimationController itself. Otherwise, the ticker will leak.\n"));
      }, T$.VoidTobool())()) dart.assertFailed("", I[16], 192, 12, "() {\n      if (_ticker == null || !_ticker!.isActive) {\n        return true;\n      }\n      throw FlutterError(\n          'useSingleTickerProvider created a Ticker, but at the time '\n          'dispose() was called on the Hook, that Ticker was still active. Tickers used '\n          ' by AnimationControllers should be disposed by calling dispose() on '\n          ' the AnimationController itself. Otherwise, the ticker will leak.\\n');\n    }()");
    }
    build(context) {
      if (this[_ticker] != null) {
        dart.nullCheck(this[_ticker]).muted = !ticker_provider.TickerMode.of(context);
      }
      return this;
    }
    get debugLabel() {
      return "useSingleTickerProvider";
    }
    get debugSkipValue() {
      return true;
    }
    static ['_#new#tearOff']() {
      return new hooks._TickerProviderHookState.new();
    }
  };
  (hooks._TickerProviderHookState.new = function() {
    this[_ticker] = null;
    hooks._TickerProviderHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._TickerProviderHookState.prototype;
  dart.addTypeTests(hooks._TickerProviderHookState);
  dart.addTypeCaches(hooks._TickerProviderHookState);
  hooks._TickerProviderHookState[dart.implements] = () => [ticker.TickerProvider];
  dart.setMethodSignature(hooks._TickerProviderHookState, () => ({
    __proto__: dart.getMethods(hooks._TickerProviderHookState.__proto__),
    createTicker: dart.fnType(ticker.Ticker, [dart.fnType(dart.void, [core.Duration])]),
    build: dart.fnType(ticker.TickerProvider, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._TickerProviderHookState, () => ({
    __proto__: dart.getGetters(hooks._TickerProviderHookState.__proto__),
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._TickerProviderHookState, I[15]);
  dart.setFieldSignature(hooks._TickerProviderHookState, () => ({
    __proto__: dart.getFields(hooks._TickerProviderHookState.__proto__),
    [_ticker]: dart.fieldType(dart.nullable(ticker.Ticker))
  }));
  var future$ = dart.privateName(hooks, "_FutureHook.future");
  var preserveState$ = dart.privateName(hooks, "_FutureHook.preserveState");
  var initialData$ = dart.privateName(hooks, "_FutureHook.initialData");
  const _is__FutureHook_default = Symbol('_is__FutureHook_default');
  hooks._FutureHook$ = dart.generic(T => {
    var __t$_FutureStateHookOfT = () => (__t$_FutureStateHookOfT = dart.constFn(hooks._FutureStateHook$(T)))();
    class _FutureHook extends framework$.Hook$(async$.AsyncSnapshot$(T)) {
      get future() {
        return this[future$];
      }
      set future(value) {
        super.future = value;
      }
      get preserveState() {
        return this[preserveState$];
      }
      set preserveState(value) {
        super.preserveState = value;
      }
      get initialData() {
        return this[initialData$];
      }
      set initialData(value) {
        super.initialData = value;
      }
      static ['_#new#tearOff'](T, future, opts) {
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        let preserveState = opts && 'preserveState' in opts ? opts.preserveState : true;
        return new (hooks._FutureHook$(T)).new(future, {initialData: initialData, preserveState: preserveState});
      }
      createState() {
        return new (__t$_FutureStateHookOfT()).new();
      }
    }
    (_FutureHook.new = function(future, opts) {
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      let preserveState = opts && 'preserveState' in opts ? opts.preserveState : true;
      this[future$] = future;
      this[initialData$] = initialData;
      this[preserveState$] = preserveState;
      _FutureHook.__proto__.new.call(this);
      ;
    }).prototype = _FutureHook.prototype;
    dart.addTypeTests(_FutureHook);
    _FutureHook.prototype[_is__FutureHook_default] = true;
    dart.addTypeCaches(_FutureHook);
    dart.setMethodSignature(_FutureHook, () => ({
      __proto__: dart.getMethods(_FutureHook.__proto__),
      createState: dart.fnType(hooks._FutureStateHook$(T), [])
    }));
    dart.setLibraryUri(_FutureHook, I[15]);
    dart.setFieldSignature(_FutureHook, () => ({
      __proto__: dart.getFields(_FutureHook.__proto__),
      future: dart.finalFieldType(dart.nullable(async.Future$(T))),
      preserveState: dart.finalFieldType(core.bool),
      initialData: dart.finalFieldType(dart.nullable(T))
    }));
    return _FutureHook;
  });
  hooks._FutureHook = hooks._FutureHook$();
  dart.addTypeTests(hooks._FutureHook, _is__FutureHook_default);
  var _activeCallbackIdentity = dart.privateName(hooks, "_activeCallbackIdentity");
  var ___FutureStateHook__snapshot = dart.privateName(hooks, "_#_FutureStateHook#_snapshot");
  var _snapshot = dart.privateName(hooks, "_snapshot");
  var _subscribe = dart.privateName(hooks, "_subscribe");
  var _unsubscribe = dart.privateName(hooks, "_unsubscribe");
  const _is__FutureStateHook_default = Symbol('_is__FutureStateHook_default');
  hooks._FutureStateHook$ = dart.generic(T => {
    var __t$AsyncSnapshotOfT = () => (__t$AsyncSnapshotOfT = dart.constFn(async$.AsyncSnapshot$(T)))();
    var __t$_FutureHookOfT = () => (__t$_FutureHookOfT = dart.constFn(hooks._FutureHook$(T)))();
    var __t$TToNull = () => (__t$TToNull = dart.constFn(dart.fnType(core.Null, [T])))();
    class _FutureStateHook extends framework$.HookState$(async$.AsyncSnapshot$(T), hooks._FutureHook$(T)) {
      get [_snapshot]() {
        let t10;
        t10 = this[___FutureStateHook__snapshot];
        return t10 == null ? this[___FutureStateHook__snapshot] = this.initial : t10;
      }
      set [_snapshot](_snapshot$35param) {
        this[___FutureStateHook__snapshot] = _snapshot$35param;
      }
      get initial() {
        return this.hook.initialData == null ? new (__t$AsyncSnapshotOfT()).nothing() : new (__t$AsyncSnapshotOfT()).withData(async$.ConnectionState.none, T.as(this.hook.initialData));
      }
      initHook() {
        super.initHook();
        this[_subscribe]();
      }
      didUpdateHook(oldHook) {
        __t$_FutureHookOfT().as(oldHook);
        super.didUpdateHook(oldHook);
        if (!dart.equals(oldHook.future, this.hook.future)) {
          if (this[_activeCallbackIdentity] != null) {
            this[_unsubscribe]();
            if (this.hook.preserveState) {
              this[_snapshot] = this[_snapshot].inState(async$.ConnectionState.none);
            } else {
              this[_snapshot] = this.initial;
            }
          }
          this[_subscribe]();
        }
      }
      dispose() {
        this[_unsubscribe]();
      }
      [_subscribe]() {
        if (this.hook.future != null) {
          let callbackIdentity = new core.Object.new();
          this[_activeCallbackIdentity] = callbackIdentity;
          dart.nullCheck(this.hook.future).then(dart.void, dart.fn(data => {
            if (dart.equals(this[_activeCallbackIdentity], callbackIdentity)) {
              this.setState(dart.fn(() => {
                this[_snapshot] = new (__t$AsyncSnapshotOfT()).withData(async$.ConnectionState.done, data);
              }, T$.VoidTovoid()));
            }
          }, __t$TToNull()), {onError: dart.fn((error, stackTrace) => {
              if (dart.equals(this[_activeCallbackIdentity], callbackIdentity)) {
                this.setState(dart.fn(() => {
                  this[_snapshot] = new (__t$AsyncSnapshotOfT()).withError(async$.ConnectionState.done, error, stackTrace);
                }, T$.VoidTovoid()));
              }
            }, T$.ObjectAndStackTraceToNull())});
          this[_snapshot] = this[_snapshot].inState(async$.ConnectionState.waiting);
        }
      }
      [_unsubscribe]() {
        this[_activeCallbackIdentity] = null;
      }
      build(context) {
        return this[_snapshot];
      }
      get debugLabel() {
        return "useFuture";
      }
      get debugValue() {
        return this[_snapshot];
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._FutureStateHook$(T)).new();
      }
    }
    (_FutureStateHook.new = function() {
      this[_activeCallbackIdentity] = null;
      this[___FutureStateHook__snapshot] = null;
      _FutureStateHook.__proto__.new.call(this);
      ;
    }).prototype = _FutureStateHook.prototype;
    dart.addTypeTests(_FutureStateHook);
    _FutureStateHook.prototype[_is__FutureStateHook_default] = true;
    dart.addTypeCaches(_FutureStateHook);
    dart.setMethodSignature(_FutureStateHook, () => ({
      __proto__: dart.getMethods(_FutureStateHook.__proto__),
      [_subscribe]: dart.fnType(dart.void, []),
      [_unsubscribe]: dart.fnType(dart.void, []),
      build: dart.fnType(async$.AsyncSnapshot$(T), [framework.BuildContext])
    }));
    dart.setGetterSignature(_FutureStateHook, () => ({
      __proto__: dart.getGetters(_FutureStateHook.__proto__),
      [_snapshot]: async$.AsyncSnapshot$(T),
      initial: async$.AsyncSnapshot$(T),
      debugLabel: core.String
    }));
    dart.setSetterSignature(_FutureStateHook, () => ({
      __proto__: dart.getSetters(_FutureStateHook.__proto__),
      [_snapshot]: async$.AsyncSnapshot$(T)
    }));
    dart.setLibraryUri(_FutureStateHook, I[15]);
    dart.setFieldSignature(_FutureStateHook, () => ({
      __proto__: dart.getFields(_FutureStateHook.__proto__),
      [_activeCallbackIdentity]: dart.fieldType(dart.nullable(core.Object)),
      [___FutureStateHook__snapshot]: dart.fieldType(dart.nullable(async$.AsyncSnapshot$(T)))
    }));
    return _FutureStateHook;
  });
  hooks._FutureStateHook = hooks._FutureStateHook$();
  dart.addTypeTests(hooks._FutureStateHook, _is__FutureStateHook_default);
  var stream$0 = dart.privateName(hooks, "_StreamHook.stream");
  var initialData$0 = dart.privateName(hooks, "_StreamHook.initialData");
  var preserveState$0 = dart.privateName(hooks, "_StreamHook.preserveState");
  const _is__StreamHook_default = Symbol('_is__StreamHook_default');
  hooks._StreamHook$ = dart.generic(T => {
    var __t$_StreamHookStateOfT = () => (__t$_StreamHookStateOfT = dart.constFn(hooks._StreamHookState$(T)))();
    class _StreamHook extends framework$.Hook$(async$.AsyncSnapshot$(T)) {
      get stream() {
        return this[stream$0];
      }
      set stream(value) {
        super.stream = value;
      }
      get initialData() {
        return this[initialData$0];
      }
      set initialData(value) {
        super.initialData = value;
      }
      get preserveState() {
        return this[preserveState$0];
      }
      set preserveState(value) {
        super.preserveState = value;
      }
      static ['_#new#tearOff'](T, stream, opts) {
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        let preserveState = opts && 'preserveState' in opts ? opts.preserveState : null;
        return new (hooks._StreamHook$(T)).new(stream, {initialData: initialData, preserveState: preserveState});
      }
      createState() {
        return new (__t$_StreamHookStateOfT()).new();
      }
    }
    (_StreamHook.new = function(stream, opts) {
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      let preserveState = opts && 'preserveState' in opts ? opts.preserveState : null;
      this[stream$0] = stream;
      this[initialData$0] = initialData;
      this[preserveState$0] = preserveState;
      _StreamHook.__proto__.new.call(this);
      ;
    }).prototype = _StreamHook.prototype;
    dart.addTypeTests(_StreamHook);
    _StreamHook.prototype[_is__StreamHook_default] = true;
    dart.addTypeCaches(_StreamHook);
    dart.setMethodSignature(_StreamHook, () => ({
      __proto__: dart.getMethods(_StreamHook.__proto__),
      createState: dart.fnType(hooks._StreamHookState$(T), [])
    }));
    dart.setLibraryUri(_StreamHook, I[15]);
    dart.setFieldSignature(_StreamHook, () => ({
      __proto__: dart.getFields(_StreamHook.__proto__),
      stream: dart.finalFieldType(dart.nullable(async.Stream$(T))),
      initialData: dart.finalFieldType(dart.nullable(T)),
      preserveState: dart.finalFieldType(core.bool)
    }));
    return _StreamHook;
  });
  hooks._StreamHook = hooks._StreamHook$();
  dart.addTypeTests(hooks._StreamHook, _is__StreamHook_default);
  var _subscription = dart.privateName(hooks, "_subscription");
  var ___StreamHookState__summary = dart.privateName(hooks, "_#_StreamHookState#_summary");
  var _summary = dart.privateName(hooks, "_summary");
  const _is__StreamHookState_default = Symbol('_is__StreamHookState_default');
  hooks._StreamHookState$ = dart.generic(T => {
    var __t$_StreamHookOfT = () => (__t$_StreamHookOfT = dart.constFn(hooks._StreamHook$(T)))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var __t$AsyncSnapshotOfT = () => (__t$AsyncSnapshotOfT = dart.constFn(async$.AsyncSnapshot$(T)))();
    class _StreamHookState extends framework$.HookState$(async$.AsyncSnapshot$(T), hooks._StreamHook$(T)) {
      get [_summary]() {
        let t10;
        t10 = this[___StreamHookState__summary];
        return t10 == null ? this[___StreamHookState__summary] = this.initial : t10;
      }
      set [_summary](_summary$35param) {
        this[___StreamHookState__summary] = _summary$35param;
      }
      initHook() {
        super.initHook();
        this[_subscribe]();
      }
      didUpdateHook(oldWidget) {
        __t$_StreamHookOfT().as(oldWidget);
        super.didUpdateHook(oldWidget);
        if (!dart.equals(oldWidget.stream, this.hook.stream)) {
          if (this[_subscription] != null) {
            this[_unsubscribe]();
            if (this.hook.preserveState) {
              this[_summary] = this.afterDisconnected(this[_summary]);
            } else {
              this[_summary] = this.initial;
            }
          }
          this[_subscribe]();
        }
      }
      dispose() {
        this[_unsubscribe]();
      }
      [_subscribe]() {
        if (this.hook.stream != null) {
          this[_subscription] = dart.nullCheck(this.hook.stream).listen(dart.fn(data => {
            this.setState(dart.fn(() => {
              this[_summary] = this.afterData(data);
            }, T$.VoidTovoid()));
          }, __t$TTovoid()), {onError: dart.fn((error, stackTrace) => {
              this.setState(dart.fn(() => {
                this[_summary] = this.afterError(error, stackTrace);
              }, T$.VoidTovoid()));
            }, T$.ObjectAndStackTraceToNull()), onDone: dart.fn(() => {
              this.setState(dart.fn(() => {
                this[_summary] = this.afterDone(this[_summary]);
              }, T$.VoidTovoid()));
            }, T$.VoidTovoid())});
          this[_summary] = this.afterConnected(this[_summary]);
        }
      }
      [_unsubscribe]() {
        let t10;
        t10 = this[_subscription];
        t10 == null ? null : t10.cancel();
        this[_subscription] = null;
      }
      build(context) {
        return this[_summary];
      }
      get initial() {
        return this.hook.initialData == null ? new (__t$AsyncSnapshotOfT()).nothing() : new (__t$AsyncSnapshotOfT()).withData(async$.ConnectionState.none, T.as(this.hook.initialData));
      }
      afterConnected(current) {
        __t$AsyncSnapshotOfT().as(current);
        return current.inState(async$.ConnectionState.waiting);
      }
      afterData(data) {
        T.as(data);
        return new (__t$AsyncSnapshotOfT()).withData(async$.ConnectionState.active, data);
      }
      afterError(error, stackTrace) {
        return new (__t$AsyncSnapshotOfT()).withError(async$.ConnectionState.active, error, stackTrace);
      }
      afterDone(current) {
        __t$AsyncSnapshotOfT().as(current);
        return current.inState(async$.ConnectionState.done);
      }
      afterDisconnected(current) {
        __t$AsyncSnapshotOfT().as(current);
        return current.inState(async$.ConnectionState.none);
      }
      get debugLabel() {
        return "useStream";
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._StreamHookState$(T)).new();
      }
    }
    (_StreamHookState.new = function() {
      this[_subscription] = null;
      this[___StreamHookState__summary] = null;
      _StreamHookState.__proto__.new.call(this);
      ;
    }).prototype = _StreamHookState.prototype;
    dart.addTypeTests(_StreamHookState);
    _StreamHookState.prototype[_is__StreamHookState_default] = true;
    dart.addTypeCaches(_StreamHookState);
    dart.setMethodSignature(_StreamHookState, () => ({
      __proto__: dart.getMethods(_StreamHookState.__proto__),
      [_subscribe]: dart.fnType(dart.void, []),
      [_unsubscribe]: dart.fnType(dart.void, []),
      build: dart.fnType(async$.AsyncSnapshot$(T), [framework.BuildContext]),
      afterConnected: dart.fnType(async$.AsyncSnapshot$(T), [dart.nullable(core.Object)]),
      afterData: dart.fnType(async$.AsyncSnapshot$(T), [dart.nullable(core.Object)]),
      afterError: dart.fnType(async$.AsyncSnapshot$(T), [core.Object, core.StackTrace]),
      afterDone: dart.fnType(async$.AsyncSnapshot$(T), [dart.nullable(core.Object)]),
      afterDisconnected: dart.fnType(async$.AsyncSnapshot$(T), [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_StreamHookState, () => ({
      __proto__: dart.getGetters(_StreamHookState.__proto__),
      [_summary]: async$.AsyncSnapshot$(T),
      initial: async$.AsyncSnapshot$(T),
      debugLabel: core.String
    }));
    dart.setSetterSignature(_StreamHookState, () => ({
      __proto__: dart.getSetters(_StreamHookState.__proto__),
      [_summary]: async$.AsyncSnapshot$(T)
    }));
    dart.setLibraryUri(_StreamHookState, I[15]);
    dart.setFieldSignature(_StreamHookState, () => ({
      __proto__: dart.getFields(_StreamHookState.__proto__),
      [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [___StreamHookState__summary]: dart.fieldType(dart.nullable(async$.AsyncSnapshot$(T)))
    }));
    return _StreamHookState;
  });
  hooks._StreamHookState = hooks._StreamHookState$();
  dart.addTypeTests(hooks._StreamHookState, _is__StreamHookState_default);
  var sync$ = dart.privateName(hooks, "_StreamControllerHook.sync");
  var onListen$ = dart.privateName(hooks, "_StreamControllerHook.onListen");
  var onCancel$ = dart.privateName(hooks, "_StreamControllerHook.onCancel");
  const _is__StreamControllerHook_default = Symbol('_is__StreamControllerHook_default');
  hooks._StreamControllerHook$ = dart.generic(T => {
    var __t$_StreamControllerHookStateOfT = () => (__t$_StreamControllerHookStateOfT = dart.constFn(hooks._StreamControllerHookState$(T)))();
    class _StreamControllerHook extends framework$.Hook$(async.StreamController$(T)) {
      get sync() {
        return this[sync$];
      }
      set sync(value) {
        super.sync = value;
      }
      get onListen() {
        return this[onListen$];
      }
      set onListen(value) {
        super.onListen = value;
      }
      get onCancel() {
        return this[onCancel$];
      }
      set onCancel(value) {
        super.onCancel = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let sync = opts && 'sync' in opts ? opts.sync : null;
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let keys = opts && 'keys' in opts ? opts.keys : null;
        return new (hooks._StreamControllerHook$(T)).new({sync: sync, onListen: onListen, onCancel: onCancel, keys: keys});
      }
      createState() {
        return new (__t$_StreamControllerHookStateOfT()).new();
      }
    }
    (_StreamControllerHook.new = function(opts) {
      let sync = opts && 'sync' in opts ? opts.sync : null;
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      this[sync$] = sync;
      this[onListen$] = onListen;
      this[onCancel$] = onCancel;
      _StreamControllerHook.__proto__.new.call(this, {keys: keys});
      ;
    }).prototype = _StreamControllerHook.prototype;
    dart.addTypeTests(_StreamControllerHook);
    _StreamControllerHook.prototype[_is__StreamControllerHook_default] = true;
    dart.addTypeCaches(_StreamControllerHook);
    dart.setMethodSignature(_StreamControllerHook, () => ({
      __proto__: dart.getMethods(_StreamControllerHook.__proto__),
      createState: dart.fnType(hooks._StreamControllerHookState$(T), [])
    }));
    dart.setLibraryUri(_StreamControllerHook, I[15]);
    dart.setFieldSignature(_StreamControllerHook, () => ({
      __proto__: dart.getFields(_StreamControllerHook.__proto__),
      sync: dart.finalFieldType(core.bool),
      onListen: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
    }));
    return _StreamControllerHook;
  });
  hooks._StreamControllerHook = hooks._StreamControllerHook$();
  dart.addTypeTests(hooks._StreamControllerHook, _is__StreamControllerHook_default);
  var ___StreamControllerHookState__controller = dart.privateName(hooks, "_#_StreamControllerHookState#_controller");
  var ___StreamControllerHookState__controller_isSet = dart.privateName(hooks, "_#_StreamControllerHookState#_controller#isSet");
  var _controller$ = dart.privateName(hooks, "_controller");
  const _is__StreamControllerHookState_default = Symbol('_is__StreamControllerHookState_default');
  hooks._StreamControllerHookState$ = dart.generic(T => {
    var __t$StreamControllerOfT = () => (__t$StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    var __t$_StreamControllerHookOfT = () => (__t$_StreamControllerHookOfT = dart.constFn(hooks._StreamControllerHook$(T)))();
    class _StreamControllerHookState extends framework$.HookState$(async.StreamController$(T), hooks._StreamControllerHook$(T)) {
      get [_controller$]() {
        let t11, t10;
        t10 = this[___StreamControllerHookState__controller];
        return t10 == null ? (t11 = __t$StreamControllerOfT().broadcast({sync: this.hook.sync, onCancel: this.hook.onCancel, onListen: this.hook.onListen}), this[___StreamControllerHookState__controller] == null ? this[___StreamControllerHookState__controller] = t11 : dart.throw(new _internal.LateError.fieldADI("_controller"))) : t10;
      }
      didUpdateHook(oldHook) {
        __t$_StreamControllerHookOfT().as(oldHook);
        super.didUpdateHook(oldHook);
        if (!dart.equals(oldHook.onListen, this.hook.onListen)) {
          this[_controller$].onListen = this.hook.onListen;
        }
        if (!dart.equals(oldHook.onCancel, this.hook.onCancel)) {
          this[_controller$].onCancel = this.hook.onCancel;
        }
      }
      build(context) {
        return this[_controller$];
      }
      dispose() {
        this[_controller$].close();
      }
      get debugLabel() {
        return "useStreamController";
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._StreamControllerHookState$(T)).new();
      }
    }
    (_StreamControllerHookState.new = function() {
      this[___StreamControllerHookState__controller] = null;
      this[___StreamControllerHookState__controller_isSet] = false;
      _StreamControllerHookState.__proto__.new.call(this);
      ;
    }).prototype = _StreamControllerHookState.prototype;
    dart.addTypeTests(_StreamControllerHookState);
    _StreamControllerHookState.prototype[_is__StreamControllerHookState_default] = true;
    dart.addTypeCaches(_StreamControllerHookState);
    dart.setMethodSignature(_StreamControllerHookState, () => ({
      __proto__: dart.getMethods(_StreamControllerHookState.__proto__),
      build: dart.fnType(async.StreamController$(T), [framework.BuildContext])
    }));
    dart.setGetterSignature(_StreamControllerHookState, () => ({
      __proto__: dart.getGetters(_StreamControllerHookState.__proto__),
      [_controller$]: async.StreamController$(T),
      debugLabel: core.String
    }));
    dart.setLibraryUri(_StreamControllerHookState, I[15]);
    dart.setFieldSignature(_StreamControllerHookState, () => ({
      __proto__: dart.getFields(_StreamControllerHookState.__proto__),
      [___StreamControllerHookState__controller]: dart.fieldType(dart.nullable(async.StreamController$(T))),
      [___StreamControllerHookState__controller_isSet]: dart.fieldType(core.bool)
    }));
    return _StreamControllerHookState;
  });
  hooks._StreamControllerHookState = hooks._StreamControllerHookState$();
  dart.addTypeTests(hooks._StreamControllerHookState, _is__StreamControllerHookState_default);
  hooks._UseValueListenableHook = class _UseValueListenableHook extends hooks._ListenableHook {
    static ['_#new#tearOff'](animation) {
      return new hooks._UseValueListenableHook.new(animation);
    }
    createState() {
      return new hooks._UseValueListenableStateHook.new();
    }
  };
  (hooks._UseValueListenableHook.new = function(animation) {
    hooks._UseValueListenableHook.__proto__.new.call(this, animation);
    ;
  }).prototype = hooks._UseValueListenableHook.prototype;
  dart.addTypeTests(hooks._UseValueListenableHook);
  dart.addTypeCaches(hooks._UseValueListenableHook);
  dart.setMethodSignature(hooks._UseValueListenableHook, () => ({
    __proto__: dart.getMethods(hooks._UseValueListenableHook.__proto__),
    createState: dart.fnType(hooks._UseValueListenableStateHook, [])
  }));
  dart.setLibraryUri(hooks._UseValueListenableHook, I[15]);
  hooks._UseValueListenableStateHook = class _UseValueListenableStateHook extends hooks._ListenableStateHook {
    get debugLabel() {
      return "useValueListenable";
    }
    get debugValue() {
      let t10;
      t10 = T$.ValueListenableN().as(this.hook.listenable);
      return t10 == null ? null : t10.value;
    }
    static ['_#new#tearOff']() {
      return new hooks._UseValueListenableStateHook.new();
    }
  };
  (hooks._UseValueListenableStateHook.new = function() {
    hooks._UseValueListenableStateHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._UseValueListenableStateHook.prototype;
  dart.addTypeTests(hooks._UseValueListenableStateHook);
  dart.addTypeCaches(hooks._UseValueListenableStateHook);
  dart.setLibraryUri(hooks._UseValueListenableStateHook, I[15]);
  var initialData$1 = dart.privateName(hooks, "_ValueNotifierHook.initialData");
  const _is__ValueNotifierHook_default = Symbol('_is__ValueNotifierHook_default');
  hooks._ValueNotifierHook$ = dart.generic(T => {
    var __t$_UseValueNotifierHookStateOfT = () => (__t$_UseValueNotifierHookStateOfT = dart.constFn(hooks._UseValueNotifierHookState$(T)))();
    class _ValueNotifierHook extends framework$.Hook$(change_notifier.ValueNotifier$(T)) {
      get initialData() {
        return this[initialData$1];
      }
      set initialData(value) {
        super.initialData = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let keys = opts && 'keys' in opts ? opts.keys : null;
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        return new (hooks._ValueNotifierHook$(T)).new({keys: keys, initialData: initialData});
      }
      createState() {
        return new (__t$_UseValueNotifierHookStateOfT()).new();
      }
    }
    (_ValueNotifierHook.new = function(opts) {
      let keys = opts && 'keys' in opts ? opts.keys : null;
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      this[initialData$1] = initialData;
      _ValueNotifierHook.__proto__.new.call(this, {keys: keys});
      ;
    }).prototype = _ValueNotifierHook.prototype;
    dart.addTypeTests(_ValueNotifierHook);
    _ValueNotifierHook.prototype[_is__ValueNotifierHook_default] = true;
    dart.addTypeCaches(_ValueNotifierHook);
    dart.setMethodSignature(_ValueNotifierHook, () => ({
      __proto__: dart.getMethods(_ValueNotifierHook.__proto__),
      createState: dart.fnType(hooks._UseValueNotifierHookState$(T), [])
    }));
    dart.setLibraryUri(_ValueNotifierHook, I[15]);
    dart.setFieldSignature(_ValueNotifierHook, () => ({
      __proto__: dart.getFields(_ValueNotifierHook.__proto__),
      initialData: dart.finalFieldType(T)
    }));
    return _ValueNotifierHook;
  });
  hooks._ValueNotifierHook = hooks._ValueNotifierHook$();
  dart.addTypeTests(hooks._ValueNotifierHook, _is__ValueNotifierHook_default);
  var ___UseValueNotifierHookState_notifier = dart.privateName(hooks, "_#_UseValueNotifierHookState#notifier");
  var ___UseValueNotifierHookState_notifier_isSet = dart.privateName(hooks, "_#_UseValueNotifierHookState#notifier#isSet");
  const _is__UseValueNotifierHookState_default = Symbol('_is__UseValueNotifierHookState_default');
  hooks._UseValueNotifierHookState$ = dart.generic(T => {
    var __t$ValueNotifierOfT = () => (__t$ValueNotifierOfT = dart.constFn(change_notifier.ValueNotifier$(T)))();
    class _UseValueNotifierHookState extends framework$.HookState$(change_notifier.ValueNotifier$(T), hooks._ValueNotifierHook$(T)) {
      get notifier() {
        let t11, t10;
        t10 = this[___UseValueNotifierHookState_notifier];
        return t10 == null ? (t11 = new (__t$ValueNotifierOfT()).new(this.hook.initialData), this[___UseValueNotifierHookState_notifier] == null ? this[___UseValueNotifierHookState_notifier] = t11 : dart.throw(new _internal.LateError.fieldADI("notifier"))) : t10;
      }
      build(context) {
        return this.notifier;
      }
      dispose() {
        this.notifier.dispose();
      }
      get debugLabel() {
        return "useValueNotifier";
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._UseValueNotifierHookState$(T)).new();
      }
    }
    (_UseValueNotifierHookState.new = function() {
      this[___UseValueNotifierHookState_notifier] = null;
      this[___UseValueNotifierHookState_notifier_isSet] = false;
      _UseValueNotifierHookState.__proto__.new.call(this);
      ;
    }).prototype = _UseValueNotifierHookState.prototype;
    dart.addTypeTests(_UseValueNotifierHookState);
    _UseValueNotifierHookState.prototype[_is__UseValueNotifierHookState_default] = true;
    dart.addTypeCaches(_UseValueNotifierHookState);
    dart.setMethodSignature(_UseValueNotifierHookState, () => ({
      __proto__: dart.getMethods(_UseValueNotifierHookState.__proto__),
      build: dart.fnType(change_notifier.ValueNotifier$(T), [framework.BuildContext])
    }));
    dart.setGetterSignature(_UseValueNotifierHookState, () => ({
      __proto__: dart.getGetters(_UseValueNotifierHookState.__proto__),
      notifier: change_notifier.ValueNotifier$(T),
      debugLabel: core.String
    }));
    dart.setLibraryUri(_UseValueNotifierHookState, I[15]);
    dart.setFieldSignature(_UseValueNotifierHookState, () => ({
      __proto__: dart.getFields(_UseValueNotifierHookState.__proto__),
      [___UseValueNotifierHookState_notifier]: dart.fieldType(dart.nullable(change_notifier.ValueNotifier$(T))),
      [___UseValueNotifierHookState_notifier_isSet]: dart.fieldType(core.bool)
    }));
    return _UseValueNotifierHookState;
  });
  hooks._UseValueNotifierHookState = hooks._UseValueNotifierHookState$();
  dart.addTypeTests(hooks._UseValueNotifierHookState, _is__UseValueNotifierHookState_default);
  const _is_Store_default = Symbol('_is_Store_default');
  hooks.Store$ = dart.generic((State, Action) => {
    class Store extends core.Object {}
    (Store.new = function() {
      ;
    }).prototype = Store.prototype;
    dart.addTypeTests(Store);
    Store.prototype[_is_Store_default] = true;
    dart.addTypeCaches(Store);
    dart.setLibraryUri(Store, I[15]);
    return Store;
  });
  hooks.Store = hooks.Store$();
  dart.addTypeTests(hooks.Store, _is_Store_default);
  var reducer$ = dart.privateName(hooks, "_ReducerHook.reducer");
  var initialState$ = dart.privateName(hooks, "_ReducerHook.initialState");
  var initialAction$ = dart.privateName(hooks, "_ReducerHook.initialAction");
  const _is__ReducerHook_default = Symbol('_is__ReducerHook_default');
  hooks._ReducerHook$ = dart.generic((State, Action) => {
    var __t$_ReducerHookStateOfState$Action = () => (__t$_ReducerHookStateOfState$Action = dart.constFn(hooks._ReducerHookState$(State, Action)))();
    class _ReducerHook extends framework$.Hook$(hooks.Store$(State, Action)) {
      get reducer() {
        return this[reducer$];
      }
      set reducer(value) {
        super.reducer = value;
      }
      get initialState() {
        return this[initialState$];
      }
      set initialState(value) {
        super.initialState = value;
      }
      get initialAction() {
        return this[initialAction$];
      }
      set initialAction(value) {
        super.initialAction = value;
      }
      static ['_#new#tearOff'](State, Action, reducer, opts) {
        let initialState = opts && 'initialState' in opts ? opts.initialState : null;
        let initialAction = opts && 'initialAction' in opts ? opts.initialAction : null;
        return new (hooks._ReducerHook$(State, Action)).new(reducer, {initialState: initialState, initialAction: initialAction});
      }
      createState() {
        return new (__t$_ReducerHookStateOfState$Action()).new();
      }
    }
    (_ReducerHook.new = function(reducer, opts) {
      let initialState = opts && 'initialState' in opts ? opts.initialState : null;
      let initialAction = opts && 'initialAction' in opts ? opts.initialAction : null;
      this[reducer$] = reducer;
      this[initialState$] = initialState;
      this[initialAction$] = initialAction;
      _ReducerHook.__proto__.new.call(this);
      ;
    }).prototype = _ReducerHook.prototype;
    dart.addTypeTests(_ReducerHook);
    _ReducerHook.prototype[_is__ReducerHook_default] = true;
    dart.addTypeCaches(_ReducerHook);
    dart.setMethodSignature(_ReducerHook, () => ({
      __proto__: dart.getMethods(_ReducerHook.__proto__),
      createState: dart.fnType(hooks._ReducerHookState$(State, Action), [])
    }));
    dart.setLibraryUri(_ReducerHook, I[15]);
    dart.setFieldSignature(_ReducerHook, () => ({
      __proto__: dart.getFields(_ReducerHook.__proto__),
      reducer: dart.finalFieldType(dart.fnType(State, [State, Action])),
      initialState: dart.finalFieldType(State),
      initialAction: dart.finalFieldType(Action)
    }));
    return _ReducerHook;
  });
  hooks._ReducerHook = hooks._ReducerHook$();
  dart.addTypeTests(hooks._ReducerHook, _is__ReducerHook_default);
  var ___ReducerHookState_state = dart.privateName(hooks, "_#_ReducerHookState#state");
  var ___ReducerHookState_state_isSet = dart.privateName(hooks, "_#_ReducerHookState#state#isSet");
  const _is__ReducerHookState_default = Symbol('_is__ReducerHookState_default');
  hooks._ReducerHookState$ = dart.generic((State, Action) => {
    var __t$StateAndActionToState = () => (__t$StateAndActionToState = dart.constFn(dart.fnType(State, [State, Action])))();
    class _ReducerHookState extends framework$.HookState$(hooks.Store$(State, Action), hooks._ReducerHook$(State, Action)) {
      get state() {
        let t12, t11, t10, t10$;
        if (!this[___ReducerHookState_state_isSet]) {
          this[___ReducerHookState_state] = (t10 = this.hook, t11 = this.hook.initialState, t12 = this.hook.initialAction, __t$StateAndActionToState().as(t10.reducer)(t11, t12));
          this[___ReducerHookState_state_isSet] = true;
        }
        t10$ = this[___ReducerHookState_state];
        return t10$;
      }
      set state(state$35param) {
        State.as(state$35param);
        this[___ReducerHookState_state_isSet] = true;
        this[___ReducerHookState_state] = state$35param;
      }
      initHook() {
        super.initHook();
        this.state;
      }
      dispatch(action) {
        let t12, t11, t10;
        Action.as(action);
        let newState = (t10 = this.hook, t11 = this.state, t12 = action, __t$StateAndActionToState().as(t10.reducer)(t11, t12));
        if (!dart.equals(this.state, newState)) {
          this.setState(dart.fn(() => this.state = newState, T$.VoidTovoid()));
        }
      }
      build(context) {
        return this;
      }
      get debugLabel() {
        return "useReducer";
      }
      get debugValue() {
        return this.state;
      }
      static ['_#new#tearOff'](State, Action) {
        return new (hooks._ReducerHookState$(State, Action)).new();
      }
    }
    (_ReducerHookState.new = function() {
      this[___ReducerHookState_state] = null;
      this[___ReducerHookState_state_isSet] = false;
      _ReducerHookState.__proto__.new.call(this);
      ;
    }).prototype = _ReducerHookState.prototype;
    dart.addTypeTests(_ReducerHookState);
    _ReducerHookState.prototype[_is__ReducerHookState_default] = true;
    dart.addTypeCaches(_ReducerHookState);
    _ReducerHookState[dart.implements] = () => [hooks.Store$(State, Action)];
    dart.setMethodSignature(_ReducerHookState, () => ({
      __proto__: dart.getMethods(_ReducerHookState.__proto__),
      dispatch: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      build: dart.fnType(hooks.Store$(State, Action), [framework.BuildContext])
    }));
    dart.setGetterSignature(_ReducerHookState, () => ({
      __proto__: dart.getGetters(_ReducerHookState.__proto__),
      state: State,
      debugLabel: core.String
    }));
    dart.setSetterSignature(_ReducerHookState, () => ({
      __proto__: dart.getSetters(_ReducerHookState.__proto__),
      state: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(_ReducerHookState, I[15]);
    dart.setFieldSignature(_ReducerHookState, () => ({
      __proto__: dart.getFields(_ReducerHookState.__proto__),
      [___ReducerHookState_state]: dart.fieldType(dart.nullable(State)),
      [___ReducerHookState_state_isSet]: dart.fieldType(core.bool)
    }));
    return _ReducerHookState;
  });
  hooks._ReducerHookState = hooks._ReducerHookState$();
  dart.addTypeTests(hooks._ReducerHookState, _is__ReducerHookState_default);
  var value$0 = dart.privateName(hooks, "_PreviousHook.value");
  const _is__PreviousHook_default = Symbol('_is__PreviousHook_default');
  hooks._PreviousHook$ = dart.generic(T => {
    var __t$_PreviousHookStateOfT = () => (__t$_PreviousHookStateOfT = dart.constFn(hooks._PreviousHookState$(T)))();
    class _PreviousHook extends framework$.Hook$(dart.nullable(T)) {
      get value() {
        return this[value$0];
      }
      set value(value) {
        super.value = value;
      }
      static ['_#new#tearOff'](T, value) {
        return new (hooks._PreviousHook$(T)).new(value);
      }
      createState() {
        return new (__t$_PreviousHookStateOfT()).new();
      }
    }
    (_PreviousHook.new = function(value) {
      this[value$0] = value;
      _PreviousHook.__proto__.new.call(this);
      ;
    }).prototype = _PreviousHook.prototype;
    dart.addTypeTests(_PreviousHook);
    _PreviousHook.prototype[_is__PreviousHook_default] = true;
    dart.addTypeCaches(_PreviousHook);
    dart.setMethodSignature(_PreviousHook, () => ({
      __proto__: dart.getMethods(_PreviousHook.__proto__),
      createState: dart.fnType(hooks._PreviousHookState$(T), [])
    }));
    dart.setLibraryUri(_PreviousHook, I[15]);
    dart.setFieldSignature(_PreviousHook, () => ({
      __proto__: dart.getFields(_PreviousHook.__proto__),
      value: dart.finalFieldType(T)
    }));
    return _PreviousHook;
  });
  hooks._PreviousHook = hooks._PreviousHook$();
  dart.addTypeTests(hooks._PreviousHook, _is__PreviousHook_default);
  var previous = dart.privateName(hooks, "_PreviousHookState.previous");
  const _is__PreviousHookState_default = Symbol('_is__PreviousHookState_default');
  hooks._PreviousHookState$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$_PreviousHookOfT = () => (__t$_PreviousHookOfT = dart.constFn(hooks._PreviousHook$(T)))();
    class _PreviousHookState extends framework$.HookState$(dart.nullable(T), hooks._PreviousHook$(T)) {
      get previous() {
        return this[previous];
      }
      set previous(value) {
        this[previous] = __t$TN().as(value);
      }
      didUpdateHook(old) {
        __t$_PreviousHookOfT().as(old);
        this.previous = old.value;
      }
      build(context) {
        return this.previous;
      }
      get debugLabel() {
        return "usePrevious";
      }
      get debugValue() {
        return this.previous;
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._PreviousHookState$(T)).new();
      }
    }
    (_PreviousHookState.new = function() {
      this[previous] = null;
      _PreviousHookState.__proto__.new.call(this);
      ;
    }).prototype = _PreviousHookState.prototype;
    dart.addTypeTests(_PreviousHookState);
    _PreviousHookState.prototype[_is__PreviousHookState_default] = true;
    dart.addTypeCaches(_PreviousHookState);
    dart.setMethodSignature(_PreviousHookState, () => ({
      __proto__: dart.getMethods(_PreviousHookState.__proto__),
      build: dart.fnType(dart.nullable(T), [framework.BuildContext])
    }));
    dart.setGetterSignature(_PreviousHookState, () => ({
      __proto__: dart.getGetters(_PreviousHookState.__proto__),
      debugLabel: core.String
    }));
    dart.setLibraryUri(_PreviousHookState, I[15]);
    dart.setFieldSignature(_PreviousHookState, () => ({
      __proto__: dart.getFields(_PreviousHookState.__proto__),
      previous: dart.fieldType(dart.nullable(T))
    }));
    return _PreviousHookState;
  });
  hooks._PreviousHookState = hooks._PreviousHookState$();
  dart.addTypeTests(hooks._PreviousHookState, _is__PreviousHookState_default);
  var callback$ = dart.privateName(hooks, "_ReassembleHook.callback");
  hooks._ReassembleHook = class _ReassembleHook extends framework$.Hook$(dart.void) {
    get callback() {
      return this[callback$];
    }
    set callback(value) {
      super.callback = value;
    }
    static ['_#new#tearOff'](callback) {
      return new hooks._ReassembleHook.new(callback);
    }
    createState() {
      return new hooks._ReassembleHookState.new();
    }
  };
  (hooks._ReassembleHook.new = function(callback) {
    this[callback$] = callback;
    hooks._ReassembleHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._ReassembleHook.prototype;
  dart.addTypeTests(hooks._ReassembleHook);
  dart.addTypeCaches(hooks._ReassembleHook);
  dart.setMethodSignature(hooks._ReassembleHook, () => ({
    __proto__: dart.getMethods(hooks._ReassembleHook.__proto__),
    createState: dart.fnType(hooks._ReassembleHookState, [])
  }));
  dart.setLibraryUri(hooks._ReassembleHook, I[15]);
  dart.setFieldSignature(hooks._ReassembleHook, () => ({
    __proto__: dart.getFields(hooks._ReassembleHook.__proto__),
    callback: dart.finalFieldType(dart.fnType(dart.void, []))
  }));
  hooks._ReassembleHookState = class _ReassembleHookState extends framework$.HookState$(dart.void, hooks._ReassembleHook) {
    reassemble() {
      super.reassemble();
      this.hook.callback();
    }
    build(context) {
    }
    get debugLabel() {
      return "useReassemble";
    }
    get debugSkipValue() {
      return true;
    }
    static ['_#new#tearOff']() {
      return new hooks._ReassembleHookState.new();
    }
  };
  (hooks._ReassembleHookState.new = function() {
    hooks._ReassembleHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._ReassembleHookState.prototype;
  dart.addTypeTests(hooks._ReassembleHookState);
  dart.addTypeCaches(hooks._ReassembleHookState);
  dart.setMethodSignature(hooks._ReassembleHookState, () => ({
    __proto__: dart.getMethods(hooks._ReassembleHookState.__proto__),
    build: dart.fnType(dart.void, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._ReassembleHookState, () => ({
    __proto__: dart.getGetters(hooks._ReassembleHookState.__proto__),
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._ReassembleHookState, I[15]);
  hooks._IsMountedHook = class _IsMountedHook extends framework$.Hook$(dart.fnType(core.bool, [])) {
    static ['_#new#tearOff']() {
      return new hooks._IsMountedHook.new();
    }
    createState() {
      return new hooks._IsMountedHookState.new();
    }
  };
  (hooks._IsMountedHook.new = function() {
    hooks._IsMountedHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._IsMountedHook.prototype;
  dart.addTypeTests(hooks._IsMountedHook);
  dart.addTypeCaches(hooks._IsMountedHook);
  dart.setMethodSignature(hooks._IsMountedHook, () => ({
    __proto__: dart.getMethods(hooks._IsMountedHook.__proto__),
    createState: dart.fnType(hooks._IsMountedHookState, [])
  }));
  dart.setLibraryUri(hooks._IsMountedHook, I[15]);
  var _mounted = dart.privateName(hooks, "_mounted");
  var _isMounted = dart.privateName(hooks, "_isMounted");
  hooks._IsMountedHookState = class _IsMountedHookState extends framework$.HookState$(dart.fnType(core.bool, []), hooks._IsMountedHook) {
    build(context) {
      return dart.bind(this, _isMounted);
    }
    [_isMounted]() {
      return this[_mounted];
    }
    dispose() {
      this[_mounted] = false;
      super.dispose();
    }
    get debugLabel() {
      return "useIsMounted";
    }
    get debugValue() {
      return this[_mounted];
    }
    static ['_#new#tearOff']() {
      return new hooks._IsMountedHookState.new();
    }
  };
  (hooks._IsMountedHookState.new = function() {
    this[_mounted] = true;
    hooks._IsMountedHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._IsMountedHookState.prototype;
  dart.addTypeTests(hooks._IsMountedHookState);
  dart.addTypeCaches(hooks._IsMountedHookState);
  dart.setMethodSignature(hooks._IsMountedHookState, () => ({
    __proto__: dart.getMethods(hooks._IsMountedHookState.__proto__),
    build: dart.fnType(dart.fnType(core.bool, []), [framework.BuildContext]),
    [_isMounted]: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(hooks._IsMountedHookState, () => ({
    __proto__: dart.getGetters(hooks._IsMountedHookState.__proto__),
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._IsMountedHookState, I[15]);
  dart.setFieldSignature(hooks._IsMountedHookState, () => ({
    __proto__: dart.getFields(hooks._IsMountedHookState.__proto__),
    [_mounted]: dart.fieldType(core.bool)
  }));
  var value$1 = dart.privateName(hooks, "ObjectRef.value");
  const _is_ObjectRef_default = Symbol('_is_ObjectRef_default');
  hooks.ObjectRef$ = dart.generic(T => {
    class ObjectRef extends core.Object {
      get value() {
        return this[value$1];
      }
      set value(value) {
        this[value$1] = T.as(value);
      }
      static ['_#new#tearOff'](T, value) {
        return new (hooks.ObjectRef$(T)).new(value);
      }
    }
    (ObjectRef.new = function(value) {
      this[value$1] = value;
      ;
    }).prototype = ObjectRef.prototype;
    dart.addTypeTests(ObjectRef);
    ObjectRef.prototype[_is_ObjectRef_default] = true;
    dart.addTypeCaches(ObjectRef);
    dart.setLibraryUri(ObjectRef, I[15]);
    dart.setFieldSignature(ObjectRef, () => ({
      __proto__: dart.getFields(ObjectRef.__proto__),
      value: dart.fieldType(T)
    }));
    return ObjectRef;
  });
  hooks.ObjectRef = hooks.ObjectRef$();
  dart.addTypeTests(hooks.ObjectRef, _is_ObjectRef_default);
  var valueBuilder$ = dart.privateName(hooks, "_MemoizedHook.valueBuilder");
  const _is__MemoizedHook_default = Symbol('_is__MemoizedHook_default');
  hooks._MemoizedHook$ = dart.generic(T => {
    var __t$_MemoizedHookStateOfT = () => (__t$_MemoizedHookStateOfT = dart.constFn(hooks._MemoizedHookState$(T)))();
    class _MemoizedHook extends framework$.Hook$(T) {
      get valueBuilder() {
        return this[valueBuilder$];
      }
      set valueBuilder(value) {
        super.valueBuilder = value;
      }
      static ['_#new#tearOff'](T, valueBuilder, opts) {
        let keys = opts && 'keys' in opts ? opts.keys : null;
        return new (hooks._MemoizedHook$(T)).new(valueBuilder, {keys: keys});
      }
      createState() {
        return new (__t$_MemoizedHookStateOfT()).new();
      }
    }
    (_MemoizedHook.new = function(valueBuilder, opts) {
      let keys = opts && 'keys' in opts ? opts.keys : null;
      this[valueBuilder$] = valueBuilder;
      _MemoizedHook.__proto__.new.call(this, {keys: keys});
      ;
    }).prototype = _MemoizedHook.prototype;
    dart.addTypeTests(_MemoizedHook);
    _MemoizedHook.prototype[_is__MemoizedHook_default] = true;
    dart.addTypeCaches(_MemoizedHook);
    dart.setMethodSignature(_MemoizedHook, () => ({
      __proto__: dart.getMethods(_MemoizedHook.__proto__),
      createState: dart.fnType(hooks._MemoizedHookState$(T), [])
    }));
    dart.setLibraryUri(_MemoizedHook, I[15]);
    dart.setFieldSignature(_MemoizedHook, () => ({
      __proto__: dart.getFields(_MemoizedHook.__proto__),
      valueBuilder: dart.finalFieldType(dart.fnType(T, []))
    }));
    return _MemoizedHook;
  });
  hooks._MemoizedHook = hooks._MemoizedHook$();
  dart.addTypeTests(hooks._MemoizedHook, _is__MemoizedHook_default);
  var ___MemoizedHookState_value = dart.privateName(hooks, "_#_MemoizedHookState#value");
  var ___MemoizedHookState_value_isSet = dart.privateName(hooks, "_#_MemoizedHookState#value#isSet");
  const _is__MemoizedHookState_default = Symbol('_is__MemoizedHookState_default');
  hooks._MemoizedHookState$ = dart.generic(T => {
    class _MemoizedHookState extends framework$.HookState$(T, hooks._MemoizedHook$(T)) {
      get value() {
        let t11;
        if (!this[___MemoizedHookState_value_isSet]) {
          let t10 = this.hook.valueBuilder();
          if (this[___MemoizedHookState_value_isSet]) dart.throw(new _internal.LateError.fieldADI("value"));
          this[___MemoizedHookState_value] = t10;
          this[___MemoizedHookState_value_isSet] = true;
        }
        t11 = this[___MemoizedHookState_value];
        return t11;
      }
      build(context) {
        return this.value;
      }
      get debugLabel() {
        return "useMemoized<" + dart.str(dart.wrapType(T)) + ">";
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._MemoizedHookState$(T)).new();
      }
    }
    (_MemoizedHookState.new = function() {
      this[___MemoizedHookState_value] = null;
      this[___MemoizedHookState_value_isSet] = false;
      _MemoizedHookState.__proto__.new.call(this);
      ;
    }).prototype = _MemoizedHookState.prototype;
    dart.addTypeTests(_MemoizedHookState);
    _MemoizedHookState.prototype[_is__MemoizedHookState_default] = true;
    dart.addTypeCaches(_MemoizedHookState);
    dart.setMethodSignature(_MemoizedHookState, () => ({
      __proto__: dart.getMethods(_MemoizedHookState.__proto__),
      build: dart.fnType(T, [framework.BuildContext])
    }));
    dart.setGetterSignature(_MemoizedHookState, () => ({
      __proto__: dart.getGetters(_MemoizedHookState.__proto__),
      value: T,
      debugLabel: core.String
    }));
    dart.setLibraryUri(_MemoizedHookState, I[15]);
    dart.setFieldSignature(_MemoizedHookState, () => ({
      __proto__: dart.getFields(_MemoizedHookState.__proto__),
      [___MemoizedHookState_value]: dart.fieldType(dart.nullable(T)),
      [___MemoizedHookState_value_isSet]: dart.fieldType(core.bool)
    }));
    return _MemoizedHookState;
  });
  hooks._MemoizedHookState = hooks._MemoizedHookState$();
  dart.addTypeTests(hooks._MemoizedHookState, _is__MemoizedHookState_default);
  var valueChanged$ = dart.privateName(hooks, "_ValueChangedHook.valueChanged");
  var value$2 = dart.privateName(hooks, "_ValueChangedHook.value");
  const _is__ValueChangedHook_default = Symbol('_is__ValueChangedHook_default');
  hooks._ValueChangedHook$ = dart.generic((T, R) => {
    var __t$_ValueChangedHookStateOfT$R = () => (__t$_ValueChangedHookStateOfT$R = dart.constFn(hooks._ValueChangedHookState$(T, R)))();
    class _ValueChangedHook extends framework$.Hook$(dart.nullable(R)) {
      get valueChanged() {
        return this[valueChanged$];
      }
      set valueChanged(value) {
        super.valueChanged = value;
      }
      get value() {
        return this[value$2];
      }
      set value(value) {
        super.value = value;
      }
      static ['_#new#tearOff'](T, R, value, valueChanged) {
        return new (hooks._ValueChangedHook$(T, R)).new(value, valueChanged);
      }
      createState() {
        return new (__t$_ValueChangedHookStateOfT$R()).new();
      }
    }
    (_ValueChangedHook.new = function(value, valueChanged) {
      this[value$2] = value;
      this[valueChanged$] = valueChanged;
      _ValueChangedHook.__proto__.new.call(this);
      ;
    }).prototype = _ValueChangedHook.prototype;
    dart.addTypeTests(_ValueChangedHook);
    _ValueChangedHook.prototype[_is__ValueChangedHook_default] = true;
    dart.addTypeCaches(_ValueChangedHook);
    dart.setMethodSignature(_ValueChangedHook, () => ({
      __proto__: dart.getMethods(_ValueChangedHook.__proto__),
      createState: dart.fnType(hooks._ValueChangedHookState$(T, R), [])
    }));
    dart.setLibraryUri(_ValueChangedHook, I[15]);
    dart.setFieldSignature(_ValueChangedHook, () => ({
      __proto__: dart.getFields(_ValueChangedHook.__proto__),
      valueChanged: dart.finalFieldType(dart.fnType(dart.nullable(R), [T, dart.nullable(R)])),
      value: dart.finalFieldType(T)
    }));
    return _ValueChangedHook;
  });
  hooks._ValueChangedHook = hooks._ValueChangedHook$();
  dart.addTypeTests(hooks._ValueChangedHook, _is__ValueChangedHook_default);
  var _result = dart.privateName(hooks, "_result");
  const _is__ValueChangedHookState_default = Symbol('_is__ValueChangedHookState_default');
  hooks._ValueChangedHookState$ = dart.generic((T, R) => {
    var __t$_ValueChangedHookOfT$R = () => (__t$_ValueChangedHookOfT$R = dart.constFn(hooks._ValueChangedHook$(T, R)))();
    var __t$TAndRNToRN = () => (__t$TAndRNToRN = dart.constFn(dart.fnType(__t$RN(), [T, __t$RN()])))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$DiagnosticsPropertyOfR = () => (__t$DiagnosticsPropertyOfR = dart.constFn(diagnostics.DiagnosticsProperty$(R)))();
    class _ValueChangedHookState extends framework$.HookState$(dart.nullable(R), hooks._ValueChangedHook$(T, R)) {
      didUpdateHook(oldHook) {
        let t13, t12, t11;
        __t$_ValueChangedHookOfT$R().as(oldHook);
        super.didUpdateHook(oldHook);
        if (!dart.equals(this.hook.value, oldHook.value)) {
          this[_result] = (t11 = this.hook, t12 = oldHook.value, t13 = this[_result], __t$TAndRNToRN().as(t11.valueChanged)(t12, t13));
        }
      }
      build(context) {
        return this[_result];
      }
      get debugLabel() {
        return "useValueChanged";
      }
      get debugHasShortDescription() {
        return false;
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (__t$DiagnosticsPropertyOfT()).new("value", this.hook.value));
        properties.add(new (__t$DiagnosticsPropertyOfR()).new("result", this[_result]));
      }
      static ['_#new#tearOff'](T, R) {
        return new (hooks._ValueChangedHookState$(T, R)).new();
      }
    }
    (_ValueChangedHookState.new = function() {
      this[_result] = null;
      _ValueChangedHookState.__proto__.new.call(this);
      ;
    }).prototype = _ValueChangedHookState.prototype;
    dart.addTypeTests(_ValueChangedHookState);
    _ValueChangedHookState.prototype[_is__ValueChangedHookState_default] = true;
    dart.addTypeCaches(_ValueChangedHookState);
    dart.setMethodSignature(_ValueChangedHookState, () => ({
      __proto__: dart.getMethods(_ValueChangedHookState.__proto__),
      build: dart.fnType(dart.nullable(R), [framework.BuildContext])
    }));
    dart.setGetterSignature(_ValueChangedHookState, () => ({
      __proto__: dart.getGetters(_ValueChangedHookState.__proto__),
      debugLabel: core.String
    }));
    dart.setLibraryUri(_ValueChangedHookState, I[15]);
    dart.setFieldSignature(_ValueChangedHookState, () => ({
      __proto__: dart.getFields(_ValueChangedHookState.__proto__),
      [_result]: dart.fieldType(dart.nullable(R))
    }));
    return _ValueChangedHookState;
  });
  hooks._ValueChangedHookState = hooks._ValueChangedHookState$();
  dart.addTypeTests(hooks._ValueChangedHookState, _is__ValueChangedHookState_default);
  var effect$ = dart.privateName(hooks, "_EffectHook.effect");
  hooks._EffectHook = class _EffectHook extends framework$.Hook$(dart.void) {
    get effect() {
      return this[effect$];
    }
    set effect(value) {
      super.effect = value;
    }
    static ['_#new#tearOff'](effect, keys = null) {
      return new hooks._EffectHook.new(effect, keys);
    }
    createState() {
      return new hooks._EffectHookState.new();
    }
  };
  (hooks._EffectHook.new = function(effect, keys = null) {
    this[effect$] = effect;
    hooks._EffectHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._EffectHook.prototype;
  dart.addTypeTests(hooks._EffectHook);
  dart.addTypeCaches(hooks._EffectHook);
  dart.setMethodSignature(hooks._EffectHook, () => ({
    __proto__: dart.getMethods(hooks._EffectHook.__proto__),
    createState: dart.fnType(hooks._EffectHookState, [])
  }));
  dart.setLibraryUri(hooks._EffectHook, I[15]);
  dart.setFieldSignature(hooks._EffectHook, () => ({
    __proto__: dart.getFields(hooks._EffectHook.__proto__),
    effect: dart.finalFieldType(dart.fnType(dart.nullable(dart.fnType(dart.void, [])), []))
  }));
  hooks._EffectHookState = class _EffectHookState extends framework$.HookState$(dart.void, hooks._EffectHook) {
    initHook() {
      super.initHook();
      this.scheduleEffect();
    }
    didUpdateHook(oldHook) {
      let t11;
      hooks._EffectHook.as(oldHook);
      super.didUpdateHook(oldHook);
      if (this.hook.keys == null) {
        t11 = this.disposer;
        t11 == null ? null : t11();
        this.scheduleEffect();
      }
    }
    build(context) {
    }
    dispose() {
      let t11;
      t11 = this.disposer;
      return t11 == null ? null : t11();
    }
    scheduleEffect() {
      this.disposer = this.hook.effect();
    }
    get debugLabel() {
      return "useEffect";
    }
    get debugSkipValue() {
      return true;
    }
    static ['_#new#tearOff']() {
      return new hooks._EffectHookState.new();
    }
  };
  (hooks._EffectHookState.new = function() {
    this.disposer = null;
    hooks._EffectHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._EffectHookState.prototype;
  dart.addTypeTests(hooks._EffectHookState);
  dart.addTypeCaches(hooks._EffectHookState);
  dart.setMethodSignature(hooks._EffectHookState, () => ({
    __proto__: dart.getMethods(hooks._EffectHookState.__proto__),
    build: dart.fnType(dart.void, [framework.BuildContext]),
    scheduleEffect: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(hooks._EffectHookState, () => ({
    __proto__: dart.getGetters(hooks._EffectHookState.__proto__),
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._EffectHookState, I[15]);
  dart.setFieldSignature(hooks._EffectHookState, () => ({
    __proto__: dart.getFields(hooks._EffectHookState.__proto__),
    disposer: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  var initialData$2 = dart.privateName(hooks, "_StateHook.initialData");
  const _is__StateHook_default = Symbol('_is__StateHook_default');
  hooks._StateHook$ = dart.generic(T => {
    var __t$_StateHookStateOfT = () => (__t$_StateHookStateOfT = dart.constFn(hooks._StateHookState$(T)))();
    class _StateHook extends framework$.Hook$(change_notifier.ValueNotifier$(T)) {
      get initialData() {
        return this[initialData$2];
      }
      set initialData(value) {
        super.initialData = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        return new (hooks._StateHook$(T)).new({initialData: initialData});
      }
      createState() {
        return new (__t$_StateHookStateOfT()).new();
      }
    }
    (_StateHook.new = function(opts) {
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      this[initialData$2] = initialData;
      _StateHook.__proto__.new.call(this);
      ;
    }).prototype = _StateHook.prototype;
    dart.addTypeTests(_StateHook);
    _StateHook.prototype[_is__StateHook_default] = true;
    dart.addTypeCaches(_StateHook);
    dart.setMethodSignature(_StateHook, () => ({
      __proto__: dart.getMethods(_StateHook.__proto__),
      createState: dart.fnType(hooks._StateHookState$(T), [])
    }));
    dart.setLibraryUri(_StateHook, I[15]);
    dart.setFieldSignature(_StateHook, () => ({
      __proto__: dart.getFields(_StateHook.__proto__),
      initialData: dart.finalFieldType(T)
    }));
    return _StateHook;
  });
  hooks._StateHook = hooks._StateHook$();
  dart.addTypeTests(hooks._StateHook, _is__StateHook_default);
  var ___StateHookState__state = dart.privateName(hooks, "_#_StateHookState#_state");
  var ___StateHookState__state_isSet = dart.privateName(hooks, "_#_StateHookState#_state#isSet");
  var _state = dart.privateName(hooks, "_state");
  const _is__StateHookState_default = Symbol('_is__StateHookState_default');
  hooks._StateHookState$ = dart.generic(T => {
    var __t$ValueNotifierOfT = () => (__t$ValueNotifierOfT = dart.constFn(change_notifier.ValueNotifier$(T)))();
    class _StateHookState extends framework$.HookState$(change_notifier.ValueNotifier$(T), hooks._StateHook$(T)) {
      get [_state]() {
        let t12, t12$, t11;
        t11 = this[___StateHookState__state];
        return t11 == null ? (t12$ = (t12 = new (__t$ValueNotifierOfT()).new(this.hook.initialData), (() => {
          t12.addListener(dart.bind(this, _listener));
          return t12;
        })()), this[___StateHookState__state] == null ? this[___StateHookState__state] = t12$ : dart.throw(new _internal.LateError.fieldADI("_state"))) : t11;
      }
      dispose() {
        this[_state].dispose();
      }
      build(context) {
        return this[_state];
      }
      [_listener]() {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
      get debugValue() {
        return this[_state].value;
      }
      get debugLabel() {
        return "useState<" + dart.str(dart.wrapType(T)) + ">";
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._StateHookState$(T)).new();
      }
    }
    (_StateHookState.new = function() {
      this[___StateHookState__state] = null;
      this[___StateHookState__state_isSet] = false;
      _StateHookState.__proto__.new.call(this);
      ;
    }).prototype = _StateHookState.prototype;
    dart.addTypeTests(_StateHookState);
    _StateHookState.prototype[_is__StateHookState_default] = true;
    dart.addTypeCaches(_StateHookState);
    dart.setMethodSignature(_StateHookState, () => ({
      __proto__: dart.getMethods(_StateHookState.__proto__),
      build: dart.fnType(change_notifier.ValueNotifier$(T), [framework.BuildContext]),
      [_listener]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_StateHookState, () => ({
      __proto__: dart.getGetters(_StateHookState.__proto__),
      [_state]: change_notifier.ValueNotifier$(T),
      debugLabel: core.String
    }));
    dart.setLibraryUri(_StateHookState, I[15]);
    dart.setFieldSignature(_StateHookState, () => ({
      __proto__: dart.getFields(_StateHookState.__proto__),
      [___StateHookState__state]: dart.fieldType(dart.nullable(change_notifier.ValueNotifier$(T))),
      [___StateHookState__state_isSet]: dart.fieldType(core.bool)
    }));
    return _StateHookState;
  });
  hooks._StateHookState = hooks._StateHookState$();
  dart.addTypeTests(hooks._StateHookState, _is__StateHookState_default);
  var length$0 = dart.privateName(hooks, "_TabControllerHook.length");
  var vsync$0 = dart.privateName(hooks, "_TabControllerHook.vsync");
  var initialIndex$ = dart.privateName(hooks, "_TabControllerHook.initialIndex");
  hooks._TabControllerHook = class _TabControllerHook extends framework$.Hook$(tab_controller.TabController) {
    get length() {
      return this[length$0];
    }
    set length(value) {
      super.length = value;
    }
    get vsync() {
      return this[vsync$0];
    }
    set vsync(value) {
      super.vsync = value;
    }
    get initialIndex() {
      return this[initialIndex$];
    }
    set initialIndex(value) {
      super.initialIndex = value;
    }
    static ['_#new#tearOff'](opts) {
      let length = opts && 'length' in opts ? opts.length : null;
      let vsync = opts && 'vsync' in opts ? opts.vsync : null;
      let initialIndex = opts && 'initialIndex' in opts ? opts.initialIndex : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return new hooks._TabControllerHook.new({length: length, vsync: vsync, initialIndex: initialIndex, keys: keys});
    }
    createState() {
      return new hooks._TabControllerHookState.new();
    }
  };
  (hooks._TabControllerHook.new = function(opts) {
    let length = opts && 'length' in opts ? opts.length : null;
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    let initialIndex = opts && 'initialIndex' in opts ? opts.initialIndex : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    this[length$0] = length;
    this[vsync$0] = vsync;
    this[initialIndex$] = initialIndex;
    hooks._TabControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._TabControllerHook.prototype;
  dart.addTypeTests(hooks._TabControllerHook);
  dart.addTypeCaches(hooks._TabControllerHook);
  dart.setMethodSignature(hooks._TabControllerHook, () => ({
    __proto__: dart.getMethods(hooks._TabControllerHook.__proto__),
    createState: dart.fnType(framework$.HookState$(tab_controller.TabController, framework$.Hook$(tab_controller.TabController)), [])
  }));
  dart.setLibraryUri(hooks._TabControllerHook, I[15]);
  dart.setFieldSignature(hooks._TabControllerHook, () => ({
    __proto__: dart.getFields(hooks._TabControllerHook.__proto__),
    length: dart.finalFieldType(core.int),
    vsync: dart.finalFieldType(ticker.TickerProvider),
    initialIndex: dart.finalFieldType(core.int)
  }));
  var ___TabControllerHookState_controller = dart.privateName(hooks, "_#_TabControllerHookState#controller");
  var ___TabControllerHookState_controller_isSet = dart.privateName(hooks, "_#_TabControllerHookState#controller#isSet");
  hooks._TabControllerHookState = class _TabControllerHookState extends framework$.HookState$(tab_controller.TabController, hooks._TabControllerHook) {
    get controller() {
      let t12, t11;
      t11 = this[___TabControllerHookState_controller];
      return t11 == null ? (t12 = new tab_controller.TabController.new({length: this.hook.length, initialIndex: this.hook.initialIndex, vsync: this.hook.vsync}), this[___TabControllerHookState_controller] == null ? this[___TabControllerHookState_controller] = t12 : dart.throw(new _internal.LateError.fieldADI("controller"))) : t11;
    }
    build(context) {
      return this.controller;
    }
    dispose() {
      return this.controller.dispose();
    }
    get debugLabel() {
      return "useTabController";
    }
    static ['_#new#tearOff']() {
      return new hooks._TabControllerHookState.new();
    }
  };
  (hooks._TabControllerHookState.new = function() {
    this[___TabControllerHookState_controller] = null;
    this[___TabControllerHookState_controller_isSet] = false;
    hooks._TabControllerHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._TabControllerHookState.prototype;
  dart.addTypeTests(hooks._TabControllerHookState);
  dart.addTypeCaches(hooks._TabControllerHookState);
  dart.setMethodSignature(hooks._TabControllerHookState, () => ({
    __proto__: dart.getMethods(hooks._TabControllerHookState.__proto__),
    build: dart.fnType(tab_controller.TabController, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._TabControllerHookState, () => ({
    __proto__: dart.getGetters(hooks._TabControllerHookState.__proto__),
    controller: tab_controller.TabController,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._TabControllerHookState, I[15]);
  dart.setFieldSignature(hooks._TabControllerHookState, () => ({
    __proto__: dart.getFields(hooks._TabControllerHookState.__proto__),
    [___TabControllerHookState_controller]: dart.fieldType(dart.nullable(tab_controller.TabController)),
    [___TabControllerHookState_controller_isSet]: dart.fieldType(core.bool)
  }));
  hooks._TextEditingControllerHookCreator = class _TextEditingControllerHookCreator extends core.Object {
    static ['_#new#tearOff']() {
      return new hooks._TextEditingControllerHookCreator.new();
    }
    call(opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return framework$.use(editable_text.TextEditingController, new hooks._TextEditingControllerHook.new(text, keys));
    }
    fromValue(value, keys = null) {
      return framework$.use(editable_text.TextEditingController, new hooks._TextEditingControllerHook.fromValue(value, keys));
    }
  };
  (hooks._TextEditingControllerHookCreator.new = function() {
    ;
  }).prototype = hooks._TextEditingControllerHookCreator.prototype;
  dart.addTypeTests(hooks._TextEditingControllerHookCreator);
  dart.addTypeCaches(hooks._TextEditingControllerHookCreator);
  dart.setMethodSignature(hooks._TextEditingControllerHookCreator, () => ({
    __proto__: dart.getMethods(hooks._TextEditingControllerHookCreator.__proto__),
    call: dart.fnType(editable_text.TextEditingController, [], {keys: dart.nullable(core.List$(dart.nullable(core.Object))), text: dart.nullable(core.String)}, {}),
    fromValue: dart.fnType(editable_text.TextEditingController, [text_input.TextEditingValue], [dart.nullable(core.List$(dart.nullable(core.Object)))])
  }));
  dart.setLibraryUri(hooks._TextEditingControllerHookCreator, I[15]);
  var initialText$ = dart.privateName(hooks, "_TextEditingControllerHook.initialText");
  var initialValue$0 = dart.privateName(hooks, "_TextEditingControllerHook.initialValue");
  hooks._TextEditingControllerHook = class _TextEditingControllerHook extends framework$.Hook$(editable_text.TextEditingController) {
    get initialText() {
      return this[initialText$];
    }
    set initialText(value) {
      super.initialText = value;
    }
    get initialValue() {
      return this[initialValue$0];
    }
    set initialValue(value) {
      super.initialValue = value;
    }
    static ['_#new#tearOff'](initialText, keys = null) {
      return new hooks._TextEditingControllerHook.new(initialText, keys);
    }
    static ['_#fromValue#tearOff'](initialValue, keys = null) {
      return new hooks._TextEditingControllerHook.fromValue(initialValue, keys);
    }
    createState() {
      return new hooks._TextEditingControllerHookState.new();
    }
  };
  (hooks._TextEditingControllerHook.new = function(initialText, keys = null) {
    this[initialText$] = initialText;
    this[initialValue$0] = null;
    hooks._TextEditingControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._TextEditingControllerHook.prototype;
  (hooks._TextEditingControllerHook.fromValue = function(initialValue, keys = null) {
    this[initialValue$0] = initialValue;
    this[initialText$] = null;
    hooks._TextEditingControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._TextEditingControllerHook.prototype;
  dart.addTypeTests(hooks._TextEditingControllerHook);
  dart.addTypeCaches(hooks._TextEditingControllerHook);
  dart.setMethodSignature(hooks._TextEditingControllerHook, () => ({
    __proto__: dart.getMethods(hooks._TextEditingControllerHook.__proto__),
    createState: dart.fnType(hooks._TextEditingControllerHookState, [])
  }));
  dart.setLibraryUri(hooks._TextEditingControllerHook, I[15]);
  dart.setFieldSignature(hooks._TextEditingControllerHook, () => ({
    __proto__: dart.getFields(hooks._TextEditingControllerHook.__proto__),
    initialText: dart.finalFieldType(dart.nullable(core.String)),
    initialValue: dart.finalFieldType(dart.nullable(text_input.TextEditingValue))
  }));
  var ___TextEditingControllerHookState__controller = dart.privateName(hooks, "_#_TextEditingControllerHookState#_controller");
  var ___TextEditingControllerHookState__controller_isSet = dart.privateName(hooks, "_#_TextEditingControllerHookState#_controller#isSet");
  hooks._TextEditingControllerHookState = class _TextEditingControllerHookState extends framework$.HookState$(editable_text.TextEditingController, hooks._TextEditingControllerHook) {
    get [_controller$]() {
      let t12, t11;
      t11 = this[___TextEditingControllerHookState__controller];
      return t11 == null ? (t12 = this.hook.initialValue != null ? new editable_text.TextEditingController.fromValue(this.hook.initialValue) : new editable_text.TextEditingController.new({text: this.hook.initialText}), this[___TextEditingControllerHookState__controller] == null ? this[___TextEditingControllerHookState__controller] = t12 : dart.throw(new _internal.LateError.fieldADI("_controller"))) : t11;
    }
    build(context) {
      return this[_controller$];
    }
    dispose() {
      return this[_controller$].dispose();
    }
    get debugLabel() {
      return "useTextEditingController";
    }
    static ['_#new#tearOff']() {
      return new hooks._TextEditingControllerHookState.new();
    }
  };
  (hooks._TextEditingControllerHookState.new = function() {
    this[___TextEditingControllerHookState__controller] = null;
    this[___TextEditingControllerHookState__controller_isSet] = false;
    hooks._TextEditingControllerHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._TextEditingControllerHookState.prototype;
  dart.addTypeTests(hooks._TextEditingControllerHookState);
  dart.addTypeCaches(hooks._TextEditingControllerHookState);
  dart.setMethodSignature(hooks._TextEditingControllerHookState, () => ({
    __proto__: dart.getMethods(hooks._TextEditingControllerHookState.__proto__),
    build: dart.fnType(editable_text.TextEditingController, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._TextEditingControllerHookState, () => ({
    __proto__: dart.getGetters(hooks._TextEditingControllerHookState.__proto__),
    [_controller$]: editable_text.TextEditingController,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._TextEditingControllerHookState, I[15]);
  dart.setFieldSignature(hooks._TextEditingControllerHookState, () => ({
    __proto__: dart.getFields(hooks._TextEditingControllerHookState.__proto__),
    [___TextEditingControllerHookState__controller]: dart.fieldType(dart.nullable(editable_text.TextEditingController)),
    [___TextEditingControllerHookState__controller_isSet]: dart.fieldType(core.bool)
  }));
  var debugLabel$0 = dart.privateName(hooks, "_FocusNodeHook.debugLabel");
  var onKey$ = dart.privateName(hooks, "_FocusNodeHook.onKey");
  var onKeyEvent$ = dart.privateName(hooks, "_FocusNodeHook.onKeyEvent");
  var skipTraversal$ = dart.privateName(hooks, "_FocusNodeHook.skipTraversal");
  var canRequestFocus$ = dart.privateName(hooks, "_FocusNodeHook.canRequestFocus");
  var descendantsAreFocusable$ = dart.privateName(hooks, "_FocusNodeHook.descendantsAreFocusable");
  hooks._FocusNodeHook = class _FocusNodeHook extends framework$.Hook$(focus_manager.FocusNode) {
    get debugLabel() {
      return this[debugLabel$0];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get onKey() {
      return this[onKey$];
    }
    set onKey(value) {
      super.onKey = value;
    }
    get onKeyEvent() {
      return this[onKeyEvent$];
    }
    set onKeyEvent(value) {
      super.onKeyEvent = value;
    }
    get skipTraversal() {
      return this[skipTraversal$];
    }
    set skipTraversal(value) {
      super.skipTraversal = value;
    }
    get canRequestFocus() {
      return this[canRequestFocus$];
    }
    set canRequestFocus(value) {
      super.canRequestFocus = value;
    }
    get descendantsAreFocusable() {
      return this[descendantsAreFocusable$];
    }
    set descendantsAreFocusable(value) {
      super.descendantsAreFocusable = value;
    }
    static ['_#new#tearOff'](opts) {
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let onKey = opts && 'onKey' in opts ? opts.onKey : null;
      let onKeyEvent = opts && 'onKeyEvent' in opts ? opts.onKeyEvent : null;
      let skipTraversal = opts && 'skipTraversal' in opts ? opts.skipTraversal : null;
      let canRequestFocus = opts && 'canRequestFocus' in opts ? opts.canRequestFocus : null;
      let descendantsAreFocusable = opts && 'descendantsAreFocusable' in opts ? opts.descendantsAreFocusable : null;
      return new hooks._FocusNodeHook.new({debugLabel: debugLabel, onKey: onKey, onKeyEvent: onKeyEvent, skipTraversal: skipTraversal, canRequestFocus: canRequestFocus, descendantsAreFocusable: descendantsAreFocusable});
    }
    createState() {
      return new hooks._FocusNodeHookState.new();
    }
  };
  (hooks._FocusNodeHook.new = function(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let onKey = opts && 'onKey' in opts ? opts.onKey : null;
    let onKeyEvent = opts && 'onKeyEvent' in opts ? opts.onKeyEvent : null;
    let skipTraversal = opts && 'skipTraversal' in opts ? opts.skipTraversal : null;
    let canRequestFocus = opts && 'canRequestFocus' in opts ? opts.canRequestFocus : null;
    let descendantsAreFocusable = opts && 'descendantsAreFocusable' in opts ? opts.descendantsAreFocusable : null;
    this[debugLabel$0] = debugLabel;
    this[onKey$] = onKey;
    this[onKeyEvent$] = onKeyEvent;
    this[skipTraversal$] = skipTraversal;
    this[canRequestFocus$] = canRequestFocus;
    this[descendantsAreFocusable$] = descendantsAreFocusable;
    hooks._FocusNodeHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._FocusNodeHook.prototype;
  dart.addTypeTests(hooks._FocusNodeHook);
  dart.addTypeCaches(hooks._FocusNodeHook);
  dart.setMethodSignature(hooks._FocusNodeHook, () => ({
    __proto__: dart.getMethods(hooks._FocusNodeHook.__proto__),
    createState: dart.fnType(hooks._FocusNodeHookState, [])
  }));
  dart.setLibraryUri(hooks._FocusNodeHook, I[15]);
  dart.setFieldSignature(hooks._FocusNodeHook, () => ({
    __proto__: dart.getFields(hooks._FocusNodeHook.__proto__),
    debugLabel: dart.finalFieldType(dart.nullable(core.String)),
    onKey: dart.finalFieldType(dart.nullable(dart.fnType(focus_manager.KeyEventResult, [focus_manager.FocusNode, raw_keyboard.RawKeyEvent]))),
    onKeyEvent: dart.finalFieldType(dart.nullable(dart.fnType(focus_manager.KeyEventResult, [focus_manager.FocusNode, hardware_keyboard.KeyEvent]))),
    skipTraversal: dart.finalFieldType(core.bool),
    canRequestFocus: dart.finalFieldType(core.bool),
    descendantsAreFocusable: dart.finalFieldType(core.bool)
  }));
  var ___FocusNodeHookState__focusNode = dart.privateName(hooks, "_#_FocusNodeHookState#_focusNode");
  var _focusNode = dart.privateName(hooks, "_focusNode");
  hooks._FocusNodeHookState = class _FocusNodeHookState extends framework$.HookState$(focus_manager.FocusNode, hooks._FocusNodeHook) {
    get [_focusNode]() {
      let t12, t11;
      t11 = this[___FocusNodeHookState__focusNode];
      return t11 == null ? (t12 = new focus_manager.FocusNode.new({debugLabel: this.hook.debugLabel, onKey: this.hook.onKey, onKeyEvent: this.hook.onKeyEvent, skipTraversal: this.hook.skipTraversal, canRequestFocus: this.hook.canRequestFocus, descendantsAreFocusable: this.hook.descendantsAreFocusable}), this[___FocusNodeHookState__focusNode] == null ? this[___FocusNodeHookState__focusNode] = t12 : dart.throw(new _internal.LateError.fieldADI("_focusNode"))) : t11;
    }
    didUpdateHook(oldHook) {
      let t11;
      hooks._FocusNodeHook.as(oldHook);
      t11 = this[_focusNode];
      (() => {
        t11.debugLabel = this.hook.debugLabel;
        t11.skipTraversal = this.hook.skipTraversal;
        t11.canRequestFocus = this.hook.canRequestFocus;
        t11.descendantsAreFocusable = this.hook.descendantsAreFocusable;
        t11.onKey = this.hook.onKey;
        t11.onKeyEvent = this.hook.onKeyEvent;
        return t11;
      })();
    }
    build(context) {
      return this[_focusNode];
    }
    dispose() {
      return this[_focusNode].dispose();
    }
    get debugLabel() {
      return "useFocusNode";
    }
    static ['_#new#tearOff']() {
      return new hooks._FocusNodeHookState.new();
    }
  };
  (hooks._FocusNodeHookState.new = function() {
    this[___FocusNodeHookState__focusNode] = null;
    hooks._FocusNodeHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._FocusNodeHookState.prototype;
  dart.addTypeTests(hooks._FocusNodeHookState);
  dart.addTypeCaches(hooks._FocusNodeHookState);
  dart.setMethodSignature(hooks._FocusNodeHookState, () => ({
    __proto__: dart.getMethods(hooks._FocusNodeHookState.__proto__),
    build: dart.fnType(focus_manager.FocusNode, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._FocusNodeHookState, () => ({
    __proto__: dart.getGetters(hooks._FocusNodeHookState.__proto__),
    [_focusNode]: focus_manager.FocusNode,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._FocusNodeHookState, I[15]);
  dart.setFieldSignature(hooks._FocusNodeHookState, () => ({
    __proto__: dart.getFields(hooks._FocusNodeHookState.__proto__),
    [___FocusNodeHookState__focusNode]: dart.fieldType(dart.nullable(focus_manager.FocusNode))
  }));
  var debugLabel$1 = dart.privateName(hooks, "_FocusScopeNodeHook.debugLabel");
  var onKey$0 = dart.privateName(hooks, "_FocusScopeNodeHook.onKey");
  var onKeyEvent$0 = dart.privateName(hooks, "_FocusScopeNodeHook.onKeyEvent");
  var skipTraversal$0 = dart.privateName(hooks, "_FocusScopeNodeHook.skipTraversal");
  var canRequestFocus$0 = dart.privateName(hooks, "_FocusScopeNodeHook.canRequestFocus");
  hooks._FocusScopeNodeHook = class _FocusScopeNodeHook extends framework$.Hook$(focus_manager.FocusScopeNode) {
    get debugLabel() {
      return this[debugLabel$1];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get onKey() {
      return this[onKey$0];
    }
    set onKey(value) {
      super.onKey = value;
    }
    get onKeyEvent() {
      return this[onKeyEvent$0];
    }
    set onKeyEvent(value) {
      super.onKeyEvent = value;
    }
    get skipTraversal() {
      return this[skipTraversal$0];
    }
    set skipTraversal(value) {
      super.skipTraversal = value;
    }
    get canRequestFocus() {
      return this[canRequestFocus$0];
    }
    set canRequestFocus(value) {
      super.canRequestFocus = value;
    }
    static ['_#new#tearOff'](opts) {
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let onKey = opts && 'onKey' in opts ? opts.onKey : null;
      let onKeyEvent = opts && 'onKeyEvent' in opts ? opts.onKeyEvent : null;
      let skipTraversal = opts && 'skipTraversal' in opts ? opts.skipTraversal : null;
      let canRequestFocus = opts && 'canRequestFocus' in opts ? opts.canRequestFocus : null;
      return new hooks._FocusScopeNodeHook.new({debugLabel: debugLabel, onKey: onKey, onKeyEvent: onKeyEvent, skipTraversal: skipTraversal, canRequestFocus: canRequestFocus});
    }
    createState() {
      return new hooks._FocusScopeNodeHookState.new();
    }
  };
  (hooks._FocusScopeNodeHook.new = function(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let onKey = opts && 'onKey' in opts ? opts.onKey : null;
    let onKeyEvent = opts && 'onKeyEvent' in opts ? opts.onKeyEvent : null;
    let skipTraversal = opts && 'skipTraversal' in opts ? opts.skipTraversal : null;
    let canRequestFocus = opts && 'canRequestFocus' in opts ? opts.canRequestFocus : null;
    this[debugLabel$1] = debugLabel;
    this[onKey$0] = onKey;
    this[onKeyEvent$0] = onKeyEvent;
    this[skipTraversal$0] = skipTraversal;
    this[canRequestFocus$0] = canRequestFocus;
    hooks._FocusScopeNodeHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._FocusScopeNodeHook.prototype;
  dart.addTypeTests(hooks._FocusScopeNodeHook);
  dart.addTypeCaches(hooks._FocusScopeNodeHook);
  dart.setMethodSignature(hooks._FocusScopeNodeHook, () => ({
    __proto__: dart.getMethods(hooks._FocusScopeNodeHook.__proto__),
    createState: dart.fnType(hooks._FocusScopeNodeHookState, [])
  }));
  dart.setLibraryUri(hooks._FocusScopeNodeHook, I[15]);
  dart.setFieldSignature(hooks._FocusScopeNodeHook, () => ({
    __proto__: dart.getFields(hooks._FocusScopeNodeHook.__proto__),
    debugLabel: dart.finalFieldType(dart.nullable(core.String)),
    onKey: dart.finalFieldType(dart.nullable(dart.fnType(focus_manager.KeyEventResult, [focus_manager.FocusNode, raw_keyboard.RawKeyEvent]))),
    onKeyEvent: dart.finalFieldType(dart.nullable(dart.fnType(focus_manager.KeyEventResult, [focus_manager.FocusNode, hardware_keyboard.KeyEvent]))),
    skipTraversal: dart.finalFieldType(core.bool),
    canRequestFocus: dart.finalFieldType(core.bool)
  }));
  var ___FocusScopeNodeHookState__focusScopeNode = dart.privateName(hooks, "_#_FocusScopeNodeHookState#_focusScopeNode");
  var _focusScopeNode = dart.privateName(hooks, "_focusScopeNode");
  hooks._FocusScopeNodeHookState = class _FocusScopeNodeHookState extends framework$.HookState$(focus_manager.FocusScopeNode, hooks._FocusScopeNodeHook) {
    get [_focusScopeNode]() {
      let t12, t11;
      t11 = this[___FocusScopeNodeHookState__focusScopeNode];
      return t11 == null ? (t12 = new focus_manager.FocusScopeNode.new({debugLabel: this.hook.debugLabel, onKey: this.hook.onKey, onKeyEvent: this.hook.onKeyEvent, skipTraversal: this.hook.skipTraversal, canRequestFocus: this.hook.canRequestFocus}), this[___FocusScopeNodeHookState__focusScopeNode] == null ? this[___FocusScopeNodeHookState__focusScopeNode] = t12 : dart.throw(new _internal.LateError.fieldADI("_focusScopeNode"))) : t11;
    }
    didUpdateHook(oldHook) {
      let t11;
      hooks._FocusScopeNodeHook.as(oldHook);
      t11 = this[_focusScopeNode];
      (() => {
        t11.debugLabel = this.hook.debugLabel;
        t11.skipTraversal = this.hook.skipTraversal;
        t11.canRequestFocus = this.hook.canRequestFocus;
        t11.onKey = this.hook.onKey;
        t11.onKeyEvent = this.hook.onKeyEvent;
        return t11;
      })();
    }
    build(context) {
      return this[_focusScopeNode];
    }
    dispose() {
      return this[_focusScopeNode].dispose();
    }
    get debugLabel() {
      return "useFocusScopeNode";
    }
    static ['_#new#tearOff']() {
      return new hooks._FocusScopeNodeHookState.new();
    }
  };
  (hooks._FocusScopeNodeHookState.new = function() {
    this[___FocusScopeNodeHookState__focusScopeNode] = null;
    hooks._FocusScopeNodeHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._FocusScopeNodeHookState.prototype;
  dart.addTypeTests(hooks._FocusScopeNodeHookState);
  dart.addTypeCaches(hooks._FocusScopeNodeHookState);
  dart.setMethodSignature(hooks._FocusScopeNodeHookState, () => ({
    __proto__: dart.getMethods(hooks._FocusScopeNodeHookState.__proto__),
    build: dart.fnType(focus_manager.FocusScopeNode, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._FocusScopeNodeHookState, () => ({
    __proto__: dart.getGetters(hooks._FocusScopeNodeHookState.__proto__),
    [_focusScopeNode]: focus_manager.FocusScopeNode,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._FocusScopeNodeHookState, I[15]);
  dart.setFieldSignature(hooks._FocusScopeNodeHookState, () => ({
    __proto__: dart.getFields(hooks._FocusScopeNodeHookState.__proto__),
    [___FocusScopeNodeHookState__focusScopeNode]: dart.fieldType(dart.nullable(focus_manager.FocusScopeNode))
  }));
  var initialScrollOffset$ = dart.privateName(hooks, "_ScrollControllerHook.initialScrollOffset");
  var keepScrollOffset$ = dart.privateName(hooks, "_ScrollControllerHook.keepScrollOffset");
  var debugLabel$2 = dart.privateName(hooks, "_ScrollControllerHook.debugLabel");
  hooks._ScrollControllerHook = class _ScrollControllerHook extends framework$.Hook$(scroll_controller.ScrollController) {
    get initialScrollOffset() {
      return this[initialScrollOffset$];
    }
    set initialScrollOffset(value) {
      super.initialScrollOffset = value;
    }
    get keepScrollOffset() {
      return this[keepScrollOffset$];
    }
    set keepScrollOffset(value) {
      super.keepScrollOffset = value;
    }
    get debugLabel() {
      return this[debugLabel$2];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    static ['_#new#tearOff'](opts) {
      let initialScrollOffset = opts && 'initialScrollOffset' in opts ? opts.initialScrollOffset : null;
      let keepScrollOffset = opts && 'keepScrollOffset' in opts ? opts.keepScrollOffset : null;
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return new hooks._ScrollControllerHook.new({initialScrollOffset: initialScrollOffset, keepScrollOffset: keepScrollOffset, debugLabel: debugLabel, keys: keys});
    }
    createState() {
      return new hooks._ScrollControllerHookState.new();
    }
  };
  (hooks._ScrollControllerHook.new = function(opts) {
    let initialScrollOffset = opts && 'initialScrollOffset' in opts ? opts.initialScrollOffset : null;
    let keepScrollOffset = opts && 'keepScrollOffset' in opts ? opts.keepScrollOffset : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    this[initialScrollOffset$] = initialScrollOffset;
    this[keepScrollOffset$] = keepScrollOffset;
    this[debugLabel$2] = debugLabel;
    hooks._ScrollControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._ScrollControllerHook.prototype;
  dart.addTypeTests(hooks._ScrollControllerHook);
  dart.addTypeCaches(hooks._ScrollControllerHook);
  dart.setMethodSignature(hooks._ScrollControllerHook, () => ({
    __proto__: dart.getMethods(hooks._ScrollControllerHook.__proto__),
    createState: dart.fnType(framework$.HookState$(scroll_controller.ScrollController, framework$.Hook$(scroll_controller.ScrollController)), [])
  }));
  dart.setLibraryUri(hooks._ScrollControllerHook, I[15]);
  dart.setFieldSignature(hooks._ScrollControllerHook, () => ({
    __proto__: dart.getFields(hooks._ScrollControllerHook.__proto__),
    initialScrollOffset: dart.finalFieldType(core.double),
    keepScrollOffset: dart.finalFieldType(core.bool),
    debugLabel: dart.finalFieldType(dart.nullable(core.String))
  }));
  var ___ScrollControllerHookState_controller = dart.privateName(hooks, "_#_ScrollControllerHookState#controller");
  var ___ScrollControllerHookState_controller_isSet = dart.privateName(hooks, "_#_ScrollControllerHookState#controller#isSet");
  hooks._ScrollControllerHookState = class _ScrollControllerHookState extends framework$.HookState$(scroll_controller.ScrollController, hooks._ScrollControllerHook) {
    get controller() {
      let t12, t11;
      t11 = this[___ScrollControllerHookState_controller];
      return t11 == null ? (t12 = new scroll_controller.ScrollController.new({initialScrollOffset: this.hook.initialScrollOffset, keepScrollOffset: this.hook.keepScrollOffset, debugLabel: this.hook.debugLabel}), this[___ScrollControllerHookState_controller] == null ? this[___ScrollControllerHookState_controller] = t12 : dart.throw(new _internal.LateError.fieldADI("controller"))) : t11;
    }
    build(context) {
      return this.controller;
    }
    dispose() {
      return this.controller.dispose();
    }
    get debugLabel() {
      return "useScrollController";
    }
    static ['_#new#tearOff']() {
      return new hooks._ScrollControllerHookState.new();
    }
  };
  (hooks._ScrollControllerHookState.new = function() {
    this[___ScrollControllerHookState_controller] = null;
    this[___ScrollControllerHookState_controller_isSet] = false;
    hooks._ScrollControllerHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._ScrollControllerHookState.prototype;
  dart.addTypeTests(hooks._ScrollControllerHookState);
  dart.addTypeCaches(hooks._ScrollControllerHookState);
  dart.setMethodSignature(hooks._ScrollControllerHookState, () => ({
    __proto__: dart.getMethods(hooks._ScrollControllerHookState.__proto__),
    build: dart.fnType(scroll_controller.ScrollController, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._ScrollControllerHookState, () => ({
    __proto__: dart.getGetters(hooks._ScrollControllerHookState.__proto__),
    controller: scroll_controller.ScrollController,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._ScrollControllerHookState, I[15]);
  dart.setFieldSignature(hooks._ScrollControllerHookState, () => ({
    __proto__: dart.getFields(hooks._ScrollControllerHookState.__proto__),
    [___ScrollControllerHookState_controller]: dart.fieldType(dart.nullable(scroll_controller.ScrollController)),
    [___ScrollControllerHookState_controller_isSet]: dart.fieldType(core.bool)
  }));
  var initialPage$ = dart.privateName(hooks, "_PageControllerHook.initialPage");
  var keepPage$ = dart.privateName(hooks, "_PageControllerHook.keepPage");
  var viewportFraction$ = dart.privateName(hooks, "_PageControllerHook.viewportFraction");
  hooks._PageControllerHook = class _PageControllerHook extends framework$.Hook$(page_view.PageController) {
    get initialPage() {
      return this[initialPage$];
    }
    set initialPage(value) {
      super.initialPage = value;
    }
    get keepPage() {
      return this[keepPage$];
    }
    set keepPage(value) {
      super.keepPage = value;
    }
    get viewportFraction() {
      return this[viewportFraction$];
    }
    set viewportFraction(value) {
      super.viewportFraction = value;
    }
    static ['_#new#tearOff'](opts) {
      let initialPage = opts && 'initialPage' in opts ? opts.initialPage : null;
      let keepPage = opts && 'keepPage' in opts ? opts.keepPage : null;
      let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return new hooks._PageControllerHook.new({initialPage: initialPage, keepPage: keepPage, viewportFraction: viewportFraction, keys: keys});
    }
    createState() {
      return new hooks._PageControllerHookState.new();
    }
  };
  (hooks._PageControllerHook.new = function(opts) {
    let initialPage = opts && 'initialPage' in opts ? opts.initialPage : null;
    let keepPage = opts && 'keepPage' in opts ? opts.keepPage : null;
    let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    this[initialPage$] = initialPage;
    this[keepPage$] = keepPage;
    this[viewportFraction$] = viewportFraction;
    hooks._PageControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._PageControllerHook.prototype;
  dart.addTypeTests(hooks._PageControllerHook);
  dart.addTypeCaches(hooks._PageControllerHook);
  dart.setMethodSignature(hooks._PageControllerHook, () => ({
    __proto__: dart.getMethods(hooks._PageControllerHook.__proto__),
    createState: dart.fnType(framework$.HookState$(page_view.PageController, framework$.Hook$(page_view.PageController)), [])
  }));
  dart.setLibraryUri(hooks._PageControllerHook, I[15]);
  dart.setFieldSignature(hooks._PageControllerHook, () => ({
    __proto__: dart.getFields(hooks._PageControllerHook.__proto__),
    initialPage: dart.finalFieldType(core.int),
    keepPage: dart.finalFieldType(core.bool),
    viewportFraction: dart.finalFieldType(core.double)
  }));
  var ___PageControllerHookState_controller = dart.privateName(hooks, "_#_PageControllerHookState#controller");
  var ___PageControllerHookState_controller_isSet = dart.privateName(hooks, "_#_PageControllerHookState#controller#isSet");
  hooks._PageControllerHookState = class _PageControllerHookState extends framework$.HookState$(page_view.PageController, hooks._PageControllerHook) {
    get controller() {
      let t12, t11;
      t11 = this[___PageControllerHookState_controller];
      return t11 == null ? (t12 = new page_view.PageController.new({initialPage: this.hook.initialPage, keepPage: this.hook.keepPage, viewportFraction: this.hook.viewportFraction}), this[___PageControllerHookState_controller] == null ? this[___PageControllerHookState_controller] = t12 : dart.throw(new _internal.LateError.fieldADI("controller"))) : t11;
    }
    build(context) {
      return this.controller;
    }
    dispose() {
      return this.controller.dispose();
    }
    get debugLabel() {
      return "usePageController";
    }
    static ['_#new#tearOff']() {
      return new hooks._PageControllerHookState.new();
    }
  };
  (hooks._PageControllerHookState.new = function() {
    this[___PageControllerHookState_controller] = null;
    this[___PageControllerHookState_controller_isSet] = false;
    hooks._PageControllerHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._PageControllerHookState.prototype;
  dart.addTypeTests(hooks._PageControllerHookState);
  dart.addTypeCaches(hooks._PageControllerHookState);
  dart.setMethodSignature(hooks._PageControllerHookState, () => ({
    __proto__: dart.getMethods(hooks._PageControllerHookState.__proto__),
    build: dart.fnType(page_view.PageController, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._PageControllerHookState, () => ({
    __proto__: dart.getGetters(hooks._PageControllerHookState.__proto__),
    controller: page_view.PageController,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._PageControllerHookState, I[15]);
  dart.setFieldSignature(hooks._PageControllerHookState, () => ({
    __proto__: dart.getFields(hooks._PageControllerHookState.__proto__),
    [___PageControllerHookState_controller]: dart.fieldType(dart.nullable(page_view.PageController)),
    [___PageControllerHookState_controller_isSet]: dart.fieldType(core.bool)
  }));
  var rebuildOnChange$ = dart.privateName(hooks, "_AppLifecycleHook.rebuildOnChange");
  var onStateChanged$ = dart.privateName(hooks, "_AppLifecycleHook.onStateChanged");
  hooks._AppLifecycleHook = class _AppLifecycleHook extends framework$.Hook$(dart.nullable(ui.AppLifecycleState)) {
    get rebuildOnChange() {
      return this[rebuildOnChange$];
    }
    set rebuildOnChange(value) {
      super.rebuildOnChange = value;
    }
    get onStateChanged() {
      return this[onStateChanged$];
    }
    set onStateChanged(value) {
      super.onStateChanged = value;
    }
    static ['_#new#tearOff'](opts) {
      let rebuildOnChange = opts && 'rebuildOnChange' in opts ? opts.rebuildOnChange : false;
      let onStateChanged = opts && 'onStateChanged' in opts ? opts.onStateChanged : null;
      return new hooks._AppLifecycleHook.new({rebuildOnChange: rebuildOnChange, onStateChanged: onStateChanged});
    }
    createState() {
      return new hooks.__AppLifecycleStateState.new();
    }
  };
  (hooks._AppLifecycleHook.new = function(opts) {
    let rebuildOnChange = opts && 'rebuildOnChange' in opts ? opts.rebuildOnChange : false;
    let onStateChanged = opts && 'onStateChanged' in opts ? opts.onStateChanged : null;
    this[rebuildOnChange$] = rebuildOnChange;
    this[onStateChanged$] = onStateChanged;
    hooks._AppLifecycleHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._AppLifecycleHook.prototype;
  dart.addTypeTests(hooks._AppLifecycleHook);
  dart.addTypeCaches(hooks._AppLifecycleHook);
  dart.setMethodSignature(hooks._AppLifecycleHook, () => ({
    __proto__: dart.getMethods(hooks._AppLifecycleHook.__proto__),
    createState: dart.fnType(hooks.__AppLifecycleStateState, [])
  }));
  dart.setLibraryUri(hooks._AppLifecycleHook, I[15]);
  dart.setFieldSignature(hooks._AppLifecycleHook, () => ({
    __proto__: dart.getFields(hooks._AppLifecycleHook.__proto__),
    rebuildOnChange: dart.finalFieldType(core.bool),
    onStateChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(ui.AppLifecycleState), ui.AppLifecycleState])))
  }));
  const HookState_WidgetsBindingObserver$36 = class HookState_WidgetsBindingObserver extends framework$.HookState$(dart.nullable(ui.AppLifecycleState), hooks._AppLifecycleHook) {};
  (HookState_WidgetsBindingObserver$36.new = function() {
    HookState_WidgetsBindingObserver$36.__proto__.new.call(this);
  }).prototype = HookState_WidgetsBindingObserver$36.prototype;
  dart.applyMixin(HookState_WidgetsBindingObserver$36, binding.WidgetsBindingObserver);
  hooks.__AppLifecycleStateState = class __AppLifecycleStateState extends HookState_WidgetsBindingObserver$36 {
    initHook() {
      super.initHook();
      this[_state] = binding.WidgetsBinding.instance.lifecycleState;
      binding.WidgetsBinding.instance.addObserver(this);
    }
    build(context) {
      return this[_state];
    }
    dispose() {
      super.dispose();
      binding.WidgetsBinding.instance.removeObserver(this);
    }
    didChangeAppLifecycleState(state) {
      let t11;
      let previous = this[_state];
      this[_state] = state;
      t11 = this.hook.onStateChanged;
      t11 == null ? null : t11(previous, state);
      if (this.hook.rebuildOnChange) {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
    }
    static ['_#new#tearOff']() {
      return new hooks.__AppLifecycleStateState.new();
    }
  };
  (hooks.__AppLifecycleStateState.new = function() {
    this[_state] = null;
    hooks.__AppLifecycleStateState.__proto__.new.call(this);
    ;
  }).prototype = hooks.__AppLifecycleStateState.prototype;
  dart.addTypeTests(hooks.__AppLifecycleStateState);
  dart.addTypeCaches(hooks.__AppLifecycleStateState);
  dart.setMethodSignature(hooks.__AppLifecycleStateState, () => ({
    __proto__: dart.getMethods(hooks.__AppLifecycleStateState.__proto__),
    build: dart.fnType(dart.nullable(ui.AppLifecycleState), [framework.BuildContext])
  }));
  dart.setLibraryUri(hooks.__AppLifecycleStateState, I[15]);
  dart.setFieldSignature(hooks.__AppLifecycleStateState, () => ({
    __proto__: dart.getFields(hooks.__AppLifecycleStateState.__proto__),
    [_state]: dart.fieldType(dart.nullable(ui.AppLifecycleState))
  }));
  var initialValue$1 = dart.privateName(hooks, "_TransformationControllerHook.initialValue");
  hooks._TransformationControllerHook = class _TransformationControllerHook extends framework$.Hook$(interactive_viewer.TransformationController) {
    get initialValue() {
      return this[initialValue$1];
    }
    set initialValue(value) {
      super.initialValue = value;
    }
    static ['_#new#tearOff'](opts) {
      let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return new hooks._TransformationControllerHook.new({initialValue: initialValue, keys: keys});
    }
    createState() {
      return new hooks._TransformationControllerHookState.new();
    }
  };
  (hooks._TransformationControllerHook.new = function(opts) {
    let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    this[initialValue$1] = initialValue;
    hooks._TransformationControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._TransformationControllerHook.prototype;
  dart.addTypeTests(hooks._TransformationControllerHook);
  dart.addTypeCaches(hooks._TransformationControllerHook);
  dart.setMethodSignature(hooks._TransformationControllerHook, () => ({
    __proto__: dart.getMethods(hooks._TransformationControllerHook.__proto__),
    createState: dart.fnType(framework$.HookState$(interactive_viewer.TransformationController, framework$.Hook$(interactive_viewer.TransformationController)), [])
  }));
  dart.setLibraryUri(hooks._TransformationControllerHook, I[15]);
  dart.setFieldSignature(hooks._TransformationControllerHook, () => ({
    __proto__: dart.getFields(hooks._TransformationControllerHook.__proto__),
    initialValue: dart.finalFieldType(dart.nullable(vector_math_64.Matrix4))
  }));
  var ___TransformationControllerHookState_controller = dart.privateName(hooks, "_#_TransformationControllerHookState#controller");
  var ___TransformationControllerHookState_controller_isSet = dart.privateName(hooks, "_#_TransformationControllerHookState#controller#isSet");
  hooks._TransformationControllerHookState = class _TransformationControllerHookState extends framework$.HookState$(interactive_viewer.TransformationController, hooks._TransformationControllerHook) {
    get controller() {
      let t12, t11;
      t11 = this[___TransformationControllerHookState_controller];
      return t11 == null ? (t12 = new interactive_viewer.TransformationController.new(this.hook.initialValue), this[___TransformationControllerHookState_controller] == null ? this[___TransformationControllerHookState_controller] = t12 : dart.throw(new _internal.LateError.fieldADI("controller"))) : t11;
    }
    build(context) {
      return this.controller;
    }
    dispose() {
      return this.controller.dispose();
    }
    get debugLabel() {
      return "useTransformationController";
    }
    static ['_#new#tearOff']() {
      return new hooks._TransformationControllerHookState.new();
    }
  };
  (hooks._TransformationControllerHookState.new = function() {
    this[___TransformationControllerHookState_controller] = null;
    this[___TransformationControllerHookState_controller_isSet] = false;
    hooks._TransformationControllerHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._TransformationControllerHookState.prototype;
  dart.addTypeTests(hooks._TransformationControllerHookState);
  dart.addTypeCaches(hooks._TransformationControllerHookState);
  dart.setMethodSignature(hooks._TransformationControllerHookState, () => ({
    __proto__: dart.getMethods(hooks._TransformationControllerHookState.__proto__),
    build: dart.fnType(interactive_viewer.TransformationController, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._TransformationControllerHookState, () => ({
    __proto__: dart.getGetters(hooks._TransformationControllerHookState.__proto__),
    controller: interactive_viewer.TransformationController,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._TransformationControllerHookState, I[15]);
  dart.setFieldSignature(hooks._TransformationControllerHookState, () => ({
    __proto__: dart.getFields(hooks._TransformationControllerHookState.__proto__),
    [___TransformationControllerHookState_controller]: dart.fieldType(dart.nullable(interactive_viewer.TransformationController)),
    [___TransformationControllerHookState_controller_isSet]: dart.fieldType(core.bool)
  }));
  var rebuildOnChange$0 = dart.privateName(hooks, "_PlatformBrightnessHook.rebuildOnChange");
  var onBrightnessChange$ = dart.privateName(hooks, "_PlatformBrightnessHook.onBrightnessChange");
  hooks._PlatformBrightnessHook = class _PlatformBrightnessHook extends framework$.Hook$(ui.Brightness) {
    get rebuildOnChange() {
      return this[rebuildOnChange$0];
    }
    set rebuildOnChange(value) {
      super.rebuildOnChange = value;
    }
    get onBrightnessChange() {
      return this[onBrightnessChange$];
    }
    set onBrightnessChange(value) {
      super.onBrightnessChange = value;
    }
    static ['_#new#tearOff'](opts) {
      let rebuildOnChange = opts && 'rebuildOnChange' in opts ? opts.rebuildOnChange : false;
      let onBrightnessChange = opts && 'onBrightnessChange' in opts ? opts.onBrightnessChange : null;
      return new hooks._PlatformBrightnessHook.new({rebuildOnChange: rebuildOnChange, onBrightnessChange: onBrightnessChange});
    }
    createState() {
      return new hooks._PlatformBrightnessState.new();
    }
  };
  (hooks._PlatformBrightnessHook.new = function(opts) {
    let rebuildOnChange = opts && 'rebuildOnChange' in opts ? opts.rebuildOnChange : false;
    let onBrightnessChange = opts && 'onBrightnessChange' in opts ? opts.onBrightnessChange : null;
    this[rebuildOnChange$0] = rebuildOnChange;
    this[onBrightnessChange$] = onBrightnessChange;
    hooks._PlatformBrightnessHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._PlatformBrightnessHook.prototype;
  dart.addTypeTests(hooks._PlatformBrightnessHook);
  dart.addTypeCaches(hooks._PlatformBrightnessHook);
  dart.setMethodSignature(hooks._PlatformBrightnessHook, () => ({
    __proto__: dart.getMethods(hooks._PlatformBrightnessHook.__proto__),
    createState: dart.fnType(hooks._PlatformBrightnessState, [])
  }));
  dart.setLibraryUri(hooks._PlatformBrightnessHook, I[15]);
  dart.setFieldSignature(hooks._PlatformBrightnessHook, () => ({
    __proto__: dart.getFields(hooks._PlatformBrightnessHook.__proto__),
    rebuildOnChange: dart.finalFieldType(core.bool),
    onBrightnessChange: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [ui.Brightness, ui.Brightness])))
  }));
  var ___PlatformBrightnessState__brightness = dart.privateName(hooks, "_#_PlatformBrightnessState#_brightness");
  var _brightness = dart.privateName(hooks, "_brightness");
  const HookState_WidgetsBindingObserver$36$ = class HookState_WidgetsBindingObserver extends framework$.HookState$(ui.Brightness, hooks._PlatformBrightnessHook) {};
  (HookState_WidgetsBindingObserver$36$.new = function() {
    HookState_WidgetsBindingObserver$36$.__proto__.new.call(this);
  }).prototype = HookState_WidgetsBindingObserver$36$.prototype;
  dart.applyMixin(HookState_WidgetsBindingObserver$36$, binding.WidgetsBindingObserver);
  hooks._PlatformBrightnessState = class _PlatformBrightnessState extends HookState_WidgetsBindingObserver$36$ {
    get [_brightness]() {
      let t11;
      t11 = this[___PlatformBrightnessState__brightness];
      return t11 == null ? dart.throw(new _internal.LateError.fieldNI("_brightness")) : t11;
    }
    set [_brightness](_brightness$35param) {
      this[___PlatformBrightnessState__brightness] = _brightness$35param;
    }
    get debugLabel() {
      return "usePlatformBrightness";
    }
    initHook() {
      super.initHook();
      this[_brightness] = binding.WidgetsBinding.instance.window.platformBrightness;
      binding.WidgetsBinding.instance.addObserver(this);
    }
    build(context) {
      return this[_brightness];
    }
    dispose() {
      binding.WidgetsBinding.instance.removeObserver(this);
      super.dispose();
    }
    didChangePlatformBrightness() {
      let t11;
      super.didChangePlatformBrightness();
      let _previous = this[_brightness];
      this[_brightness] = binding.WidgetsBinding.instance.window.platformBrightness;
      t11 = this.hook.onBrightnessChange;
      t11 == null ? null : t11(_previous, this[_brightness]);
      if (this.hook.rebuildOnChange) {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
    }
    static ['_#new#tearOff']() {
      return new hooks._PlatformBrightnessState.new();
    }
  };
  (hooks._PlatformBrightnessState.new = function() {
    this[___PlatformBrightnessState__brightness] = null;
    hooks._PlatformBrightnessState.__proto__.new.call(this);
    ;
  }).prototype = hooks._PlatformBrightnessState.prototype;
  dart.addTypeTests(hooks._PlatformBrightnessState);
  dart.addTypeCaches(hooks._PlatformBrightnessState);
  dart.setMethodSignature(hooks._PlatformBrightnessState, () => ({
    __proto__: dart.getMethods(hooks._PlatformBrightnessState.__proto__),
    build: dart.fnType(ui.Brightness, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._PlatformBrightnessState, () => ({
    __proto__: dart.getGetters(hooks._PlatformBrightnessState.__proto__),
    [_brightness]: ui.Brightness
  }));
  dart.setSetterSignature(hooks._PlatformBrightnessState, () => ({
    __proto__: dart.getSetters(hooks._PlatformBrightnessState.__proto__),
    [_brightness]: ui.Brightness
  }));
  dart.setLibraryUri(hooks._PlatformBrightnessState, I[15]);
  dart.setFieldSignature(hooks._PlatformBrightnessState, () => ({
    __proto__: dart.getFields(hooks._PlatformBrightnessState.__proto__),
    [___PlatformBrightnessState__brightness]: dart.fieldType(dart.nullable(ui.Brightness))
  }));
  var wantKeepAlive$ = dart.privateName(hooks, "_AutomaticKeepAliveHook.wantKeepAlive");
  hooks._AutomaticKeepAliveHook = class _AutomaticKeepAliveHook extends framework$.Hook$(dart.void) {
    get wantKeepAlive() {
      return this[wantKeepAlive$];
    }
    set wantKeepAlive(value) {
      super.wantKeepAlive = value;
    }
    static ['_#new#tearOff'](opts) {
      let wantKeepAlive = opts && 'wantKeepAlive' in opts ? opts.wantKeepAlive : null;
      return new hooks._AutomaticKeepAliveHook.new({wantKeepAlive: wantKeepAlive});
    }
    createState() {
      return new hooks._AutomaticKeepAliveHookState.new();
    }
  };
  (hooks._AutomaticKeepAliveHook.new = function(opts) {
    let wantKeepAlive = opts && 'wantKeepAlive' in opts ? opts.wantKeepAlive : null;
    this[wantKeepAlive$] = wantKeepAlive;
    hooks._AutomaticKeepAliveHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._AutomaticKeepAliveHook.prototype;
  dart.addTypeTests(hooks._AutomaticKeepAliveHook);
  dart.addTypeCaches(hooks._AutomaticKeepAliveHook);
  dart.setMethodSignature(hooks._AutomaticKeepAliveHook, () => ({
    __proto__: dart.getMethods(hooks._AutomaticKeepAliveHook.__proto__),
    createState: dart.fnType(framework$.HookState$(dart.void, hooks._AutomaticKeepAliveHook), [])
  }));
  dart.setLibraryUri(hooks._AutomaticKeepAliveHook, I[15]);
  dart.setFieldSignature(hooks._AutomaticKeepAliveHook, () => ({
    __proto__: dart.getFields(hooks._AutomaticKeepAliveHook.__proto__),
    wantKeepAlive: dart.finalFieldType(core.bool)
  }));
  var _keepAliveHandle = dart.privateName(hooks, "_keepAliveHandle");
  var _ensureKeepAlive = dart.privateName(hooks, "_ensureKeepAlive");
  var _releaseKeepAlive = dart.privateName(hooks, "_releaseKeepAlive");
  hooks._AutomaticKeepAliveHookState = class _AutomaticKeepAliveHookState extends framework$.HookState$(dart.void, hooks._AutomaticKeepAliveHook) {
    [_ensureKeepAlive]() {
      this[_keepAliveHandle] = new automatic_keep_alive.KeepAliveHandle.new();
      new automatic_keep_alive.KeepAliveNotification.new(dart.nullCheck(this[_keepAliveHandle])).dispatch(this.context);
    }
    [_releaseKeepAlive]() {
      let t11;
      t11 = this[_keepAliveHandle];
      t11 == null ? null : t11.dispose();
      this[_keepAliveHandle] = null;
    }
    initHook() {
      super.initHook();
      if (this.hook.wantKeepAlive) {
        this[_ensureKeepAlive]();
      }
    }
    build(context) {
      if (this.hook.wantKeepAlive && this[_keepAliveHandle] == null) {
        this[_ensureKeepAlive]();
      }
    }
    deactivate() {
      if (this[_keepAliveHandle] != null) {
        this[_releaseKeepAlive]();
      }
      super.deactivate();
    }
    get debugValue() {
      return this[_keepAliveHandle];
    }
    get debugLabel() {
      return "useAutomaticKeepAlive";
    }
    static ['_#new#tearOff']() {
      return new hooks._AutomaticKeepAliveHookState.new();
    }
  };
  (hooks._AutomaticKeepAliveHookState.new = function() {
    this[_keepAliveHandle] = null;
    hooks._AutomaticKeepAliveHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._AutomaticKeepAliveHookState.prototype;
  dart.addTypeTests(hooks._AutomaticKeepAliveHookState);
  dart.addTypeCaches(hooks._AutomaticKeepAliveHookState);
  dart.setMethodSignature(hooks._AutomaticKeepAliveHookState, () => ({
    __proto__: dart.getMethods(hooks._AutomaticKeepAliveHookState.__proto__),
    [_ensureKeepAlive]: dart.fnType(dart.void, []),
    [_releaseKeepAlive]: dart.fnType(dart.void, []),
    build: dart.fnType(dart.void, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._AutomaticKeepAliveHookState, () => ({
    __proto__: dart.getGetters(hooks._AutomaticKeepAliveHookState.__proto__),
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._AutomaticKeepAliveHookState, I[15]);
  dart.setFieldSignature(hooks._AutomaticKeepAliveHookState, () => ({
    __proto__: dart.getFields(hooks._AutomaticKeepAliveHookState.__proto__),
    [_keepAliveHandle]: dart.fieldType(dart.nullable(automatic_keep_alive.KeepAliveHandle))
  }));
  var listenable$0 = dart.privateName(hooks, "_ListenableSelectorHook.listenable");
  var selector$ = dart.privateName(hooks, "_ListenableSelectorHook.selector");
  const _is__ListenableSelectorHook_default = Symbol('_is__ListenableSelectorHook_default');
  hooks._ListenableSelectorHook$ = dart.generic(R => {
    var __t$_ListenableSelectorHookStateOfR = () => (__t$_ListenableSelectorHookStateOfR = dart.constFn(hooks._ListenableSelectorHookState$(R)))();
    class _ListenableSelectorHook extends framework$.Hook$(R) {
      get listenable() {
        return this[listenable$0];
      }
      set listenable(value) {
        super.listenable = value;
      }
      get selector() {
        return this[selector$];
      }
      set selector(value) {
        super.selector = value;
      }
      static ['_#new#tearOff'](R, listenable, selector) {
        return new (hooks._ListenableSelectorHook$(R)).new(listenable, selector);
      }
      createState() {
        return new (__t$_ListenableSelectorHookStateOfR()).new();
      }
    }
    (_ListenableSelectorHook.new = function(listenable, selector) {
      this[listenable$0] = listenable;
      this[selector$] = selector;
      _ListenableSelectorHook.__proto__.new.call(this);
      ;
    }).prototype = _ListenableSelectorHook.prototype;
    dart.addTypeTests(_ListenableSelectorHook);
    _ListenableSelectorHook.prototype[_is__ListenableSelectorHook_default] = true;
    dart.addTypeCaches(_ListenableSelectorHook);
    dart.setMethodSignature(_ListenableSelectorHook, () => ({
      __proto__: dart.getMethods(_ListenableSelectorHook.__proto__),
      createState: dart.fnType(hooks._ListenableSelectorHookState$(R), [])
    }));
    dart.setLibraryUri(_ListenableSelectorHook, I[15]);
    dart.setFieldSignature(_ListenableSelectorHook, () => ({
      __proto__: dart.getFields(_ListenableSelectorHook.__proto__),
      listenable: dart.finalFieldType(change_notifier.Listenable),
      selector: dart.finalFieldType(dart.fnType(R, []))
    }));
    return _ListenableSelectorHook;
  });
  hooks._ListenableSelectorHook = hooks._ListenableSelectorHook$();
  dart.addTypeTests(hooks._ListenableSelectorHook, _is__ListenableSelectorHook_default);
  var ___ListenableSelectorHookState__selectorResult = dart.privateName(hooks, "_#_ListenableSelectorHookState#_selectorResult");
  var ___ListenableSelectorHookState__selectorResult_isSet = dart.privateName(hooks, "_#_ListenableSelectorHookState#_selectorResult#isSet");
  var _selectorResult = dart.privateName(hooks, "_selectorResult");
  const _is__ListenableSelectorHookState_default = Symbol('_is__ListenableSelectorHookState_default');
  hooks._ListenableSelectorHookState$ = dart.generic(R => {
    var __t$_ListenableSelectorHookOfR = () => (__t$_ListenableSelectorHookOfR = dart.constFn(hooks._ListenableSelectorHook$(R)))();
    class _ListenableSelectorHookState extends framework$.HookState$(R, hooks._ListenableSelectorHook$(R)) {
      get [_selectorResult]() {
        let t11;
        if (!this[___ListenableSelectorHookState__selectorResult_isSet]) {
          this[___ListenableSelectorHookState__selectorResult] = this.hook.selector();
          this[___ListenableSelectorHookState__selectorResult_isSet] = true;
        }
        t11 = this[___ListenableSelectorHookState__selectorResult];
        return t11;
      }
      set [_selectorResult](_selectorResult$35param) {
        this[___ListenableSelectorHookState__selectorResult_isSet] = true;
        this[___ListenableSelectorHookState__selectorResult] = _selectorResult$35param;
      }
      initHook() {
        super.initHook();
        this.hook.listenable.addListener(dart.bind(this, _listener));
      }
      didUpdateHook(oldHook) {
        __t$_ListenableSelectorHookOfR().as(oldHook);
        super.didUpdateHook(oldHook);
        if (!this.hook.selector[$_equals](oldHook.selector)) {
          this.setState(dart.fn(() => {
            this[_selectorResult] = this.hook.selector();
          }, T$.VoidTovoid()));
        }
        if (!this.hook.listenable[$_equals](oldHook.listenable)) {
          oldHook.listenable.removeListener(dart.bind(this, _listener));
          this.hook.listenable.addListener(dart.bind(this, _listener));
          this[_selectorResult] = this.hook.selector();
        }
      }
      build(context) {
        return this[_selectorResult];
      }
      [_listener]() {
        let latestSelectorResult = this.hook.selector();
        if (!dart.equals(this[_selectorResult], latestSelectorResult)) {
          this.setState(dart.fn(() => {
            this[_selectorResult] = latestSelectorResult;
          }, T$.VoidTovoid()));
        }
      }
      dispose() {
        this.hook.listenable.removeListener(dart.bind(this, _listener));
      }
      get debugLabel() {
        return "useListenableSelector<" + dart.str(dart.wrapType(R)) + ">";
      }
      get debugSkipValue() {
        return true;
      }
      static ['_#new#tearOff'](R) {
        return new (hooks._ListenableSelectorHookState$(R)).new();
      }
    }
    (_ListenableSelectorHookState.new = function() {
      this[___ListenableSelectorHookState__selectorResult] = null;
      this[___ListenableSelectorHookState__selectorResult_isSet] = false;
      _ListenableSelectorHookState.__proto__.new.call(this);
      ;
    }).prototype = _ListenableSelectorHookState.prototype;
    dart.addTypeTests(_ListenableSelectorHookState);
    _ListenableSelectorHookState.prototype[_is__ListenableSelectorHookState_default] = true;
    dart.addTypeCaches(_ListenableSelectorHookState);
    dart.setMethodSignature(_ListenableSelectorHookState, () => ({
      __proto__: dart.getMethods(_ListenableSelectorHookState.__proto__),
      build: dart.fnType(R, [framework.BuildContext]),
      [_listener]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_ListenableSelectorHookState, () => ({
      __proto__: dart.getGetters(_ListenableSelectorHookState.__proto__),
      [_selectorResult]: R,
      debugLabel: core.String
    }));
    dart.setSetterSignature(_ListenableSelectorHookState, () => ({
      __proto__: dart.getSetters(_ListenableSelectorHookState.__proto__),
      [_selectorResult]: R
    }));
    dart.setLibraryUri(_ListenableSelectorHookState, I[15]);
    dart.setFieldSignature(_ListenableSelectorHookState, () => ({
      __proto__: dart.getFields(_ListenableSelectorHookState.__proto__),
      [___ListenableSelectorHookState__selectorResult]: dart.fieldType(dart.nullable(R)),
      [___ListenableSelectorHookState__selectorResult_isSet]: dart.fieldType(core.bool)
    }));
    return _ListenableSelectorHookState;
  });
  hooks._ListenableSelectorHookState = hooks._ListenableSelectorHookState$();
  dart.addTypeTests(hooks._ListenableSelectorHookState, _is__ListenableSelectorHookState_default);
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  hooks.useAnimation = function useAnimation(T, animation) {
    framework$.use(dart.void, new (hooks._UseAnimationHook$(T)).new(animation));
    return animation.value;
  };
  hooks.useAnimationController = function useAnimationController(opts) {
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let reverseDuration = opts && 'reverseDuration' in opts ? opts.reverseDuration : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let initialValue = opts && 'initialValue' in opts ? opts.initialValue : 0;
    let lowerBound = opts && 'lowerBound' in opts ? opts.lowerBound : 0;
    let upperBound = opts && 'upperBound' in opts ? opts.upperBound : 1;
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    let animationBehavior = opts && 'animationBehavior' in opts ? opts.animationBehavior : C[21] || CT.C21;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    vsync == null ? vsync = hooks.useSingleTickerProvider({keys: keys}) : null;
    return framework$.use(animation_controller.AnimationController, new hooks._AnimationControllerHook.new({duration: duration, reverseDuration: reverseDuration, debugLabel: debugLabel, initialValue: initialValue, lowerBound: lowerBound, upperBound: upperBound, vsync: vsync, animationBehavior: animationBehavior, keys: keys}));
  };
  hooks.useSingleTickerProvider = function useSingleTickerProvider(opts) {
    let keys = opts && 'keys' in opts ? opts.keys : null;
    return framework$.use(ticker.TickerProvider, keys != null ? new hooks._SingleTickerProviderHook.new(keys) : C[22] || CT.C22);
  };
  hooks.useFuture = function useFuture(T, future, opts) {
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let preserveState = opts && 'preserveState' in opts ? opts.preserveState : true;
    return framework$.use(async$.AsyncSnapshot$(T), new (hooks._FutureHook$(T)).new(future, {initialData: initialData, preserveState: preserveState}));
  };
  hooks.useStream = function useStream(T, stream, opts) {
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let preserveState = opts && 'preserveState' in opts ? opts.preserveState : true;
    return framework$.use(async$.AsyncSnapshot$(T), new (hooks._StreamHook$(T)).new(stream, {initialData: initialData, preserveState: preserveState}));
  };
  hooks.useStreamController = function useStreamController(T, opts) {
    let sync = opts && 'sync' in opts ? opts.sync : false;
    let onListen = opts && 'onListen' in opts ? opts.onListen : null;
    let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    return framework$.use(async.StreamController$(T), new (hooks._StreamControllerHook$(T)).new({onCancel: onCancel, onListen: onListen, sync: sync, keys: keys}));
  };
  hooks.useFocusNode = function useFocusNode(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let onKey = opts && 'onKey' in opts ? opts.onKey : null;
    let onKeyEvent = opts && 'onKeyEvent' in opts ? opts.onKeyEvent : null;
    let skipTraversal = opts && 'skipTraversal' in opts ? opts.skipTraversal : false;
    let canRequestFocus = opts && 'canRequestFocus' in opts ? opts.canRequestFocus : true;
    let descendantsAreFocusable = opts && 'descendantsAreFocusable' in opts ? opts.descendantsAreFocusable : true;
    return framework$.use(focus_manager.FocusNode, new hooks._FocusNodeHook.new({debugLabel: debugLabel, onKey: onKey, onKeyEvent: onKeyEvent, skipTraversal: skipTraversal, canRequestFocus: canRequestFocus, descendantsAreFocusable: descendantsAreFocusable}));
  };
  hooks.useFocusScopeNode = function useFocusScopeNode(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let onKey = opts && 'onKey' in opts ? opts.onKey : null;
    let onKeyEvent = opts && 'onKeyEvent' in opts ? opts.onKeyEvent : null;
    let skipTraversal = opts && 'skipTraversal' in opts ? opts.skipTraversal : false;
    let canRequestFocus = opts && 'canRequestFocus' in opts ? opts.canRequestFocus : true;
    return framework$.use(focus_manager.FocusScopeNode, new hooks._FocusScopeNodeHook.new({debugLabel: debugLabel, onKey: onKey, onKeyEvent: onKeyEvent, skipTraversal: skipTraversal, canRequestFocus: canRequestFocus}));
  };
  hooks.useAutomaticKeepAlive = function useAutomaticKeepAlive(opts) {
    let wantKeepAlive = opts && 'wantKeepAlive' in opts ? opts.wantKeepAlive : true;
    framework$.use(dart.void, new hooks._AutomaticKeepAliveHook.new({wantKeepAlive: wantKeepAlive}));
  };
  hooks.useValueListenable = function useValueListenable(T, valueListenable) {
    framework$.use(dart.void, new hooks._UseValueListenableHook.new(valueListenable));
    return valueListenable.value;
  };
  hooks.useListenable = function useListenable(T, listenable) {
    framework$.use(dart.void, new hooks._ListenableHook.new(listenable));
    return listenable;
  };
  hooks.useValueNotifier = function useValueNotifier(T, initialData, keys = null) {
    return framework$.use(change_notifier.ValueNotifier$(T), new (hooks._ValueNotifierHook$(T)).new({initialData: initialData, keys: keys}));
  };
  hooks.useListenableSelector = function useListenableSelector(R, listenable, selector) {
    return framework$.use(R, new (hooks._ListenableSelectorHook$(R)).new(listenable, selector));
  };
  hooks.useReducer = function useReducer(State, Action, reducer, opts) {
    let initialState = opts && 'initialState' in opts ? opts.initialState : null;
    let initialAction = opts && 'initialAction' in opts ? opts.initialAction : null;
    return framework$.use(hooks.Store$(State, Action), new (hooks._ReducerHook$(State, Action)).new(reducer, {initialAction: initialAction, initialState: initialState}));
  };
  hooks.usePrevious = function usePrevious(T, val) {
    return framework$.use(dart.nullable(T), new (hooks._PreviousHook$(T)).new(val));
  };
  hooks.useReassemble = function useReassemble(callback) {
    if (!dart.fn(() => {
      framework$.use(dart.void, new hooks._ReassembleHook.new(callback));
      return true;
    }, T$.VoidTobool())()) dart.assertFailed("", I[17], 139, 10, "() {\n    use(_ReassembleHook(callback));\n    return true;\n  }()");
  };
  hooks.useIsMounted = function useIsMounted() {
    return framework$.use(T$.VoidTobool(), C[23] || CT.C23);
  };
  hooks.usePageController = function usePageController(opts) {
    let initialPage = opts && 'initialPage' in opts ? opts.initialPage : 0;
    let keepPage = opts && 'keepPage' in opts ? opts.keepPage : true;
    let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : 1;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    return framework$.use(page_view.PageController, new hooks._PageControllerHook.new({initialPage: initialPage, keepPage: keepPage, viewportFraction: viewportFraction, keys: keys}));
  };
  hooks.usePlatformBrightness = function usePlatformBrightness() {
    return framework$.use(ui.Brightness, C[24] || CT.C24);
  };
  hooks.useOnPlatformBrightnessChange = function useOnPlatformBrightnessChange(onBrightnessChange) {
    return framework$.use(dart.void, new hooks._PlatformBrightnessHook.new({onBrightnessChange: onBrightnessChange}));
  };
  hooks.useRef = function useRef(T, initialValue) {
    return hooks.useMemoized(hooks.ObjectRef$(T), dart.fn(() => new (hooks.ObjectRef$(T)).new(initialValue), dart.fnType(hooks.ObjectRef$(T), [])));
  };
  hooks.useCallback = function useCallback(T, callback, keys) {
    return hooks.useMemoized(T, dart.fn(() => callback, dart.fnType(T, [])), keys);
  };
  hooks.useMemoized = function useMemoized(T, valueBuilder, keys = C[25] || CT.C25) {
    return framework$.use(T, new (hooks._MemoizedHook$(T)).new(valueBuilder, {keys: keys}));
  };
  hooks.useValueChanged = function useValueChanged(T, R, value, valueChange) {
    return framework$.use(dart.nullable(R), new (hooks._ValueChangedHook$(T, R)).new(value, valueChange));
  };
  hooks.useEffect = function useEffect(effect, keys = null) {
    framework$.use(dart.void, new hooks._EffectHook.new(effect, keys));
  };
  hooks.useState = function useState(T, initialData) {
    return framework$.use(change_notifier.ValueNotifier$(T), new (hooks._StateHook$(T)).new({initialData: initialData}));
  };
  hooks.useScrollController = function useScrollController(opts) {
    let initialScrollOffset = opts && 'initialScrollOffset' in opts ? opts.initialScrollOffset : 0;
    let keepScrollOffset = opts && 'keepScrollOffset' in opts ? opts.keepScrollOffset : true;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    return framework$.use(scroll_controller.ScrollController, new hooks._ScrollControllerHook.new({initialScrollOffset: initialScrollOffset, keepScrollOffset: keepScrollOffset, debugLabel: debugLabel, keys: keys}));
  };
  hooks.useTabController = function useTabController(opts) {
    let initialLength = opts && 'initialLength' in opts ? opts.initialLength : null;
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    let initialIndex = opts && 'initialIndex' in opts ? opts.initialIndex : 0;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    vsync == null ? vsync = hooks.useSingleTickerProvider({keys: keys}) : null;
    return framework$.use(tab_controller.TabController, new hooks._TabControllerHook.new({vsync: vsync, length: initialLength, initialIndex: initialIndex, keys: keys}));
  };
  hooks.useTransformationController = function useTransformationController(opts) {
    let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    return framework$.use(interactive_viewer.TransformationController, new hooks._TransformationControllerHook.new({initialValue: initialValue, keys: keys}));
  };
  hooks.useAppLifecycleState = function useAppLifecycleState() {
    return framework$.use(T$.AppLifecycleStateN(), C[26] || CT.C26);
  };
  hooks.useOnAppLifecycleStateChange = function useOnAppLifecycleStateChange(onStateChanged) {
    framework$.use(T$.AppLifecycleStateN(), new hooks._AppLifecycleHook.new({onStateChanged: onStateChanged}));
  };
  dart.defineLazy(hooks, {
    /*hooks.useTextEditingController*/get useTextEditingController() {
      return C[27] || CT.C27;
    }
  }, false);
  var withCredentials = dart.privateName(browser_client, "BrowserClient.withCredentials");
  var _xhrs = dart.privateName(browser_client, "_xhrs");
  var _isClosed = dart.privateName(browser_client, "_isClosed");
  browser_client.BrowserClient = class BrowserClient extends base_client.BaseClient {
    get withCredentials() {
      return this[withCredentials];
    }
    set withCredentials(value) {
      this[withCredentials] = value;
    }
    send(request) {
      return async.async(streamed_response.StreamedResponse, (function* send() {
        let t11;
        if (this[_isClosed]) {
          dart.throw(new exception.ClientException.new("HTTP request failed. Client is already closed.", request.url));
        }
        let bytes = (yield request.finalize().toBytes());
        let xhr = html.HttpRequest.new();
        this[_xhrs].add(xhr);
        t11 = xhr;
        (() => {
          t11.open(request.method, dart.str(request.url), {async: true});
          t11[$responseType] = "arraybuffer";
          t11.withCredentials = this.withCredentials;
          return t11;
        })();
        request.headers[$forEach](dart.bind(xhr, 'setRequestHeader'));
        let completer = T$.CompleterOfStreamedResponse().new();
        async.unawaited(xhr[$onLoad].first.then(dart.void, dart.fn(_ => {
          let body = typed_data.ByteBuffer.as(xhr[$response])[$asUint8List]();
          completer.complete(new streamed_response.StreamedResponse.new(byte_stream.ByteStream.fromBytes(body), dart.nullCheck(xhr.status), {contentLength: body[$length], request: request, headers: xhr[$responseHeaders], reasonPhrase: xhr.statusText}));
        }, T$.ProgressEventToNull())));
        async.unawaited(xhr[$onError].first.then(dart.void, dart.fn(_ => {
          completer.completeError(new exception.ClientException.new("XMLHttpRequest error.", request.url), core.StackTrace.current);
        }, T$.ProgressEventToNull())));
        xhr.send(bytes);
        try {
          return yield completer.future;
        } finally {
          this[_xhrs].remove(xhr);
        }
      }).bind(this));
    }
    close() {
      this[_isClosed] = true;
      for (let xhr of this[_xhrs]) {
        xhr.abort();
      }
      this[_xhrs].clear();
    }
    static ['_#new#tearOff']() {
      return new browser_client.BrowserClient.new();
    }
  };
  (browser_client.BrowserClient.new = function() {
    this[_xhrs] = T$.LinkedHashSetOfHttpRequest().new();
    this[withCredentials] = false;
    this[_isClosed] = false;
    ;
  }).prototype = browser_client.BrowserClient.prototype;
  dart.addTypeTests(browser_client.BrowserClient);
  dart.addTypeCaches(browser_client.BrowserClient);
  dart.setMethodSignature(browser_client.BrowserClient, () => ({
    __proto__: dart.getMethods(browser_client.BrowserClient.__proto__),
    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), [base_request.BaseRequest])
  }));
  dart.setLibraryUri(browser_client.BrowserClient, I[18]);
  dart.setFieldSignature(browser_client.BrowserClient, () => ({
    __proto__: dart.getFields(browser_client.BrowserClient.__proto__),
    [_xhrs]: dart.finalFieldType(core.Set$(html.HttpRequest)),
    withCredentials: dart.fieldType(core.bool),
    [_isClosed]: dart.fieldType(core.bool)
  }));
  browser_client.createClient = function createClient() {
    ;
    return new browser_client.BrowserClient.new();
  };
  var Latin1Codec__allowInvalid = dart.privateName(convert, "Latin1Codec._allowInvalid");
  utils.mapToQuery = function mapToQuery(map, opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    let pairs = T$.JSArrayOfListOfString().of([]);
    map[$forEach](dart.fn((key, value) => {
      let t11, t11$;
      return pairs[$add](T$.JSArrayOfString().of([core.Uri.encodeQueryComponent(key, {encoding: (t11 = encoding, t11 == null ? convert.utf8 : t11)}), core.Uri.encodeQueryComponent(value, {encoding: (t11$ = encoding, t11$ == null ? convert.utf8 : t11$)})]));
    }, T$.StringAndStringTovoid()));
    return pairs[$map](core.String, dart.fn(pair => pair[$_get](0) + "=" + pair[$_get](1), T$.ListOfStringToString()))[$join]("&");
  };
  utils.encodingForCharset = function encodingForCharset(charset, fallback = C[28] || CT.C28) {
    let t11;
    if (charset == null) return fallback;
    t11 = convert.Encoding.getByName(charset);
    return t11 == null ? fallback : t11;
  };
  utils.requiredEncodingForCharset = function requiredEncodingForCharset(charset) {
    let t11;
    t11 = convert.Encoding.getByName(charset);
    return t11 == null ? dart.throw(new core.FormatException.new("Unsupported encoding \"" + charset + "\".")) : t11;
  };
  utils.isPlainAscii = function isPlainAscii(string) {
    return utils._asciiOnly.hasMatch(string);
  };
  utils.toUint8List = function toUint8List(input) {
    if (typed_data.Uint8List.is(input)) return input;
    if (typed_data.TypedData.is(input)) {
      return typed_data.Uint8List.view(typed_data.TypedData.as(input)[$buffer]);
    }
    return _native_typed_data.NativeUint8List.fromList(input);
  };
  utils.toByteStream = function toByteStream(stream) {
    if (byte_stream.ByteStream.is(stream)) return stream;
    return new byte_stream.ByteStream.new(stream);
  };
  utils.onDone = function onDone(T, stream, onDone) {
    return stream.transform(T, new (async._StreamHandlerTransformer$(T, T)).new({handleDone: dart.fn(sink => {
        sink.close();
        onDone();
      }, dart.fnType(dart.void, [async.EventSink$(T)]))}));
  };
  dart.defineLazy(utils, {
    /*utils._asciiOnly*/get _asciiOnly() {
      return core.RegExp.new("^[\\x00-\\x7F]+$");
    }
  }, false);
  multipart_file_stub.multipartFileFromPath = function multipartFileFromPath(field, filePath, opts) {
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    return dart.throw(new core.UnsupportedError.new("MultipartFile is only supported where dart:io is available."));
  };
  dart.defineLazy(boundary_characters, {
    /*boundary_characters.boundaryCharacters*/get boundaryCharacters() {
      return C[29] || CT.C29;
    }
  }, false);
  var scheme$ = dart.privateName(authentication_challenge, "AuthenticationChallenge.scheme");
  var parameters$ = dart.privateName(authentication_challenge, "AuthenticationChallenge.parameters");
  authentication_challenge.AuthenticationChallenge = class AuthenticationChallenge extends core.Object {
    get scheme() {
      return this[scheme$];
    }
    set scheme(value) {
      super.scheme = value;
    }
    get parameters() {
      return this[parameters$];
    }
    set parameters(value) {
      super.parameters = value;
    }
    static parseHeader(header) {
      return utils$.wrapFormatException(T$.ListOfAuthenticationChallenge(), "authentication header", header, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(header);
        scanner.scan(scan.whitespace);
        let challenges = scan.parseList(authentication_challenge.AuthenticationChallenge, scanner, dart.fn(() => {
          let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner, {whitespaceName: "\" \" or \"=\""});
          let params = new (T$.IdentityMapOfString$String()).new();
          while (scanner.scan(",")) {
            scanner.scan(scan.whitespace);
          }
          authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params);
          let beforeComma = scanner.position;
          while (scanner.scan(",")) {
            scanner.scan(scan.whitespace);
            if (scanner.matches(",") || scanner.isDone) continue;
            scanner.expect(scan.token, {name: "a token"});
            let name = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
            scanner.scan(scan.whitespace);
            if (!scanner.scan("=")) {
              scanner.position = beforeComma;
              break;
            }
            scanner.scan(scan.whitespace);
            if (scanner.scan(scan.token)) {
              params[$_set](name, dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));
            } else {
              params[$_set](name, scan.expectQuotedString(scanner, {name: "a token or a quoted string"}));
            }
            scanner.scan(scan.whitespace);
            beforeComma = scanner.position;
          }
          return new authentication_challenge.AuthenticationChallenge.new(scheme, params);
        }, T$.VoidToAuthenticationChallenge()));
        scanner.expectDone();
        return challenges;
      }, T$.VoidToListOfAuthenticationChallenge()));
    }
    static parse(challenge) {
      return utils$.wrapFormatException(authentication_challenge.AuthenticationChallenge, "authentication challenge", challenge, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(challenge);
        scanner.scan(scan.whitespace);
        let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner);
        let params = new (T$.IdentityMapOfString$String()).new();
        scan.parseList(dart.void, scanner, dart.fn(() => authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params), T$.VoidTovoid()));
        scanner.expectDone();
        return new authentication_challenge.AuthenticationChallenge.new(scheme, params);
      }, T$.VoidToAuthenticationChallenge()));
    }
    static ['_#parse#tearOff'](challenge) {
      return authentication_challenge.AuthenticationChallenge.parse(challenge);
    }
    static _scanScheme(scanner, opts) {
      let whitespaceName = opts && 'whitespaceName' in opts ? opts.whitespaceName : null;
      scanner.expect(scan.token, {name: "a token"});
      let scheme = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[$toLowerCase]();
      scanner.scan(scan.whitespace);
      if (scanner.lastMatch == null || !dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[$contains](" ")) {
        scanner.expect(" ", {name: whitespaceName});
      }
      return scheme;
    }
    static _scanAuthParam(scanner, params) {
      scanner.expect(scan.token, {name: "a token"});
      let name = dart.nullCheck(scanner.lastMatch)._get(0);
      scanner.scan(scan.whitespace);
      scanner.expect("=");
      scanner.scan(scan.whitespace);
      if (scanner.scan(scan.token)) {
        params[$_set](name, dart.nullCheck(scanner.lastMatch)._get(0));
      } else {
        params[$_set](name, scan.expectQuotedString(scanner, {name: "a token or a quoted string"}));
      }
      scanner.scan(scan.whitespace);
    }
    static ['_#new#tearOff'](scheme, parameters) {
      return new authentication_challenge.AuthenticationChallenge.new(scheme, parameters);
    }
  };
  (authentication_challenge.AuthenticationChallenge.new = function(scheme, parameters) {
    this[scheme$] = scheme;
    this[parameters$] = new (T$.UnmodifiableMapViewOfString$String()).new(new (T$.CaseInsensitiveMapOfString()).from(parameters));
    ;
  }).prototype = authentication_challenge.AuthenticationChallenge.prototype;
  dart.addTypeTests(authentication_challenge.AuthenticationChallenge);
  dart.addTypeCaches(authentication_challenge.AuthenticationChallenge);
  dart.setStaticMethodSignature(authentication_challenge.AuthenticationChallenge, () => ['parseHeader', 'parse', '_scanScheme', '_scanAuthParam']);
  dart.setLibraryUri(authentication_challenge.AuthenticationChallenge, I[19]);
  dart.setFieldSignature(authentication_challenge.AuthenticationChallenge, () => ({
    __proto__: dart.getFields(authentication_challenge.AuthenticationChallenge.__proto__),
    scheme: dart.finalFieldType(core.String),
    parameters: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  const _is_CaseInsensitiveMap_default = Symbol('_is_CaseInsensitiveMap_default');
  case_insensitive_map.CaseInsensitiveMap$ = dart.generic(V => {
    class CaseInsensitiveMap extends canonicalized_map.CanonicalizedMap$(core.String, core.String, V) {
      static ['_#new#tearOff'](V) {
        return new (case_insensitive_map.CaseInsensitiveMap$(V)).new();
      }
      static ['_#from#tearOff'](V, other) {
        return new (case_insensitive_map.CaseInsensitiveMap$(V)).from(other);
      }
    }
    (CaseInsensitiveMap.new = function() {
      CaseInsensitiveMap.__proto__.new.call(this, dart.fn(key => key[$toLowerCase](), T$.StringToString()));
      ;
    }).prototype = CaseInsensitiveMap.prototype;
    (CaseInsensitiveMap.from = function(other) {
      CaseInsensitiveMap.__proto__.from.call(this, other, dart.fn(key => key[$toLowerCase](), T$.StringToString()));
      ;
    }).prototype = CaseInsensitiveMap.prototype;
    dart.addTypeTests(CaseInsensitiveMap);
    CaseInsensitiveMap.prototype[_is_CaseInsensitiveMap_default] = true;
    dart.addTypeCaches(CaseInsensitiveMap);
    dart.setLibraryUri(CaseInsensitiveMap, I[20]);
    return CaseInsensitiveMap;
  });
  case_insensitive_map.CaseInsensitiveMap = case_insensitive_map.CaseInsensitiveMap$();
  dart.addTypeTests(case_insensitive_map.CaseInsensitiveMap, _is_CaseInsensitiveMap_default);
  chunked_coding.ChunkedCodingCodec = class ChunkedCodingCodec extends convert.Codec$(core.List$(core.int), core.List$(core.int)) {
    get encoder() {
      return encoder.chunkedCodingEncoder;
    }
    get decoder() {
      return decoder.chunkedCodingDecoder;
    }
    static ['_#_#tearOff']() {
      return new chunked_coding.ChunkedCodingCodec.__();
    }
  };
  (chunked_coding.ChunkedCodingCodec.__ = function() {
    chunked_coding.ChunkedCodingCodec.__proto__.new.call(this);
    ;
  }).prototype = chunked_coding.ChunkedCodingCodec.prototype;
  dart.addTypeTests(chunked_coding.ChunkedCodingCodec);
  dart.addTypeCaches(chunked_coding.ChunkedCodingCodec);
  dart.setGetterSignature(chunked_coding.ChunkedCodingCodec, () => ({
    __proto__: dart.getGetters(chunked_coding.ChunkedCodingCodec.__proto__),
    encoder: encoder.ChunkedCodingEncoder,
    decoder: decoder.ChunkedCodingDecoder
  }));
  dart.setLibraryUri(chunked_coding.ChunkedCodingCodec, I[21]);
  dart.defineLazy(chunked_coding, {
    /*chunked_coding.chunkedCoding*/get chunkedCoding() {
      return C[30] || CT.C30;
    }
  }, false);
  http_date.formatHttpDate = function formatHttpDate(date) {
    let t11;
    date = date.toUtc();
    let buffer = (t11 = new core.StringBuffer.new(), (() => {
      t11.write(http_date._weekdays[$_get](date.weekday - 1));
      t11.write(", ");
      t11.write(date.day <= 9 ? "0" : "");
      t11.write(date.day[$toString]());
      t11.write(" ");
      t11.write(http_date._months[$_get](date.month - 1));
      t11.write(" ");
      t11.write(date.year[$toString]());
      t11.write(date.hour <= 9 ? " 0" : " ");
      t11.write(date.hour[$toString]());
      t11.write(date.minute <= 9 ? ":0" : ":");
      t11.write(date.minute[$toString]());
      t11.write(date.second <= 9 ? ":0" : ":");
      t11.write(date.second[$toString]());
      t11.write(" GMT");
      return t11;
    })());
    return buffer.toString();
  };
  http_date.parseHttpDate = function parseHttpDate(date) {
    return utils$.wrapFormatException(core.DateTime, "HTTP date", date, dart.fn(() => {
      let scanner = new string_scanner.StringScanner.new(date);
      if (scanner.scan(http_date._longWeekdayRegExp)) {
        scanner.expect(", ");
        let day = http_date._parseInt(scanner, 2);
        scanner.expect("-");
        let month = http_date._parseMonth(scanner);
        scanner.expect("-");
        let year = 1900 + http_date._parseInt(scanner, 2);
        scanner.expect(" ");
        let time = http_date._parseTime(scanner);
        scanner.expect(" GMT");
        scanner.expectDone();
        return http_date._makeDateTime(year, month, day, time);
      }
      scanner.expect(http_date._shortWeekdayRegExp);
      if (scanner.scan(", ")) {
        let day = http_date._parseInt(scanner, 2);
        scanner.expect(" ");
        let month = http_date._parseMonth(scanner);
        scanner.expect(" ");
        let year = http_date._parseInt(scanner, 4);
        scanner.expect(" ");
        let time = http_date._parseTime(scanner);
        scanner.expect(" GMT");
        scanner.expectDone();
        return http_date._makeDateTime(year, month, day, time);
      }
      scanner.expect(" ");
      let month = http_date._parseMonth(scanner);
      scanner.expect(" ");
      let day = scanner.scan(" ") ? http_date._parseInt(scanner, 1) : http_date._parseInt(scanner, 2);
      scanner.expect(" ");
      let time = http_date._parseTime(scanner);
      scanner.expect(" ");
      let year = http_date._parseInt(scanner, 4);
      scanner.expectDone();
      return http_date._makeDateTime(year, month, day, time);
    }, T$.VoidToDateTime()));
  };
  http_date._parseMonth = function _parseMonth(scanner) {
    scanner.expect(http_date._monthRegExp);
    return http_date._months[$indexOf](dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))) + 1;
  };
  http_date._parseInt = function _parseInt(scanner, digits) {
    scanner.expect(http_date._digitRegExp);
    if (dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)).length !== digits) {
      scanner.error("expected a " + dart.str(digits) + "-digit number.");
    }
    return core.int.parse(dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));
  };
  http_date._parseTime = function _parseTime(scanner) {
    let hours = http_date._parseInt(scanner, 2);
    if (hours >= 24) scanner.error("hours may not be greater than 24.");
    scanner.expect(":");
    let minutes = http_date._parseInt(scanner, 2);
    if (minutes >= 60) scanner.error("minutes may not be greater than 60.");
    scanner.expect(":");
    let seconds = http_date._parseInt(scanner, 2);
    if (seconds >= 60) scanner.error("seconds may not be greater than 60.");
    return new core.DateTime.new(1, 1, 1, hours, minutes, seconds);
  };
  http_date._makeDateTime = function _makeDateTime(year, month, day, time) {
    let dateTime = new core.DateTime.utc(year, month, day, time.hour, time.minute, time.second);
    if (dateTime.month !== month) {
      dart.throw(new core.FormatException.new("invalid day '" + dart.str(day) + "' for month '" + dart.str(month) + "'."));
    }
    return dateTime;
  };
  dart.defineLazy(http_date, {
    /*http_date._weekdays*/get _weekdays() {
      return C[31] || CT.C31;
    },
    /*http_date._months*/get _months() {
      return C[32] || CT.C32;
    },
    /*http_date._shortWeekdayRegExp*/get _shortWeekdayRegExp() {
      return core.RegExp.new("Mon|Tue|Wed|Thu|Fri|Sat|Sun");
    },
    /*http_date._longWeekdayRegExp*/get _longWeekdayRegExp() {
      return core.RegExp.new("Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday");
    },
    /*http_date._monthRegExp*/get _monthRegExp() {
      return core.RegExp.new("Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec");
    },
    /*http_date._digitRegExp*/get _digitRegExp() {
      return core.RegExp.new("\\d+");
    }
  }, false);
  var type$ = dart.privateName(media_type, "MediaType.type");
  var subtype$ = dart.privateName(media_type, "MediaType.subtype");
  var parameters$0 = dart.privateName(media_type, "MediaType.parameters");
  media_type.MediaType = class MediaType extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get subtype() {
      return this[subtype$];
    }
    set subtype(value) {
      super.subtype = value;
    }
    get parameters() {
      return this[parameters$0];
    }
    set parameters(value) {
      super.parameters = value;
    }
    get mimeType() {
      return this.type + "/" + this.subtype;
    }
    static parse(mediaType) {
      return utils$.wrapFormatException(media_type.MediaType, "media type", mediaType, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(mediaType);
        scanner.scan(scan.whitespace);
        scanner.expect(scan.token);
        let type = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
        scanner.expect("/");
        scanner.expect(scan.token);
        let subtype = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
        scanner.scan(scan.whitespace);
        let parameters = new (T$.IdentityMapOfString$String()).new();
        while (scanner.scan(";")) {
          scanner.scan(scan.whitespace);
          scanner.expect(scan.token);
          let attribute = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
          scanner.expect("=");
          let value = null;
          if (scanner.scan(scan.token)) {
            value = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
          } else {
            value = scan.expectQuotedString(scanner);
          }
          scanner.scan(scan.whitespace);
          parameters[$_set](attribute, value);
        }
        scanner.expectDone();
        return new media_type.MediaType.new(type, subtype, parameters);
      }, T$.VoidToMediaType()));
    }
    static ['_#parse#tearOff'](mediaType) {
      return media_type.MediaType.parse(mediaType);
    }
    static ['_#new#tearOff'](type, subtype, parameters = null) {
      return new media_type.MediaType.new(type, subtype, parameters);
    }
    change(opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      let subtype = opts && 'subtype' in opts ? opts.subtype : null;
      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      let clearParameters = opts && 'clearParameters' in opts ? opts.clearParameters : false;
      if (mimeType != null) {
        if (type != null) {
          dart.throw(new core.ArgumentError.new("You may not pass both [type] and [mimeType]."));
        } else if (subtype != null) {
          dart.throw(new core.ArgumentError.new("You may not pass both [subtype] and " + "[mimeType]."));
        }
        let segments = mimeType[$split]("/");
        if (segments[$length] !== 2) {
          dart.throw(new core.FormatException.new("Invalid mime type \"" + dart.str(mimeType) + "\"."));
        }
        type = segments[$_get](0);
        subtype = segments[$_get](1);
      }
      type == null ? type = this.type : null;
      subtype == null ? subtype = this.subtype : null;
      parameters == null ? parameters = new (T$.IdentityMapOfString$String()).new() : null;
      if (!clearParameters) {
        let newParameters = parameters;
        parameters = T$.LinkedHashMapOfString$String().from(this.parameters);
        parameters[$addAll](newParameters);
      }
      return new media_type.MediaType.new(type, subtype, parameters);
    }
    toString() {
      let t11;
      let buffer = (t11 = new core.StringBuffer.new(), (() => {
        t11.write(this.type);
        t11.write("/");
        t11.write(this.subtype);
        return t11;
      })());
      this.parameters[$forEach](dart.fn((attribute, value) => {
        let t11;
        buffer.write("; " + attribute + "=");
        if (scan.nonToken.hasMatch(value)) {
          t11 = buffer;
          (() => {
            t11.write("\"");
            t11.write(value[$replaceAllMapped](media_type._escapedChar, dart.fn(match => "\\" + dart.str(match._get(0)), T$.MatchToString())));
            t11.write("\"");
            return t11;
          })();
        } else {
          buffer.write(value);
        }
      }, T$.StringAndStringTovoid()));
      return buffer.toString();
    }
  };
  (media_type.MediaType.new = function(type, subtype, parameters = null) {
    this[type$] = type[$toLowerCase]();
    this[subtype$] = subtype[$toLowerCase]();
    this[parameters$0] = new (T$.UnmodifiableMapViewOfString$String()).new(parameters == null ? new (T$.IdentityMapOfString$String()).new() : new (T$.CaseInsensitiveMapOfString()).from(parameters));
    ;
  }).prototype = media_type.MediaType.prototype;
  dart.addTypeTests(media_type.MediaType);
  dart.addTypeCaches(media_type.MediaType);
  dart.setMethodSignature(media_type.MediaType, () => ({
    __proto__: dart.getMethods(media_type.MediaType.__proto__),
    change: dart.fnType(media_type.MediaType, [], {clearParameters: core.bool, mimeType: dart.nullable(core.String), parameters: dart.nullable(core.Map$(core.String, core.String)), subtype: dart.nullable(core.String), type: dart.nullable(core.String)}, {})
  }));
  dart.setStaticMethodSignature(media_type.MediaType, () => ['parse']);
  dart.setGetterSignature(media_type.MediaType, () => ({
    __proto__: dart.getGetters(media_type.MediaType.__proto__),
    mimeType: core.String
  }));
  dart.setLibraryUri(media_type.MediaType, I[22]);
  dart.setFieldSignature(media_type.MediaType, () => ({
    __proto__: dart.getFields(media_type.MediaType.__proto__),
    type: dart.finalFieldType(core.String),
    subtype: dart.finalFieldType(core.String),
    parameters: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  dart.defineExtensionMethods(media_type.MediaType, ['toString']);
  dart.defineLazy(media_type, {
    /*media_type._escapedChar*/get _escapedChar() {
      return core.RegExp.new("[\"\\x00-\\x1F\\x7F]");
    }
  }, false);
  scan.parseList = function parseList(T, scanner, parseElement) {
    let result = _interceptors.JSArray$(T).of([]);
    while (scanner.scan(",")) {
      scanner.scan(scan.whitespace);
    }
    result[$add](parseElement());
    scanner.scan(scan.whitespace);
    while (scanner.scan(",")) {
      scanner.scan(scan.whitespace);
      if (scanner.matches(",") || scanner.isDone) continue;
      result[$add](parseElement());
      scanner.scan(scan.whitespace);
    }
    return result;
  };
  scan.expectQuotedString = function expectQuotedString(scanner, opts) {
    let name = opts && 'name' in opts ? opts.name : "quoted string";
    scanner.expect(scan._quotedString, {name: name});
    let string = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
    return string[$substring](1, string.length - 1)[$replaceAllMapped](scan._quotedPair, dart.fn(match => dart.nullCheck(match._get(1)), T$.MatchToString()));
  };
  dart.defineLazy(scan, {
    /*scan.token*/get token() {
      return core.RegExp.new("[^()<>@,;:\"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+");
    },
    /*scan._lws*/get _lws() {
      return core.RegExp.new("(?:\\r\\n)?[ \\t]+");
    },
    /*scan._quotedString*/get _quotedString() {
      return core.RegExp.new("\"(?:[^\"\\x00-\\x1F\\x7F]|\\\\.)*\"");
    },
    /*scan._quotedPair*/get _quotedPair() {
      return core.RegExp.new("\\\\(.)");
    },
    /*scan.nonToken*/get nonToken() {
      return core.RegExp.new("[()<>@,;:\"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]");
    },
    /*scan.whitespace*/get whitespace() {
      return core.RegExp.new("(?:" + scan._lws.pattern + ")*");
    }
  }, false);
  utils$.wrapFormatException = function wrapFormatException(T, name, value, body) {
    try {
      return body();
    } catch (e) {
      let ex = dart.getThrown(e);
      if (span_exception.SourceSpanFormatException.is(ex)) {
        let error = ex;
        dart.throw(new span_exception.SourceSpanFormatException.new("Invalid " + name + ": " + error.message, error.span, error.source));
      } else if (core.FormatException.is(ex)) {
        let error = ex;
        dart.throw(new core.FormatException.new("Invalid " + name + " \"" + value + "\": " + error.message, error.source, error.offset));
      } else
        throw e;
    }
  };
  var _decode = dart.privateName(decoder, "_decode");
  var _state$ = dart.privateName(decoder, "_state");
  decoder.ChunkedCodingDecoder = class ChunkedCodingDecoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    static ['_#_#tearOff']() {
      return new decoder.ChunkedCodingDecoder.__();
    }
    convert(input) {
      T$.ListOfint().as(input);
      let sink = new decoder._Sink.new(T$.StreamControllerOfListOfint().new());
      let output = sink[_decode](input, 0, input[$length]);
      if (sink[_state$][$_equals](decoder._State.end)) return output;
      dart.throw(new core.FormatException.new("Input ended unexpectedly.", input, input[$length]));
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfint().as(sink);
      return new decoder._Sink.new(sink);
    }
  };
  (decoder.ChunkedCodingDecoder.__ = function() {
    decoder.ChunkedCodingDecoder.__proto__.new.call(this);
    ;
  }).prototype = decoder.ChunkedCodingDecoder.prototype;
  dart.addTypeTests(decoder.ChunkedCodingDecoder);
  dart.addTypeCaches(decoder.ChunkedCodingDecoder);
  dart.setMethodSignature(decoder.ChunkedCodingDecoder, () => ({
    __proto__: dart.getMethods(decoder.ChunkedCodingDecoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(decoder.ChunkedCodingDecoder, I[23]);
  var ___Sink__size = dart.privateName(decoder, "_#_Sink#_size");
  var _sink$ = dart.privateName(decoder, "_sink");
  var _size = dart.privateName(decoder, "_size");
  var _close = dart.privateName(decoder, "_close");
  var _digitForByte = dart.privateName(decoder, "_digitForByte");
  var _State__name = dart.privateName(decoder, "_State._name");
  decoder._Sink = class _Sink extends convert.ByteConversionSinkBase {
    get [_size]() {
      let t13;
      t13 = this[___Sink__size];
      return t13 == null ? dart.throw(new _internal.LateError.fieldNI("_size")) : t13;
    }
    set [_size](_size$35param) {
      this[___Sink__size] = _size$35param;
    }
    static ['_#new#tearOff'](_sink) {
      return new decoder._Sink.new(_sink);
    }
    add(chunk) {
      T$.ListOfint().as(chunk);
      return this.addSlice(chunk, 0, chunk[$length], false);
    }
    addSlice(chunk, start, end, isLast) {
      core.RangeError.checkValidRange(start, end, chunk[$length]);
      let output = this[_decode](chunk, start, end);
      if (output[$isNotEmpty]) this[_sink$].add(output);
      if (isLast) this[_close](chunk, end);
    }
    close() {
      return this[_close]();
    }
    [_close](chunk = null, index = null) {
      if (!this[_state$][$_equals](decoder._State.end)) {
        dart.throw(new core.FormatException.new("Input ended unexpectedly.", chunk, index));
      }
      this[_sink$].close();
    }
    [_decode](bytes, start, end) {
      function assertCurrentChar(char, name) {
        if (bytes[$_get](start) !== char) {
          dart.throw(new core.FormatException.new("Expected " + name + ".", bytes, start));
        }
      }
      dart.fn(assertCurrentChar, T$.intAndStringTovoid());
      let buffer = new typed_buffer.Uint8Buffer.new();
      while (start !== end) {
        switch (this[_state$]) {
          case C[33] || CT.C33:
            {
              this[_size] = this[_digitForByte](bytes, start);
              this[_state$] = decoder._State.size;
              start = start + 1;
              break;
            }
          case C[34] || CT.C34:
            {
              if (bytes[$_get](start) === 13) {
                this[_state$] = decoder._State.sizeBeforeLF;
              } else {
                this[_size] = (this[_size] << 4 >>> 0) + this[_digitForByte](bytes, start);
              }
              start = start + 1;
              break;
            }
          case C[35] || CT.C35:
            {
              assertCurrentChar(10, "LF");
              this[_state$] = this[_size] === 0 ? decoder._State.endBeforeCR : decoder._State.body;
              start = start + 1;
              break;
            }
          case C[36] || CT.C36:
            {
              let chunkEnd = math.min(core.int, end, start + this[_size]);
              buffer.addAll(bytes, start, chunkEnd);
              this[_size] = this[_size] - (chunkEnd - start);
              start = chunkEnd;
              if (this[_size] === 0) this[_state$] = decoder._State.bodyBeforeCR;
              break;
            }
          case C[37] || CT.C37:
            {
              assertCurrentChar(13, "CR");
              this[_state$] = decoder._State.bodyBeforeLF;
              start = start + 1;
              break;
            }
          case C[38] || CT.C38:
            {
              assertCurrentChar(10, "LF");
              this[_state$] = decoder._State.boundary;
              start = start + 1;
              break;
            }
          case C[39] || CT.C39:
            {
              assertCurrentChar(13, "CR");
              this[_state$] = decoder._State.endBeforeLF;
              start = start + 1;
              break;
            }
          case C[40] || CT.C40:
            {
              assertCurrentChar(10, "LF");
              this[_state$] = decoder._State.end;
              start = start + 1;
              break;
            }
          case C[41] || CT.C41:
            {
              dart.throw(new core.FormatException.new("Expected no more data.", bytes, start));
            }
        }
      }
      return buffer.buffer[$asUint8List](0, buffer.length);
    }
    [_digitForByte](bytes, index) {
      let byte = bytes[$_get](index);
      let digit = (48 ^ byte) >>> 0;
      if (digit <= 9) {
        if (digit >= 0) return digit;
      } else {
        let letter = (32 | byte) >>> 0;
        if (97 <= letter && letter <= 102) return letter - 97 + 10;
      }
      dart.throw(new core.FormatException.new("Invalid hexadecimal byte 0x" + byte[$toRadixString](16)[$toUpperCase]() + ".", bytes, index));
    }
  };
  (decoder._Sink.new = function(_sink) {
    this[_state$] = decoder._State.boundary;
    this[___Sink__size] = null;
    this[_sink$] = _sink;
    decoder._Sink.__proto__.new.call(this);
    ;
  }).prototype = decoder._Sink.prototype;
  dart.addTypeTests(decoder._Sink);
  dart.addTypeCaches(decoder._Sink);
  dart.setMethodSignature(decoder._Sink, () => ({
    __proto__: dart.getMethods(decoder._Sink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, []),
    [_close]: dart.fnType(dart.void, [], [dart.nullable(core.List$(core.int)), dart.nullable(core.int)]),
    [_decode]: dart.fnType(typed_data.Uint8List, [core.List$(core.int), core.int, core.int]),
    [_digitForByte]: dart.fnType(core.int, [core.List$(core.int), core.int])
  }));
  dart.setGetterSignature(decoder._Sink, () => ({
    __proto__: dart.getGetters(decoder._Sink.__proto__),
    [_size]: core.int
  }));
  dart.setSetterSignature(decoder._Sink, () => ({
    __proto__: dart.getSetters(decoder._Sink.__proto__),
    [_size]: core.int
  }));
  dart.setLibraryUri(decoder._Sink, I[23]);
  dart.setFieldSignature(decoder._Sink, () => ({
    __proto__: dart.getFields(decoder._Sink.__proto__),
    [_sink$]: dart.finalFieldType(core.Sink$(core.List$(core.int))),
    [_state$]: dart.fieldType(decoder._State),
    [___Sink__size]: dart.fieldType(dart.nullable(core.int))
  }));
  var _name = dart.privateName(decoder, "_name");
  const _name$ = _State__name;
  decoder._State = class _State extends core.Object {
    get [_name]() {
      return this[_name$];
    }
    set [_name](value) {
      super[_name] = value;
    }
    static ['_#_#tearOff'](_name) {
      return new decoder._State.__(_name);
    }
    toString() {
      return this[_name];
    }
  };
  (decoder._State.__ = function(_name) {
    this[_name$] = _name;
    ;
  }).prototype = decoder._State.prototype;
  dart.addTypeTests(decoder._State);
  dart.addTypeCaches(decoder._State);
  dart.setLibraryUri(decoder._State, I[23]);
  dart.setFieldSignature(decoder._State, () => ({
    __proto__: dart.getFields(decoder._State.__proto__),
    [_name]: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(decoder._State, () => ['boundary', 'size', 'sizeBeforeLF', 'body', 'bodyBeforeCR', 'bodyBeforeLF', 'endBeforeCR', 'endBeforeLF', 'end']);
  dart.defineExtensionMethods(decoder._State, ['toString']);
  dart.defineLazy(decoder._State, {
    /*decoder._State.boundary*/get boundary() {
      return C[33] || CT.C33;
    },
    /*decoder._State.size*/get size() {
      return C[34] || CT.C34;
    },
    /*decoder._State.sizeBeforeLF*/get sizeBeforeLF() {
      return C[35] || CT.C35;
    },
    /*decoder._State.body*/get body() {
      return C[36] || CT.C36;
    },
    /*decoder._State.bodyBeforeCR*/get bodyBeforeCR() {
      return C[37] || CT.C37;
    },
    /*decoder._State.bodyBeforeLF*/get bodyBeforeLF() {
      return C[38] || CT.C38;
    },
    /*decoder._State.endBeforeCR*/get endBeforeCR() {
      return C[39] || CT.C39;
    },
    /*decoder._State.endBeforeLF*/get endBeforeLF() {
      return C[40] || CT.C40;
    },
    /*decoder._State.end*/get end() {
      return C[41] || CT.C41;
    }
  }, false);
  dart.defineLazy(decoder, {
    /*decoder.chunkedCodingDecoder*/get chunkedCodingDecoder() {
      return C[42] || CT.C42;
    }
  }, false);
  encoder.ChunkedCodingEncoder = class ChunkedCodingEncoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    static ['_#_#tearOff']() {
      return new encoder.ChunkedCodingEncoder.__();
    }
    convert(input) {
      T$.ListOfint().as(input);
      return encoder._convert(input, 0, input[$length], {isLast: true});
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfint().as(sink);
      return new encoder._Sink.new(sink);
    }
  };
  (encoder.ChunkedCodingEncoder.__ = function() {
    encoder.ChunkedCodingEncoder.__proto__.new.call(this);
    ;
  }).prototype = encoder.ChunkedCodingEncoder.prototype;
  dart.addTypeTests(encoder.ChunkedCodingEncoder);
  dart.addTypeCaches(encoder.ChunkedCodingEncoder);
  dart.setMethodSignature(encoder.ChunkedCodingEncoder, () => ({
    __proto__: dart.getMethods(encoder.ChunkedCodingEncoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(encoder.ChunkedCodingEncoder, I[24]);
  var _sink$0 = dart.privateName(encoder, "_sink");
  encoder._Sink = class _Sink extends convert.ByteConversionSinkBase {
    static ['_#new#tearOff'](_sink) {
      return new encoder._Sink.new(_sink);
    }
    add(chunk) {
      T$.ListOfint().as(chunk);
      this[_sink$0].add(encoder._convert(chunk, 0, chunk[$length]));
    }
    addSlice(chunk, start, end, isLast) {
      core.RangeError.checkValidRange(start, end, chunk[$length]);
      this[_sink$0].add(encoder._convert(chunk, start, end, {isLast: isLast}));
      if (isLast) this[_sink$0].close();
    }
    close() {
      this[_sink$0].add(encoder._doneChunk);
      this[_sink$0].close();
    }
  };
  (encoder._Sink.new = function(_sink) {
    this[_sink$0] = _sink;
    encoder._Sink.__proto__.new.call(this);
    ;
  }).prototype = encoder._Sink.prototype;
  dart.addTypeTests(encoder._Sink);
  dart.addTypeCaches(encoder._Sink);
  dart.setMethodSignature(encoder._Sink, () => ({
    __proto__: dart.getMethods(encoder._Sink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(encoder._Sink, I[24]);
  dart.setFieldSignature(encoder._Sink, () => ({
    __proto__: dart.getFields(encoder._Sink.__proto__),
    [_sink$0]: dart.finalFieldType(core.Sink$(core.List$(core.int)))
  }));
  encoder._convert = function _convert(bytes, start, end, opts) {
    let t13, t13$, t13$0, t13$1;
    let isLast = opts && 'isLast' in opts ? opts.isLast : false;
    if (end === start) return isLast ? encoder._doneChunk : C[43] || CT.C43;
    let size = end - start;
    let sizeInHex = size[$toRadixString](16);
    let footerSize = isLast ? encoder._doneChunk[$length] : 0;
    let list = _native_typed_data.NativeUint8List.new(sizeInHex.length + 4 + size + footerSize);
    list[$setRange](0, sizeInHex.length, sizeInHex[$codeUnits]);
    let cursor = sizeInHex.length;
    list[$_set]((t13 = cursor, cursor = t13 + 1, t13), 13);
    list[$_set]((t13$ = cursor, cursor = t13$ + 1, t13$), 10);
    list[$setRange](cursor, cursor + end - start, bytes, start);
    cursor = cursor + (end - start);
    list[$_set]((t13$0 = cursor, cursor = t13$0 + 1, t13$0), 13);
    list[$_set]((t13$1 = cursor, cursor = t13$1 + 1, t13$1), 10);
    if (isLast) {
      list[$setRange](list[$length] - footerSize, list[$length], encoder._doneChunk);
    }
    return list;
  };
  dart.defineLazy(encoder, {
    /*encoder.chunkedCodingEncoder*/get chunkedCodingEncoder() {
      return C[44] || CT.C44;
    },
    /*encoder._doneChunk*/get _doneChunk() {
      return _native_typed_data.NativeUint8List.fromList(T$.JSArrayOfint().of([48, 13, 10, 13, 10]));
    }
  }, false);
  dart.defineLazy(charcodes, {
    /*charcodes.$lf*/get $lf() {
      return 10;
    },
    /*charcodes.$cr*/get $cr() {
      return 13;
    },
    /*charcodes.$0*/get $0() {
      return 48;
    },
    /*charcodes.$1*/get $1() {
      return 49;
    },
    /*charcodes.$3*/get $3() {
      return 51;
    },
    /*charcodes.$4*/get $4() {
      return 52;
    },
    /*charcodes.$7*/get $7() {
      return 55;
    },
    /*charcodes.$A*/get $A() {
      return 65;
    },
    /*charcodes.$q*/get $q() {
      return 113;
    },
    /*charcodes.$a*/get $a() {
      return 97;
    },
    /*charcodes.$f*/get $f() {
      return 102;
    }
  }, false);
  var _table = dart.privateName(typed_queue, "_TypedQueue._table");
  var _head = dart.privateName(typed_queue, "_TypedQueue._head");
  var _tail = dart.privateName(typed_queue, "_TypedQueue._tail");
  var _table$ = dart.privateName(typed_queue, "_table");
  var _head$ = dart.privateName(typed_queue, "_head");
  var _tail$ = dart.privateName(typed_queue, "_tail");
  var _createBuffer = dart.privateName(typed_queue, "_createBuffer");
  var _createList = dart.privateName(typed_queue, "_createList");
  var _writeToList = dart.privateName(typed_queue, "_writeToList");
  var _growAtCapacity = dart.privateName(typed_queue, "_growAtCapacity");
  var _growTo = dart.privateName(typed_queue, "_growTo");
  var _defaultValue = dart.privateName(typed_queue, "_defaultValue");
  const _is__TypedQueue_default = Symbol('_is__TypedQueue_default');
  typed_queue._TypedQueue$ = dart.generic((E, L) => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$ListOfE = () => (__t$ListOfE = dart.constFn(core.List$(E)))();
    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();
    const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));
    class _TypedQueue extends Object_ListMixin$36 {
      get [_table$]() {
        return this[_table];
      }
      set [_table$](value) {
        this[_table] = value;
      }
      get [_head$]() {
        return this[_head];
      }
      set [_head$](value) {
        this[_head] = value;
      }
      get [_tail$]() {
        return this[_tail];
      }
      set [_tail$](value) {
        this[_tail] = value;
      }
      get length() {
        return (this[_tail$] - this[_head$] & this[_table$][$length] - 1) >>> 0;
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        let list = growable ? this[_createBuffer](this.length) : this[_createList](this.length);
        this[_writeToList](list);
        return list;
      }
      cast(T) {
        if (queue_list.QueueList$(T).is(this)) return queue_list.QueueList$(T).as(this);
        dart.throw(new core.UnsupportedError.new(dart.str(this) + " cannot be cast to the desired type."));
      }
      retype(T) {
        return this.cast(T);
      }
      addLast(value) {
        E.as(value);
        this[_table$][$_set](this[_tail$], value);
        this[_tail$] = (this[_tail$] + 1 & this[_table$][$length] - 1) >>> 0;
        if (this[_head$] === this[_tail$]) this[_growAtCapacity]();
      }
      addFirst(value) {
        E.as(value);
        this[_head$] = (this[_head$] - 1 & this[_table$][$length] - 1) >>> 0;
        this[_table$][$_set](this[_head$], value);
        if (this[_head$] === this[_tail$]) this[_growAtCapacity]();
      }
      removeFirst() {
        if (this[_head$] === this[_tail$]) dart.throw(new core.StateError.new("No element"));
        let result = this[_table$][$_get](this[_head$]);
        this[_head$] = (this[_head$] + 1 & this[_table$][$length] - 1) >>> 0;
        return result;
      }
      removeLast() {
        if (this[_head$] === this[_tail$]) dart.throw(new core.StateError.new("No element"));
        this[_tail$] = (this[_tail$] - 1 & this[_table$][$length] - 1) >>> 0;
        return this[_table$][$_get](this[_tail$]);
      }
      add(value) {
        E.as(value);
        return this.addLast(value);
      }
      set length(value) {
        core.RangeError.checkNotNegative(value, "length");
        let delta = value - this.length;
        if (delta >= 0) {
          let needsToGrow = this[_table$][$length] <= value;
          if (needsToGrow) this[_growTo](value);
          this[_tail$] = (this[_tail$] + delta & this[_table$][$length] - 1) >>> 0;
          if (!needsToGrow) this.fillRange(value - delta, value, this[_defaultValue]);
        } else {
          this.removeRange(value, this.length);
        }
      }
      _get(index) {
        core.RangeError.checkValidIndex(index, this, null, this.length);
        return this[_table$][$_get]((this[_head$] + index & this[_table$][$length] - 1) >>> 0);
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        core.RangeError.checkValidIndex(index, this);
        this[_table$][$_set]((this[_head$] + index & this[_table$][$length] - 1) >>> 0, value);
        return value$;
      }
      removeRange(start, end) {
        let length = this.length;
        core.RangeError.checkValidRange(start, end, length);
        if (start === 0) {
          this[_head$] = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;
          return;
        }
        let elementsAfter = length - end;
        if (elementsAfter === 0) {
          this[_tail$] = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;
          return;
        }
        let removedElements = end - start;
        if (start < elementsAfter) {
          this.setRange(removedElements, end, this);
          this[_head$] = (this[_head$] + removedElements & this[_table$][$length] - 1) >>> 0;
        } else {
          this.setRange(start, length - removedElements, this, end);
          this[_tail$] = (this[_tail$] - removedElements & this[_table$][$length] - 1) >>> 0;
        }
      }
      setRange(start, end, iterable, skipCount = 0) {
        __t$IterableOfE().as(iterable);
        core.RangeError.checkValidRange(start, end, this.length);
        if (start === end) return;
        let targetStart = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;
        let targetEnd = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;
        let targetIsContiguous = targetStart < targetEnd;
        if (iterable === this) {
          let sourceStart = (this[_head$] + skipCount & this[_table$][$length] - 1) >>> 0;
          let sourceEnd = (sourceStart + (end - start) & this[_table$][$length] - 1) >>> 0;
          if (sourceStart === targetStart) return;
          let sourceIsContiguous = sourceStart < sourceEnd;
          if (targetIsContiguous && sourceIsContiguous) {
            this[_table$][$setRange](targetStart, targetEnd, this[_table$], sourceStart);
          } else if (!targetIsContiguous && !sourceIsContiguous) {
            if (sourceStart > targetStart) {
              let startGap = sourceStart - targetStart;
              let firstEnd = this[_table$][$length] - startGap;
              this[_table$][$setRange](targetStart, firstEnd, this[_table$], sourceStart);
              this[_table$][$setRange](firstEnd, this[_table$][$length], this[_table$]);
              this[_table$][$setRange](0, targetEnd, this[_table$], startGap);
            } else if (sourceEnd < targetEnd) {
              let firstStart = targetEnd - sourceEnd;
              this[_table$][$setRange](firstStart, targetEnd, this[_table$]);
              this[_table$][$setRange](0, firstStart, this[_table$], this[_table$][$length] - firstStart);
              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);
            }
          } else if (sourceStart < targetEnd) {
            if (sourceIsContiguous) {
              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);
              this[_table$][$setRange](0, targetEnd, this[_table$], sourceStart + (this[_table$][$length] - targetStart));
            } else {
              let firstEnd = this[_table$][$length] - sourceStart;
              this[_table$][$setRange](targetStart, firstEnd, this[_table$], sourceStart);
              this[_table$][$setRange](firstEnd, targetEnd, this[_table$]);
            }
          } else {
            if (sourceIsContiguous) {
              this[_table$][$setRange](0, targetEnd, this[_table$], sourceStart + (this[_table$][$length] - targetStart));
              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);
            } else {
              let firstStart = targetEnd - sourceEnd;
              this[_table$][$setRange](firstStart, targetEnd, this[_table$]);
              this[_table$][$setRange](targetStart, firstStart, this[_table$], sourceStart);
            }
          }
        } else if (targetIsContiguous) {
          this[_table$][$setRange](targetStart, targetEnd, iterable, skipCount);
        } else if (__t$ListOfE().is(iterable)) {
          this[_table$][$setRange](targetStart, this[_table$][$length], iterable, skipCount);
          this[_table$][$setRange](0, targetEnd, iterable, skipCount + (this[_table$][$length] - targetStart));
        } else {
          super.setRange(start, end, iterable, skipCount);
        }
      }
      fillRange(start, end, value = null) {
        __t$EN().as(value);
        let startInTable = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;
        let endInTable = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;
        if (startInTable <= endInTable) {
          this[_table$][$fillRange](startInTable, endInTable, value);
        } else {
          this[_table$][$fillRange](startInTable, this[_table$][$length], value);
          this[_table$][$fillRange](0, endInTable, value);
        }
      }
      sublist(start, end = null) {
        let length = this.length;
        let nonNullEnd = core.RangeError.checkValidRange(start, end, length);
        let list = this[_createList](nonNullEnd - start);
        this[_writeToList](list, start, nonNullEnd);
        return list;
      }
      [_writeToList](target, start = null, end = null) {
        start == null ? start = 0 : null;
        end == null ? end = this.length : null;
        if (!(target[$length] >= dart.notNull(end) - dart.notNull(start))) dart.assertFailed(null, I[25], 278, 12, "target.length >= end - start");
        if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, I[25], 279, 12, "start <= end");
        let elementsToWrite = dart.notNull(end) - dart.notNull(start);
        let startInTable = (this[_head$] + dart.notNull(start) & this[_table$][$length] - 1) >>> 0;
        let endInTable = (this[_head$] + dart.notNull(end) & this[_table$][$length] - 1) >>> 0;
        if (startInTable <= endInTable) {
          target[$setRange](0, elementsToWrite, this[_table$], startInTable);
        } else {
          let firstPartSize = this[_table$][$length] - startInTable;
          target[$setRange](0, firstPartSize, this[_table$], startInTable);
          target[$setRange](firstPartSize, firstPartSize + endInTable, this[_table$], 0);
        }
        return elementsToWrite;
      }
      [_growAtCapacity]() {
        if (!(this[_head$] === this[_tail$])) dart.assertFailed(null, I[25], 297, 12, "_head == _tail");
        let newTable = this[_createList](this[_table$][$length] * 2);
        let partitionPoint = this[_table$][$length] - this[_head$];
        newTable[$setRange](0, partitionPoint, this[_table$], this[_head$]);
        if (partitionPoint !== this[_table$][$length]) {
          newTable[$setRange](partitionPoint, this[_table$][$length], this[_table$]);
        }
        this[_head$] = 0;
        this[_tail$] = this[_table$][$length];
        this[_table$] = newTable;
      }
      [_growTo](newElementCount) {
        if (!(newElementCount >= this.length)) dart.assertFailed(null, I[25], 316, 12, "newElementCount >= length");
        newElementCount = newElementCount + newElementCount[$rightShift](1);
        let newTable = this[_createList](typed_queue._nextPowerOf2(newElementCount));
        this[_tail$] = this[_writeToList](newTable);
        this[_table$] = newTable;
        this[_head$] = 0;
      }
    }
    (_TypedQueue.new = function(table) {
      this[_table] = L.as(table);
      this[_head] = 0;
      this[_tail] = 0;
      ;
    }).prototype = _TypedQueue.prototype;
    dart.addTypeTests(_TypedQueue);
    _TypedQueue.prototype[_is__TypedQueue_default] = true;
    dart.addTypeCaches(_TypedQueue);
    dart.setMethodSignature(_TypedQueue, () => ({
      __proto__: dart.getMethods(_TypedQueue.__proto__),
      cast: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      retype: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFirst: dart.fnType(E, []),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      sublist: dart.fnType(L, [core.int], [dart.nullable(core.int)]),
      [$sublist]: dart.fnType(L, [core.int], [dart.nullable(core.int)]),
      [_writeToList]: dart.fnType(core.int, [core.List$(E)], [dart.nullable(core.int), dart.nullable(core.int)]),
      [_growAtCapacity]: dart.fnType(dart.void, []),
      [_growTo]: dart.fnType(dart.void, [core.int])
    }));
    dart.setGetterSignature(_TypedQueue, () => ({
      __proto__: dart.getGetters(_TypedQueue.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setSetterSignature(_TypedQueue, () => ({
      __proto__: dart.getSetters(_TypedQueue.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(_TypedQueue, I[26]);
    dart.setFieldSignature(_TypedQueue, () => ({
      __proto__: dart.getFields(_TypedQueue.__proto__),
      [_table$]: dart.fieldType(L),
      [_head$]: dart.fieldType(core.int),
      [_tail$]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(_TypedQueue, [
      'toList',
      'cast',
      'removeLast',
      'add',
      '_get',
      '_set',
      'removeRange',
      'setRange',
      'fillRange',
      'sublist'
    ]);
    dart.defineExtensionAccessors(_TypedQueue, ['length']);
    return _TypedQueue;
  });
  typed_queue._TypedQueue = typed_queue._TypedQueue$();
  dart.addTypeTests(typed_queue._TypedQueue, _is__TypedQueue_default);
  const _is__IntQueue_default = Symbol('_is__IntQueue_default');
  typed_queue._IntQueue$ = dart.generic(L => {
    class _IntQueue extends typed_queue._TypedQueue$(core.int, L) {
      get [_defaultValue]() {
        return 0;
      }
    }
    (_IntQueue.new = function(queue) {
      _IntQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = _IntQueue.prototype;
    dart.addTypeTests(_IntQueue);
    _IntQueue.prototype[_is__IntQueue_default] = true;
    dart.addTypeCaches(_IntQueue);
    dart.setGetterSignature(_IntQueue, () => ({
      __proto__: dart.getGetters(_IntQueue.__proto__),
      [_defaultValue]: core.int
    }));
    dart.setLibraryUri(_IntQueue, I[26]);
    return _IntQueue;
  });
  typed_queue._IntQueue = typed_queue._IntQueue$();
  dart.addTypeTests(typed_queue._IntQueue, _is__IntQueue_default);
  const _is__FloatQueue_default = Symbol('_is__FloatQueue_default');
  typed_queue._FloatQueue$ = dart.generic(L => {
    class _FloatQueue extends typed_queue._TypedQueue$(core.double, L) {
      get [_defaultValue]() {
        return 0;
      }
    }
    (_FloatQueue.new = function(queue) {
      _FloatQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = _FloatQueue.prototype;
    dart.addTypeTests(_FloatQueue);
    _FloatQueue.prototype[_is__FloatQueue_default] = true;
    dart.addTypeCaches(_FloatQueue);
    dart.setGetterSignature(_FloatQueue, () => ({
      __proto__: dart.getGetters(_FloatQueue.__proto__),
      [_defaultValue]: core.double
    }));
    dart.setLibraryUri(_FloatQueue, I[26]);
    return _FloatQueue;
  });
  typed_queue._FloatQueue = typed_queue._FloatQueue$();
  dart.addTypeTests(typed_queue._FloatQueue, _is__FloatQueue_default);
  var _add = dart.privateName(typed_queue, "_add");
  var _add$ = dart.privateName(serialization, "_add");
  var _head$0 = dart.privateName(queue_list, "_head");
  var _writeToList$ = dart.privateName(queue_list, "_writeToList");
  var _grow = dart.privateName(typed_queue, "_grow");
  var _grow$ = dart.privateName(queue_list, "_grow");
  var _preGrow = dart.privateName(typed_queue, "_preGrow");
  var _preGrow$ = dart.privateName(queue_list, "_preGrow");
  var _table$0 = dart.privateName(queue_list, "_table");
  var _tail$0 = dart.privateName(queue_list, "_tail");
  var _head_ = dart.privateName(typed_queue, "_head=");
  var _table_ = dart.privateName(typed_queue, "_table=");
  var _tail_ = dart.privateName(typed_queue, "_tail=");
  typed_queue.Uint8Queue = class Uint8Queue extends typed_queue._IntQueue$(typed_data.Uint8List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint8Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t13;
      t13 = new typed_queue.Uint8Queue.new(elements[$length]);
      return (() => {
        t13.addAll(elements);
        return t13;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint8Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint8List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint8Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[45] || CT.C45, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[46] || CT.C46)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[47] || CT.C47, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[48] || CT.C48, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[49] || CT.C49, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[50] || CT.C50)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[51] || CT.C51)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[53] || CT.C53, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[54] || CT.C54, value)));
    }
  };
  (typed_queue.Uint8Queue.new = function(initialCapacity = null) {
    typed_queue.Uint8Queue.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint8Queue.prototype;
  dart.addTypeTests(typed_queue.Uint8Queue);
  dart.addTypeCaches(typed_queue.Uint8Queue);
  typed_queue.Uint8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint8Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint8List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint8Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint8Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint8Queue, I[26]);
  typed_queue.Int8Queue = class Int8Queue extends typed_queue._IntQueue$(typed_data.Int8List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int8Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t13;
      t13 = new typed_queue.Int8Queue.new(elements[$length]);
      return (() => {
        t13.addAll(elements);
        return t13;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int8Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeInt8List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int8Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[45] || CT.C45, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[46] || CT.C46)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[47] || CT.C47, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[48] || CT.C48, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[49] || CT.C49, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[50] || CT.C50)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[51] || CT.C51)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[53] || CT.C53, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[54] || CT.C54, value)));
    }
  };
  (typed_queue.Int8Queue.new = function(initialCapacity = null) {
    typed_queue.Int8Queue.__proto__.new.call(this, _native_typed_data.NativeInt8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int8Queue.prototype;
  dart.addTypeTests(typed_queue.Int8Queue);
  dart.addTypeCaches(typed_queue.Int8Queue);
  typed_queue.Int8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int8Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int8List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int8Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int8Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int8Queue, I[26]);
  typed_queue.Uint8ClampedQueue = class Uint8ClampedQueue extends typed_queue._IntQueue$(typed_data.Uint8ClampedList) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint8ClampedQueue.new(initialCapacity);
    }
    static fromList(elements) {
      let t13;
      t13 = new typed_queue.Uint8ClampedQueue.new(elements[$length]);
      return (() => {
        t13.addAll(elements);
        return t13;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint8ClampedQueue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint8ClampedList.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint8ClampedBuffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[45] || CT.C45, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[46] || CT.C46)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[47] || CT.C47, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[48] || CT.C48, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[49] || CT.C49, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[50] || CT.C50)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[51] || CT.C51)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[53] || CT.C53, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[54] || CT.C54, value)));
    }
  };
  (typed_queue.Uint8ClampedQueue.new = function(initialCapacity = null) {
    typed_queue.Uint8ClampedQueue.__proto__.new.call(this, _native_typed_data.NativeUint8ClampedList.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint8ClampedQueue.prototype;
  dart.addTypeTests(typed_queue.Uint8ClampedQueue);
  dart.addTypeCaches(typed_queue.Uint8ClampedQueue);
  typed_queue.Uint8ClampedQueue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint8ClampedQueue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint8ClampedList, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint8ClampedBuffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint8ClampedQueue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint8ClampedQueue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint8ClampedQueue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint8ClampedQueue, I[26]);
  typed_queue.Uint16Queue = class Uint16Queue extends typed_queue._IntQueue$(typed_data.Uint16List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint16Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t13;
      t13 = new typed_queue.Uint16Queue.new(elements[$length]);
      return (() => {
        t13.addAll(elements);
        return t13;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint16Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint16List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint16Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[45] || CT.C45, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[46] || CT.C46)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[47] || CT.C47, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[48] || CT.C48, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[49] || CT.C49, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[50] || CT.C50)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[51] || CT.C51)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[53] || CT.C53, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[54] || CT.C54, value)));
    }
  };
  (typed_queue.Uint16Queue.new = function(initialCapacity = null) {
    typed_queue.Uint16Queue.__proto__.new.call(this, _native_typed_data.NativeUint16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint16Queue.prototype;
  dart.addTypeTests(typed_queue.Uint16Queue);
  dart.addTypeCaches(typed_queue.Uint16Queue);
  typed_queue.Uint16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint16Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint16List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint16Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint16Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint16Queue, I[26]);
  typed_queue.Int16Queue = class Int16Queue extends typed_queue._IntQueue$(typed_data.Int16List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int16Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t13;
      t13 = new typed_queue.Int16Queue.new(elements[$length]);
      return (() => {
        t13.addAll(elements);
        return t13;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int16Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeInt16List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int16Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[45] || CT.C45, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[46] || CT.C46)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[47] || CT.C47, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[48] || CT.C48, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[49] || CT.C49, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[50] || CT.C50)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[51] || CT.C51)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[53] || CT.C53, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[54] || CT.C54, value)));
    }
  };
  (typed_queue.Int16Queue.new = function(initialCapacity = null) {
    typed_queue.Int16Queue.__proto__.new.call(this, _native_typed_data.NativeInt16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int16Queue.prototype;
  dart.addTypeTests(typed_queue.Int16Queue);
  dart.addTypeCaches(typed_queue.Int16Queue);
  typed_queue.Int16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int16Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int16List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int16Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int16Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int16Queue, I[26]);
  typed_queue.Uint32Queue = class Uint32Queue extends typed_queue._IntQueue$(typed_data.Uint32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t13;
      t13 = new typed_queue.Uint32Queue.new(elements[$length]);
      return (() => {
        t13.addAll(elements);
        return t13;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint32Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint32List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint32Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[45] || CT.C45, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[46] || CT.C46)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[47] || CT.C47, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[48] || CT.C48, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[49] || CT.C49, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[50] || CT.C50)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[51] || CT.C51)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[53] || CT.C53, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[54] || CT.C54, value)));
    }
  };
  (typed_queue.Uint32Queue.new = function(initialCapacity = null) {
    typed_queue.Uint32Queue.__proto__.new.call(this, _native_typed_data.NativeUint32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint32Queue.prototype;
  dart.addTypeTests(typed_queue.Uint32Queue);
  dart.addTypeCaches(typed_queue.Uint32Queue);
  typed_queue.Uint32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint32Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint32List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint32Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint32Queue, I[26]);
  typed_queue.Int32Queue = class Int32Queue extends typed_queue._IntQueue$(typed_data.Int32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t13;
      t13 = new typed_queue.Int32Queue.new(elements[$length]);
      return (() => {
        t13.addAll(elements);
        return t13;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int32Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeInt32List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int32Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[45] || CT.C45, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[46] || CT.C46)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[47] || CT.C47, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[48] || CT.C48, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[49] || CT.C49, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[50] || CT.C50)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[51] || CT.C51)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[53] || CT.C53, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[54] || CT.C54, value)));
    }
  };
  (typed_queue.Int32Queue.new = function(initialCapacity = null) {
    typed_queue.Int32Queue.__proto__.new.call(this, _native_typed_data.NativeInt32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int32Queue.prototype;
  dart.addTypeTests(typed_queue.Int32Queue);
  dart.addTypeCaches(typed_queue.Int32Queue);
  typed_queue.Int32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int32Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int32List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int32Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int32Queue, I[26]);
  typed_queue.Uint64Queue = class Uint64Queue extends typed_queue._IntQueue$(typed_data.Uint64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t13;
      t13 = new typed_queue.Uint64Queue.new(elements[$length]);
      return (() => {
        t13.addAll(elements);
        return t13;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint64Queue.fromList(elements);
    }
    [_createList](size) {
      return typed_data.Uint64List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint64Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[45] || CT.C45, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[46] || CT.C46)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[47] || CT.C47, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[48] || CT.C48, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[49] || CT.C49, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[50] || CT.C50)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[51] || CT.C51)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[53] || CT.C53, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[54] || CT.C54, value)));
    }
  };
  (typed_queue.Uint64Queue.new = function(initialCapacity = null) {
    typed_queue.Uint64Queue.__proto__.new.call(this, typed_data.Uint64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint64Queue.prototype;
  dart.addTypeTests(typed_queue.Uint64Queue);
  dart.addTypeCaches(typed_queue.Uint64Queue);
  typed_queue.Uint64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint64Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint64List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint64Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint64Queue, I[26]);
  typed_queue.Int64Queue = class Int64Queue extends typed_queue._IntQueue$(typed_data.Int64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t13;
      t13 = new typed_queue.Int64Queue.new(elements[$length]);
      return (() => {
        t13.addAll(elements);
        return t13;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int64Queue.fromList(elements);
    }
    [_createList](size) {
      return typed_data.Int64List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int64Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[45] || CT.C45, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[46] || CT.C46)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[47] || CT.C47, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[48] || CT.C48, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[49] || CT.C49, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[50] || CT.C50)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[51] || CT.C51)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[53] || CT.C53, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[54] || CT.C54, value)));
    }
  };
  (typed_queue.Int64Queue.new = function(initialCapacity = null) {
    typed_queue.Int64Queue.__proto__.new.call(this, typed_data.Int64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int64Queue.prototype;
  dart.addTypeTests(typed_queue.Int64Queue);
  dart.addTypeCaches(typed_queue.Int64Queue);
  typed_queue.Int64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int64Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int64List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int64Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int64Queue, I[26]);
  typed_queue.Float32Queue = class Float32Queue extends typed_queue._FloatQueue$(typed_data.Float32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t13;
      t13 = new typed_queue.Float32Queue.new(elements[$length]);
      return (() => {
        t13.addAll(elements);
        return t13;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float32Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeFloat32List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Float32Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[45] || CT.C45, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[46] || CT.C46)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[47] || CT.C47, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[48] || CT.C48, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[49] || CT.C49, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[50] || CT.C50)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[51] || CT.C51)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[53] || CT.C53, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[54] || CT.C54, value)));
    }
  };
  (typed_queue.Float32Queue.new = function(initialCapacity = null) {
    typed_queue.Float32Queue.__proto__.new.call(this, _native_typed_data.NativeFloat32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float32Queue.prototype;
  dart.addTypeTests(typed_queue.Float32Queue);
  dart.addTypeCaches(typed_queue.Float32Queue);
  typed_queue.Float32Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];
  dart.setMethodSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float32Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Float32List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Float32Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.double]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float32Queue, I[26]);
  typed_queue.Float64Queue = class Float64Queue extends typed_queue._FloatQueue$(typed_data.Float64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t13;
      t13 = new typed_queue.Float64Queue.new(elements[$length]);
      return (() => {
        t13.addAll(elements);
        return t13;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float64Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeFloat64List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Float64Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[45] || CT.C45, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[46] || CT.C46)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[47] || CT.C47, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[48] || CT.C48, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[49] || CT.C49, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[50] || CT.C50)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[51] || CT.C51)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[53] || CT.C53, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[54] || CT.C54, value)));
    }
  };
  (typed_queue.Float64Queue.new = function(initialCapacity = null) {
    typed_queue.Float64Queue.__proto__.new.call(this, _native_typed_data.NativeFloat64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float64Queue.prototype;
  dart.addTypeTests(typed_queue.Float64Queue);
  dart.addTypeCaches(typed_queue.Float64Queue);
  typed_queue.Float64Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];
  dart.setMethodSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float64Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Float64List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Float64Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.double]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float64Queue, I[26]);
  typed_queue.Int32x4Queue = class Int32x4Queue extends typed_queue._TypedQueue$(typed_data.Int32x4, typed_data.Int32x4List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int32x4Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t13;
      t13 = new typed_queue.Int32x4Queue.new(elements[$length]);
      return (() => {
        t13.addAll(elements);
        return t13;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int32x4Queue.fromList(elements);
    }
    [_createList](size) {
      return new _native_typed_data.NativeInt32x4List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int32x4Buffer.new(size);
    }
    get [_defaultValue]() {
      return typed_queue.Int32x4Queue._zero;
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[45] || CT.C45, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[46] || CT.C46)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[47] || CT.C47, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[48] || CT.C48, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[49] || CT.C49, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[50] || CT.C50)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[51] || CT.C51)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[53] || CT.C53, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[54] || CT.C54, value)));
    }
  };
  (typed_queue.Int32x4Queue.new = function(initialCapacity = null) {
    typed_queue.Int32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeInt32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int32x4Queue.prototype;
  dart.addTypeTests(typed_queue.Int32x4Queue);
  dart.addTypeCaches(typed_queue.Int32x4Queue);
  typed_queue.Int32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Int32x4)];
  dart.setMethodSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int32x4Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int32x4List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int32x4Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [typed_data.Int32x4]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Int32x4))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int32x4Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int32x4Queue.__proto__),
    [_defaultValue]: typed_data.Int32x4,
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Int32x4)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int32x4Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Int32x4)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int32x4Queue, I[26]);
  dart.setStaticFieldSignature(typed_queue.Int32x4Queue, () => ['_zero']);
  dart.defineLazy(typed_queue.Int32x4Queue, {
    /*typed_queue.Int32x4Queue._zero*/get _zero() {
      return new _native_typed_data.NativeInt32x4.new(0, 0, 0, 0);
    }
  }, false);
  typed_queue.Float32x4Queue = class Float32x4Queue extends typed_queue._TypedQueue$(typed_data.Float32x4, typed_data.Float32x4List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float32x4Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t13;
      t13 = new typed_queue.Float32x4Queue.new(elements[$length]);
      return (() => {
        t13.addAll(elements);
        return t13;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float32x4Queue.fromList(elements);
    }
    [_createList](size) {
      return new _native_typed_data.NativeFloat32x4List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Float32x4Buffer.new(size);
    }
    get [_defaultValue]() {
      return new _native_typed_data.NativeFloat32x4.zero();
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[45] || CT.C45, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[46] || CT.C46)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[47] || CT.C47, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[48] || CT.C48, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[49] || CT.C49, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[50] || CT.C50)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[51] || CT.C51)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[53] || CT.C53, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[54] || CT.C54, value)));
    }
  };
  (typed_queue.Float32x4Queue.new = function(initialCapacity = null) {
    typed_queue.Float32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeFloat32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float32x4Queue.prototype;
  dart.addTypeTests(typed_queue.Float32x4Queue);
  dart.addTypeCaches(typed_queue.Float32x4Queue);
  typed_queue.Float32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Float32x4)];
  dart.setMethodSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float32x4Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Float32x4List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Float32x4Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [typed_data.Float32x4]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Float32x4))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float32x4Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float32x4Queue.__proto__),
    [_defaultValue]: typed_data.Float32x4,
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Float32x4)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float32x4Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Float32x4)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float32x4Queue, I[26]);
  typed_queue._chooseRealInitialCapacity = function _chooseRealInitialCapacity(initialCapacity) {
    if (initialCapacity == null || dart.notNull(initialCapacity) < 16) {
      return 16;
    } else if (!typed_queue._isPowerOf2(initialCapacity)) {
      return typed_queue._nextPowerOf2(initialCapacity);
    } else {
      return initialCapacity;
    }
  };
  typed_queue._isPowerOf2 = function _isPowerOf2(number) {
    return (number & number - 1) === 0;
  };
  typed_queue._nextPowerOf2 = function _nextPowerOf2(number) {
    if (!(number > 0)) dart.assertFailed(null, I[25], 691, 10, "number > 0");
    number = (number << 1 >>> 0) - 1;
    for (;;) {
      let nextNumber = (number & number - 1) >>> 0;
      if (nextNumber === 0) return number;
      number = nextNumber;
    }
  };
  dart.defineLazy(typed_queue, {
    /*typed_queue._defaultInitialCapacity*/get _defaultInitialCapacity() {
      return 16;
    }
  }, false);
  var _buffer = dart.privateName(typed_buffer, "_buffer");
  var _length = dart.privateName(typed_buffer, "_length");
  var _typedBuffer = dart.privateName(typed_buffer, "_typedBuffer");
  var _defaultValue$ = dart.privateName(typed_buffer, "_defaultValue");
  var _createBuffer$ = dart.privateName(typed_buffer, "_createBuffer");
  var _createBiggerBuffer = dart.privateName(typed_buffer, "_createBiggerBuffer");
  var _grow$0 = dart.privateName(typed_buffer, "_grow");
  var _add$0 = dart.privateName(typed_buffer, "_add");
  var _addAll = dart.privateName(typed_buffer, "_addAll");
  var _insertKnownLength = dart.privateName(typed_buffer, "_insertKnownLength");
  var _ensureCapacity = dart.privateName(typed_buffer, "_ensureCapacity");
  var _setRange = dart.privateName(typed_buffer, "_setRange");
  const _is_TypedDataBuffer_default = Symbol('_is_TypedDataBuffer_default');
  typed_buffer.TypedDataBuffer$ = dart.generic(E => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$TypedDataBufferOfE = () => (__t$TypedDataBufferOfE = dart.constFn(typed_buffer.TypedDataBuffer$(E)))();
    class TypedDataBuffer extends collection.ListBase$(E) {
      get [_typedBuffer]() {
        return typed_data.TypedData.as(this[_buffer]);
      }
      get length() {
        return this[_length];
      }
      _get(index) {
        if (index >= this.length) dart.throw(new core.IndexError.new(index, this));
        return this[_buffer][$_get](index);
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        if (index >= this.length) dart.throw(new core.IndexError.new(index, this));
        this[_buffer][$_set](index, value);
        return value$;
      }
      set length(newLength) {
        if (newLength < this[_length]) {
          let defaultValue = this[_defaultValue$];
          for (let i = newLength; i < this[_length]; i = i + 1) {
            this[_buffer][$_set](i, defaultValue);
          }
        } else if (newLength > this[_buffer][$length]) {
          let newBuffer = null;
          if (this[_buffer][$isEmpty]) {
            newBuffer = this[_createBuffer$](newLength);
          } else {
            newBuffer = this[_createBiggerBuffer](newLength);
          }
          newBuffer[$setRange](0, this[_length], this[_buffer]);
          this[_buffer] = newBuffer;
        }
        this[_length] = newLength;
      }
      [_add$0](value) {
        let t13;
        if (this[_length] === this[_buffer][$length]) this[_grow$0](this[_length]);
        this[_buffer][$_set]((t13 = this[_length], this[_length] = t13 + 1, t13), value);
      }
      add(element) {
        E.as(element);
        this[_add$0](element);
      }
      addAll(values, start = 0, end = null) {
        __t$IterableOfE().as(values);
        core.RangeError.checkNotNegative(start, "start");
        if (end != null && start > dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, null, "end"));
        }
        this[_addAll](values, start, end);
      }
      insertAll(index, values, start = 0, end = null) {
        let t13;
        __t$IterableOfE().as(values);
        core.RangeError.checkValidIndex(index, this, "index", this[_length] + 1);
        core.RangeError.checkNotNegative(start, "start");
        if (end != null) {
          if (start > dart.notNull(end)) {
            dart.throw(new core.RangeError.range(end, start, null, "end"));
          }
          if (start === end) return;
        }
        if (index === this[_length]) {
          this[_addAll](values, start, end);
          return;
        }
        if (end == null && core.List.is(values)) {
          end = values[$length];
        }
        if (end != null) {
          this[_insertKnownLength](index, values, start, end);
          return;
        }
        let writeIndex = this[_length];
        let skipCount = start;
        for (let value of values) {
          if (skipCount > 0) {
            skipCount = skipCount - 1;
            continue;
          }
          if (writeIndex === this[_buffer][$length]) {
            this[_grow$0](writeIndex);
          }
          this[_buffer][$_set]((t13 = writeIndex, writeIndex = t13 + 1, t13), value);
        }
        if (skipCount > 0) {
          dart.throw(new core.StateError.new("Too few elements"));
        }
        if (end != null && writeIndex < dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, writeIndex, "end"));
        }
        typed_buffer.TypedDataBuffer._reverse(this[_buffer], index, this[_length]);
        typed_buffer.TypedDataBuffer._reverse(this[_buffer], this[_length], writeIndex);
        typed_buffer.TypedDataBuffer._reverse(this[_buffer], index, writeIndex);
        this[_length] = writeIndex;
        return;
      }
      static _reverse(buffer, start, end) {
        end = end - 1;
        while (start < end) {
          let first = buffer[$_get](start);
          let last = buffer[$_get](end);
          buffer[$_set](end, first);
          buffer[$_set](start, last);
          start = start + 1;
          end = end - 1;
        }
      }
      [_addAll](values, start = 0, end = null) {
        if (core.List.is(values)) end == null ? end = values[$length] : null;
        if (end != null) {
          this[_insertKnownLength](this[_length], values, start, end);
          return;
        }
        let i = 0;
        for (let value of values) {
          if (i >= start) this.add(value);
          i = i + 1;
        }
        if (i < start) dart.throw(new core.StateError.new("Too few elements"));
      }
      [_insertKnownLength](index, values, start, end) {
        if (core.List.is(values)) {
          if (start > values[$length] || end > values[$length]) {
            dart.throw(new core.StateError.new("Too few elements"));
          }
        }
        let valuesLength = end - start;
        let newLength = this[_length] + valuesLength;
        this[_ensureCapacity](newLength);
        this[_buffer][$setRange](index + valuesLength, this[_length] + valuesLength, this[_buffer], index);
        this[_buffer][$setRange](index, index + valuesLength, values, start);
        this[_length] = newLength;
      }
      insert(index, element) {
        E.as(element);
        if (index < 0 || index > this[_length]) {
          dart.throw(new core.RangeError.range(index, 0, this[_length]));
        }
        if (this[_length] < this[_buffer][$length]) {
          this[_buffer][$setRange](index + 1, this[_length] + 1, this[_buffer], index);
          this[_buffer][$_set](index, element);
          this[_length] = this[_length] + 1;
          return;
        }
        let newBuffer = this[_createBiggerBuffer](null);
        newBuffer[$setRange](0, index, this[_buffer]);
        newBuffer[$setRange](index + 1, this[_length] + 1, this[_buffer], index);
        newBuffer[$_set](index, element);
        this[_length] = this[_length] + 1;
        this[_buffer] = newBuffer;
      }
      [_ensureCapacity](requiredCapacity) {
        if (requiredCapacity <= this[_buffer][$length]) return;
        let newBuffer = this[_createBiggerBuffer](requiredCapacity);
        newBuffer[$setRange](0, this[_length], this[_buffer]);
        this[_buffer] = newBuffer;
      }
      [_createBiggerBuffer](requiredCapacity) {
        let newLength = this[_buffer][$length] * 2;
        if (requiredCapacity != null && dart.notNull(newLength) < dart.notNull(requiredCapacity)) {
          newLength = requiredCapacity;
        } else if (dart.notNull(newLength) < 8) {
          newLength = 8;
        }
        return this[_createBuffer$](newLength);
      }
      [_grow$0](length) {
        let t13;
        this[_buffer] = (t13 = this[_createBiggerBuffer](null), (() => {
          t13[$setRange](0, length, this[_buffer]);
          return t13;
        })());
      }
      setRange(start, end, iterable, skipCount = 0) {
        __t$IterableOfE().as(iterable);
        if (end > this[_length]) dart.throw(new core.RangeError.range(end, 0, this[_length]));
        this[_setRange](start, end, iterable, skipCount);
      }
      [_setRange](start, end, source, skipCount) {
        if (__t$TypedDataBufferOfE().is(source)) {
          this[_buffer][$setRange](start, end, source[_buffer], skipCount);
        } else {
          this[_buffer][$setRange](start, end, source, skipCount);
        }
      }
      get elementSizeInBytes() {
        return this[_typedBuffer][$elementSizeInBytes];
      }
      get lengthInBytes() {
        return this[_length] * this[_typedBuffer][$elementSizeInBytes];
      }
      get offsetInBytes() {
        return this[_typedBuffer][$offsetInBytes];
      }
      get buffer() {
        return this[_typedBuffer][$buffer];
      }
    }
    (TypedDataBuffer.new = function(buffer) {
      this[_buffer] = buffer;
      this[_length] = buffer[$length];
      ;
    }).prototype = TypedDataBuffer.prototype;
    dart.addTypeTests(TypedDataBuffer);
    TypedDataBuffer.prototype[_is_TypedDataBuffer_default] = true;
    dart.addTypeCaches(TypedDataBuffer);
    dart.setMethodSignature(TypedDataBuffer, () => ({
      __proto__: dart.getMethods(TypedDataBuffer.__proto__),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [_add$0]: dart.fnType(dart.void, [E]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [_addAll]: dart.fnType(dart.void, [core.Iterable$(E)], [core.int, dart.nullable(core.int)]),
      [_insertKnownLength]: dart.fnType(dart.void, [core.int, core.Iterable$(E), core.int, core.int]),
      [_ensureCapacity]: dart.fnType(dart.void, [core.int]),
      [_createBiggerBuffer]: dart.fnType(core.List$(E), [dart.nullable(core.int)]),
      [_grow$0]: dart.fnType(dart.void, [core.int]),
      [_setRange]: dart.fnType(dart.void, [core.int, core.int, core.Iterable$(E), core.int])
    }));
    dart.setStaticMethodSignature(TypedDataBuffer, () => ['_reverse']);
    dart.setGetterSignature(TypedDataBuffer, () => ({
      __proto__: dart.getGetters(TypedDataBuffer.__proto__),
      [_typedBuffer]: typed_data.TypedData,
      length: core.int,
      [$length]: core.int,
      elementSizeInBytes: core.int,
      lengthInBytes: core.int,
      offsetInBytes: core.int,
      buffer: typed_data.ByteBuffer
    }));
    dart.setSetterSignature(TypedDataBuffer, () => ({
      __proto__: dart.getSetters(TypedDataBuffer.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(TypedDataBuffer, I[27]);
    dart.setFieldSignature(TypedDataBuffer, () => ({
      __proto__: dart.getFields(TypedDataBuffer.__proto__),
      [_buffer]: dart.fieldType(core.List$(E)),
      [_length]: dart.fieldType(core.int)
    }));
    dart.setStaticFieldSignature(TypedDataBuffer, () => ['_initialLength']);
    dart.defineExtensionMethods(TypedDataBuffer, [
      '_get',
      '_set',
      'add',
      'addAll',
      'insertAll',
      'insert',
      'setRange'
    ]);
    dart.defineExtensionAccessors(TypedDataBuffer, ['length']);
    return TypedDataBuffer;
  });
  typed_buffer.TypedDataBuffer = typed_buffer.TypedDataBuffer$();
  dart.defineLazy(typed_buffer.TypedDataBuffer, {
    /*typed_buffer.TypedDataBuffer._initialLength*/get _initialLength() {
      return 8;
    }
  }, false);
  dart.addTypeTests(typed_buffer.TypedDataBuffer, _is_TypedDataBuffer_default);
  typed_buffer._IntBuffer = class _IntBuffer extends typed_buffer.TypedDataBuffer$(core.int) {
    get [_defaultValue$]() {
      return 0;
    }
  };
  (typed_buffer._IntBuffer.new = function(buffer) {
    typed_buffer._IntBuffer.__proto__.new.call(this, buffer);
    ;
  }).prototype = typed_buffer._IntBuffer.prototype;
  dart.addTypeTests(typed_buffer._IntBuffer);
  dart.addTypeCaches(typed_buffer._IntBuffer);
  dart.setGetterSignature(typed_buffer._IntBuffer, () => ({
    __proto__: dart.getGetters(typed_buffer._IntBuffer.__proto__),
    [_defaultValue$]: core.int
  }));
  dart.setLibraryUri(typed_buffer._IntBuffer, I[27]);
  typed_buffer._FloatBuffer = class _FloatBuffer extends typed_buffer.TypedDataBuffer$(core.double) {
    get [_defaultValue$]() {
      return 0;
    }
  };
  (typed_buffer._FloatBuffer.new = function(buffer) {
    typed_buffer._FloatBuffer.__proto__.new.call(this, buffer);
    ;
  }).prototype = typed_buffer._FloatBuffer.prototype;
  dart.addTypeTests(typed_buffer._FloatBuffer);
  dart.addTypeCaches(typed_buffer._FloatBuffer);
  dart.setGetterSignature(typed_buffer._FloatBuffer, () => ({
    __proto__: dart.getGetters(typed_buffer._FloatBuffer.__proto__),
    [_defaultValue$]: core.double
  }));
  dart.setLibraryUri(typed_buffer._FloatBuffer, I[27]);
  typed_buffer.Uint8Buffer = class Uint8Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint8Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint8List.new(size);
    }
  };
  (typed_buffer.Uint8Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint8Buffer.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint8Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint8Buffer);
  dart.addTypeCaches(typed_buffer.Uint8Buffer);
  dart.setMethodSignature(typed_buffer.Uint8Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint8Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint8List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint8Buffer, I[27]);
  typed_buffer.Int8Buffer = class Int8Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int8Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeInt8List.new(size);
    }
  };
  (typed_buffer.Int8Buffer.new = function(initialLength = 0) {
    typed_buffer.Int8Buffer.__proto__.new.call(this, _native_typed_data.NativeInt8List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int8Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int8Buffer);
  dart.addTypeCaches(typed_buffer.Int8Buffer);
  dart.setMethodSignature(typed_buffer.Int8Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int8Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int8List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int8Buffer, I[27]);
  typed_buffer.Uint8ClampedBuffer = class Uint8ClampedBuffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint8ClampedBuffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint8ClampedList.new(size);
    }
  };
  (typed_buffer.Uint8ClampedBuffer.new = function(initialLength = 0) {
    typed_buffer.Uint8ClampedBuffer.__proto__.new.call(this, _native_typed_data.NativeUint8ClampedList.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint8ClampedBuffer.prototype;
  dart.addTypeTests(typed_buffer.Uint8ClampedBuffer);
  dart.addTypeCaches(typed_buffer.Uint8ClampedBuffer);
  dart.setMethodSignature(typed_buffer.Uint8ClampedBuffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint8ClampedBuffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint8ClampedList, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint8ClampedBuffer, I[27]);
  typed_buffer.Uint16Buffer = class Uint16Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint16Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint16List.new(size);
    }
  };
  (typed_buffer.Uint16Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint16Buffer.__proto__.new.call(this, _native_typed_data.NativeUint16List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint16Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint16Buffer);
  dart.addTypeCaches(typed_buffer.Uint16Buffer);
  dart.setMethodSignature(typed_buffer.Uint16Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint16Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint16List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint16Buffer, I[27]);
  typed_buffer.Int16Buffer = class Int16Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int16Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeInt16List.new(size);
    }
  };
  (typed_buffer.Int16Buffer.new = function(initialLength = 0) {
    typed_buffer.Int16Buffer.__proto__.new.call(this, _native_typed_data.NativeInt16List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int16Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int16Buffer);
  dart.addTypeCaches(typed_buffer.Int16Buffer);
  dart.setMethodSignature(typed_buffer.Int16Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int16Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int16List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int16Buffer, I[27]);
  typed_buffer.Uint32Buffer = class Uint32Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint32Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint32List.new(size);
    }
  };
  (typed_buffer.Uint32Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint32Buffer.__proto__.new.call(this, _native_typed_data.NativeUint32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint32Buffer);
  dart.addTypeCaches(typed_buffer.Uint32Buffer);
  dart.setMethodSignature(typed_buffer.Uint32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint32Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint32Buffer, I[27]);
  typed_buffer.Int32Buffer = class Int32Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int32Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeInt32List.new(size);
    }
  };
  (typed_buffer.Int32Buffer.new = function(initialLength = 0) {
    typed_buffer.Int32Buffer.__proto__.new.call(this, _native_typed_data.NativeInt32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int32Buffer);
  dart.addTypeCaches(typed_buffer.Int32Buffer);
  dart.setMethodSignature(typed_buffer.Int32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int32Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int32Buffer, I[27]);
  typed_buffer.Uint64Buffer = class Uint64Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint64Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return typed_data.Uint64List.new(size);
    }
  };
  (typed_buffer.Uint64Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint64Buffer.__proto__.new.call(this, typed_data.Uint64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint64Buffer);
  dart.addTypeCaches(typed_buffer.Uint64Buffer);
  dart.setMethodSignature(typed_buffer.Uint64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint64Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint64Buffer, I[27]);
  typed_buffer.Int64Buffer = class Int64Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int64Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return typed_data.Int64List.new(size);
    }
  };
  (typed_buffer.Int64Buffer.new = function(initialLength = 0) {
    typed_buffer.Int64Buffer.__proto__.new.call(this, typed_data.Int64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int64Buffer);
  dart.addTypeCaches(typed_buffer.Int64Buffer);
  dart.setMethodSignature(typed_buffer.Int64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int64Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int64Buffer, I[27]);
  typed_buffer.Float32Buffer = class Float32Buffer extends typed_buffer._FloatBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float32Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeFloat32List.new(size);
    }
  };
  (typed_buffer.Float32Buffer.new = function(initialLength = 0) {
    typed_buffer.Float32Buffer.__proto__.new.call(this, _native_typed_data.NativeFloat32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float32Buffer);
  dart.addTypeCaches(typed_buffer.Float32Buffer);
  dart.setMethodSignature(typed_buffer.Float32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float32Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Float32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Float32Buffer, I[27]);
  typed_buffer.Float64Buffer = class Float64Buffer extends typed_buffer._FloatBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float64Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeFloat64List.new(size);
    }
  };
  (typed_buffer.Float64Buffer.new = function(initialLength = 0) {
    typed_buffer.Float64Buffer.__proto__.new.call(this, _native_typed_data.NativeFloat64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float64Buffer);
  dart.addTypeCaches(typed_buffer.Float64Buffer);
  dart.setMethodSignature(typed_buffer.Float64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float64Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Float64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Float64Buffer, I[27]);
  typed_buffer.Int32x4Buffer = class Int32x4Buffer extends typed_buffer.TypedDataBuffer$(typed_data.Int32x4) {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int32x4Buffer.new(initialLength);
    }
    get [_defaultValue$]() {
      return typed_buffer.Int32x4Buffer._zero;
    }
    [_createBuffer$](size) {
      return new _native_typed_data.NativeInt32x4List.new(size);
    }
  };
  (typed_buffer.Int32x4Buffer.new = function(initialLength = 0) {
    typed_buffer.Int32x4Buffer.__proto__.new.call(this, new _native_typed_data.NativeInt32x4List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int32x4Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int32x4Buffer);
  dart.addTypeCaches(typed_buffer.Int32x4Buffer);
  dart.setMethodSignature(typed_buffer.Int32x4Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int32x4Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int32x4List, [core.int])
  }));
  dart.setGetterSignature(typed_buffer.Int32x4Buffer, () => ({
    __proto__: dart.getGetters(typed_buffer.Int32x4Buffer.__proto__),
    [_defaultValue$]: typed_data.Int32x4
  }));
  dart.setLibraryUri(typed_buffer.Int32x4Buffer, I[27]);
  dart.setStaticFieldSignature(typed_buffer.Int32x4Buffer, () => ['_zero']);
  dart.defineLazy(typed_buffer.Int32x4Buffer, {
    /*typed_buffer.Int32x4Buffer._zero*/get _zero() {
      return new _native_typed_data.NativeInt32x4.new(0, 0, 0, 0);
    }
  }, false);
  typed_buffer.Float32x4Buffer = class Float32x4Buffer extends typed_buffer.TypedDataBuffer$(typed_data.Float32x4) {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float32x4Buffer.new(initialLength);
    }
    get [_defaultValue$]() {
      return new _native_typed_data.NativeFloat32x4.zero();
    }
    [_createBuffer$](size) {
      return new _native_typed_data.NativeFloat32x4List.new(size);
    }
  };
  (typed_buffer.Float32x4Buffer.new = function(initialLength = 0) {
    typed_buffer.Float32x4Buffer.__proto__.new.call(this, new _native_typed_data.NativeFloat32x4List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float32x4Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float32x4Buffer);
  dart.addTypeCaches(typed_buffer.Float32x4Buffer);
  dart.setMethodSignature(typed_buffer.Float32x4Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float32x4Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Float32x4List, [core.int])
  }));
  dart.setGetterSignature(typed_buffer.Float32x4Buffer, () => ({
    __proto__: dart.getGetters(typed_buffer.Float32x4Buffer.__proto__),
    [_defaultValue$]: typed_data.Float32x4
  }));
  dart.setLibraryUri(typed_buffer.Float32x4Buffer, I[27]);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:http/http.dart": http,
    "package:flutter_hooks/flutter_hooks.dart": flutter_hooks,
    "package:http/src/client.dart": client$,
    "package:http/src/exception.dart": exception,
    "package:http/src/request.dart": request$,
    "package:http/src/response.dart": response$,
    "package:http/src/streamed_request.dart": streamed_request,
    "package:http/src/base_client.dart": base_client,
    "package:http/src/base_request.dart": base_request,
    "package:http/src/base_response.dart": base_response,
    "package:http/src/byte_stream.dart": byte_stream,
    "package:http/src/multipart_file.dart": multipart_file,
    "package:http/src/multipart_request.dart": multipart_request,
    "package:http/src/streamed_response.dart": streamed_response,
    "package:flutter_hooks/src/framework.dart": framework$,
    "package:flutter_hooks/src/hooks.dart": hooks,
    "package:http/src/browser_client.dart": browser_client,
    "package:http_parser/http_parser.dart": http_parser,
    "package:http/src/utils.dart": utils,
    "package:http/src/multipart_file_stub.dart": multipart_file_stub,
    "package:http/src/boundary_characters.dart": boundary_characters,
    "package:http_parser/src/authentication_challenge.dart": authentication_challenge,
    "package:http_parser/src/case_insensitive_map.dart": case_insensitive_map,
    "package:http_parser/src/chunked_coding.dart": chunked_coding,
    "package:http_parser/src/http_date.dart": http_date,
    "package:http_parser/src/media_type.dart": media_type,
    "package:http_parser/src/scan.dart": scan,
    "package:http_parser/src/utils.dart": utils$,
    "package:http_parser/src/chunked_coding/decoder.dart": decoder,
    "package:http_parser/src/chunked_coding/encoder.dart": encoder,
    "package:typed_data/typed_data.dart": typed_data$,
    "package:http_parser/src/chunked_coding/charcodes.dart": charcodes,
    "package:typed_data/src/typed_queue.dart": typed_queue,
    "package:typed_data/typed_buffers.dart": typed_buffers,
    "package:typed_data/src/typed_buffer.dart": typed_buffer
  }, {
    "package:flutter_hooks/src/hooks.dart": ["animation.dart", "async.dart", "listenable.dart", "misc.dart", "primitives.dart", "tab_controller.dart", "text_controller.dart", "focus_node.dart", "focus_scope_node.dart", "scroll_controller.dart", "page_controller.dart", "widgets_binding_observer.dart", "transformation_controller.dart", "platform_brightness.dart", "keep_alive.dart", "listenable_selector.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/framework.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/http.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/base_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/base_response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/streamed_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/base_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/byte_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/multipart_file.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/multipart_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/streamed_response.dart","/workspace/build/dart-sdk/packages/flutter/lib/src/widgets/framework.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/listenable.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/animation.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/async.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/misc.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/primitives.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/tab_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/text_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/focus_node.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/focus_scope_node.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/scroll_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/page_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/widgets_binding_observer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/transformation_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/platform_brightness.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/keep_alive.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/listenable_selector.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/browser_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/multipart_file_stub.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.6/lib/src/boundary_characters.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/authentication_challenge.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/case_insensitive_map.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/http_date.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/media_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/scan.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/decoder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/encoder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/charcodes.dart","/zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_queue.dart","/zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_buffer.dart"],"names":[],"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    http: http,
    flutter_hooks: flutter_hooks,
    src__client: client$,
    src__exception: exception,
    src__request: request$,
    src__response: response$,
    src__streamed_request: streamed_request,
    src__base_client: base_client,
    src__base_request: base_request,
    src__base_response: base_response,
    src__byte_stream: byte_stream,
    src__multipart_file: multipart_file,
    src__multipart_request: multipart_request,
    src__streamed_response: streamed_response,
    src__framework: framework$,
    src__hooks: hooks,
    src__browser_client: browser_client,
    http_parser: http_parser,
    src__utils: utils,
    src__multipart_file_stub: multipart_file_stub,
    src__boundary_characters: boundary_characters,
    src__authentication_challenge: authentication_challenge,
    src__case_insensitive_map: case_insensitive_map,
    src__chunked_coding: chunked_coding,
    src__http_date: http_date,
    src__media_type: media_type,
    src__scan: scan,
    src__utils: utils$,
    src__chunked_coding__decoder: decoder,
    src__chunked_coding__encoder: encoder,
    typed_data: typed_data$,
    src__chunked_coding__charcodes: charcodes,
    src__typed_queue: typed_queue,
    typed_buffers: typed_buffers,
    src__typed_buffer: typed_buffer
  };
}));

//# sourceMappingURL=main.js.map
