// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const collection = dart_sdk.collection;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const framework = flutter_sdk.src__widgets__framework;
  const data_table = flutter_sdk.src__material__data_table;
  const basic = flutter_sdk.src__widgets__basic;
  const text_style = flutter_sdk.src__painting__text_style;
  const bottom_navigation_bar = flutter_sdk.src__material__bottom_navigation_bar;
  const bottom_navigation_bar_item = flutter_sdk.src__widgets__bottom_navigation_bar_item;
  const icon = flutter_sdk.src__widgets__icon;
  const icon_data = flutter_sdk.src__widgets__icon_data;
  const binding = flutter_sdk.src__widgets__binding;
  const diagnostics = flutter_sdk.src__foundation__diagnostics;
  const assertions = flutter_sdk.src__foundation__assertions;
  const change_notifier = flutter_sdk.src__foundation__change_notifier;
  const animation = flutter_sdk.src__animation__animation;
  const animation_controller = flutter_sdk.src__animation__animation_controller;
  const ticker = flutter_sdk.src__scheduler__ticker;
  const ticker_provider = flutter_sdk.src__widgets__ticker_provider;
  const async$ = flutter_sdk.src__widgets__async;
  const tab_controller = flutter_sdk.src__material__tab_controller;
  const editable_text = flutter_sdk.src__widgets__editable_text;
  const text_input = flutter_sdk.src__services__text_input;
  const focus_manager = flutter_sdk.src__widgets__focus_manager;
  const raw_keyboard = flutter_sdk.src__services__raw_keyboard;
  const hardware_keyboard = flutter_sdk.src__services__hardware_keyboard;
  const scroll_controller = flutter_sdk.src__widgets__scroll_controller;
  const page_view = flutter_sdk.src__widgets__page_view;
  const interactive_viewer = flutter_sdk.src__widgets__interactive_viewer;
  const vector_math_64 = flutter_sdk.vector_math_64;
  const automatic_keep_alive = flutter_sdk.src__widgets__automatic_keep_alive;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var flutter_hooks = Object.create(dart.library);
  var framework$ = Object.create(dart.library);
  var hooks = Object.create(dart.library);
  var $toString = dartx.toString;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $length = dartx.length;
  var $iterator = dartx.iterator;
  var $any = dartx.any;
  var $isNotEmpty = dartx.isNotEmpty;
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T$.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ListOfString()])))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    StringToDataColumn: () => (T$.StringToDataColumn = dart.constFn(dart.fnType(data_table.DataColumn, [core.String])))(),
    StringToDataCell: () => (T$.StringToDataCell = dart.constFn(dart.fnType(data_table.DataCell, [core.String])))(),
    dynamicToDataRow: () => (T$.dynamicToDataRow = dart.constFn(dart.fnType(data_table.DataRow, [dart.dynamic])))(),
    intTovoid: () => (T$.intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    _EntryOfVoidTobool: () => (T$._EntryOfVoidTobool = dart.constFn(framework$._Entry$(T$.VoidTobool())))(),
    DiagnosticsPropertyOfObject: () => (T$.DiagnosticsPropertyOfObject = dart.constFn(diagnostics.DiagnosticsProperty$(core.Object)))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    HookOfObjectN: () => (T$.HookOfObjectN = dart.constFn(framework$.Hook$(T$.ObjectN())))(),
    HookStateOfObjectN$HookOfObjectN: () => (T$.HookStateOfObjectN$HookOfObjectN = dart.constFn(framework$.HookState$(T$.ObjectN(), T$.HookOfObjectN())))(),
    _EntryOfHookStateOfObjectN$HookOfObjectN: () => (T$._EntryOfHookStateOfObjectN$HookOfObjectN = dart.constFn(framework$._Entry$(T$.HookStateOfObjectN$HookOfObjectN())))(),
    LinkedListOf_EntryOfHookStateOfObjectN$HookOfObjectN: () => (T$.LinkedListOf_EntryOfHookStateOfObjectN$HookOfObjectN = dart.constFn(collection.LinkedList$(T$._EntryOfHookStateOfObjectN$HookOfObjectN())))(),
    LinkedListOf_EntryOfVoidTobool: () => (T$.LinkedListOf_EntryOfVoidTobool = dart.constFn(collection.LinkedList$(T$._EntryOfVoidTobool())))(),
    JSArrayOfHookStateOfObjectN$HookOfObjectN: () => (T$.JSArrayOfHookStateOfObjectN$HookOfObjectN = dart.constFn(_interceptors.JSArray$(T$.HookStateOfObjectN$HookOfObjectN())))(),
    _EntryOfVoidToboolTobool: () => (T$._EntryOfVoidToboolTobool = dart.constFn(dart.fnType(core.bool, [T$._EntryOfVoidTobool()])))(),
    DiagnosticsPropertyOfHookStateOfObjectN$HookOfObjectN: () => (T$.DiagnosticsPropertyOfHookStateOfObjectN$HookOfObjectN = dart.constFn(diagnostics.DiagnosticsProperty$(T$.HookStateOfObjectN$HookOfObjectN())))(),
    HookOfRToHookStateOfR$HookOfR: () => (T$.HookOfRToHookStateOfR$HookOfR = dart.constFn(dart.gFnType(R => {
      var __t$HookOfR = () => (__t$HookOfR = dart.constFn(framework$.Hook$(R)))();
      var __t$HookStateOfR$HookOfR = () => (__t$HookStateOfR$HookOfR = dart.constFn(framework$.HookState$(R, __t$HookOfR())))();
      return [__t$HookStateOfR$HookOfR(), [__t$HookOfR()]];
    }, R => {
      var __t$HookOfR = () => (__t$HookOfR = dart.constFn(framework$.Hook$(R)))();
      var __t$HookStateOfR$HookOfR = () => (__t$HookStateOfR$HookOfR = dart.constFn(framework$.HookState$(R, __t$HookOfR())))();
      return [T$.ObjectN()];
    })))(),
    HookOfRTovoid: () => (T$.HookOfRTovoid = dart.constFn(dart.gFnType(R => {
      var __t$HookOfR = () => (__t$HookOfR = dart.constFn(framework$.Hook$(R)))();
      return [dart.void, [__t$HookOfR()]];
    }, R => {
      var __t$HookOfR = () => (__t$HookOfR = dart.constFn(framework$.Hook$(R)))();
      return [T$.ObjectN()];
    })))(),
    AnimationN: () => (T$.AnimationN = dart.constFn(dart.nullable(animation.Animation)))(),
    DiagnosticsPropertyOfDuration: () => (T$.DiagnosticsPropertyOfDuration = dart.constFn(diagnostics.DiagnosticsProperty$(core.Duration)))(),
    ObjectAndStackTraceToNull: () => (T$.ObjectAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))(),
    ValueListenableN: () => (T$.ValueListenableN = dart.constFn(dart.nullable(change_notifier.ValueListenable)))(),
    AppLifecycleStateN: () => (T$.AppLifecycleStateN = dart.constFn(dart.nullable(ui.AppLifecycleState)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T$.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Dicas"
      });
    },
    get C2() {
      return C[2] = dart.constList([], dart.dynamic);
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 61288
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[6] || CT.C6
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Caf√©s",
        [BottomNavigationBarItem_activeIcon]: C[5] || CT.C5,
        [BottomNavigationBarItem_icon]: C[5] || CT.C5
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 61817
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[9] || CT.C9
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Cervejas",
        [BottomNavigationBarItem_activeIcon]: C[8] || CT.C8,
        [BottomNavigationBarItem_icon]: C[8] || CT.C8
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 61563
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[12] || CT.C12
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Na√ß√µes",
        [BottomNavigationBarItem_activeIcon]: C[11] || CT.C11,
        [BottomNavigationBarItem_icon]: C[11] || CT.C11
      });
    },
    get C3() {
      return C[3] = dart.constList([C[4] || CT.C4, C[7] || CT.C7, C[10] || CT.C10], bottom_navigation_bar_item.BottomNavigationBarItem);
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: animation_controller.AnimationBehavior.prototype,
        [_Enum__name]: "normal",
        [_Enum_index]: 0
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: hooks._SingleTickerProviderHook.prototype,
        [keys$]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: hooks._IsMountedHook.prototype,
        [keys$]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: hooks._PlatformBrightnessHook.prototype,
        [keys$]: null,
        [onBrightnessChange$]: null,
        [rebuildOnChange$0]: true
      });
    },
    get C17() {
      return C[17] = dart.constList([], core.Object);
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: hooks._AppLifecycleHook.prototype,
        [keys$]: null,
        [onStateChanged$]: null,
        [rebuildOnChange$]: true
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: hooks._TextEditingControllerHookCreator.prototype
      });
    }
  }, false);
  var C = Array(20).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "package:flutter_hooks/src/framework.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/framework.dart",
    "package:flutter_hooks/src/hooks.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/animation.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/misc.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T$.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T$.ListOfStringTodynamic().as(C[0] || CT.C0)(T$.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T$.dynamicToNull()));
      }
    }, T$.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T$.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T$.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T$.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T$.VoidToNull())});
    });
  };
  var Widget_key = dart.privateName(framework, "Widget.key");
  var Text_selectionColor = dart.privateName(text, "Text.selectionColor");
  var Text_textHeightBehavior = dart.privateName(text, "Text.textHeightBehavior");
  var Text_textWidthBasis = dart.privateName(text, "Text.textWidthBasis");
  var Text_semanticsLabel = dart.privateName(text, "Text.semanticsLabel");
  var Text_maxLines = dart.privateName(text, "Text.maxLines");
  var Text_textScaleFactor = dart.privateName(text, "Text.textScaleFactor");
  var Text_overflow = dart.privateName(text, "Text.overflow");
  var Text_softWrap = dart.privateName(text, "Text.softWrap");
  var Text_locale = dart.privateName(text, "Text.locale");
  var Text_textDirection = dart.privateName(text, "Text.textDirection");
  var Text_textAlign = dart.privateName(text, "Text.textAlign");
  var Text_strutStyle = dart.privateName(text, "Text.strutStyle");
  var Text_style = dart.privateName(text, "Text.style");
  var Text_textSpan = dart.privateName(text, "Text.textSpan");
  var Text_data = dart.privateName(text, "Text.data");
  main.MyApp = class MyApp extends framework.StatelessWidget {
    build(context) {
      return new app.MaterialApp.new({theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.deepPurple}), debugShowCheckedModeBanner: false, home: new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[1] || CT.C1}), body: new main.DataTableWidget.new({jsonObjects: main.dataObjects}), bottomNavigationBar: new main.NewNavBar.new()})});
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  var jsonObjects$ = dart.privateName(main, "DataTableWidget.jsonObjects");
  main.DataTableWidget = class DataTableWidget extends framework.StatelessWidget {
    get jsonObjects() {
      return this[jsonObjects$];
    }
    set jsonObjects(value) {
      super.jsonObjects = value;
    }
    static ['_#new#tearOff'](opts) {
      let jsonObjects = opts && 'jsonObjects' in opts ? opts.jsonObjects : C[2] || CT.C2;
      return new main.DataTableWidget.new({jsonObjects: jsonObjects});
    }
    build(context) {
      let columnNames = T$.JSArrayOfString().of(["Nome", "Estilo", "IBU"]);
      let propertyNames = T$.JSArrayOfString().of(["name", "style", "ibu"]);
      return new data_table.DataTable.new({columns: columnNames[$map](data_table.DataColumn, dart.fn(name => new data_table.DataColumn.new({label: new basic.Expanded.new({child: new text.Text.new(name, {style: new text_style.TextStyle.new({fontStyle: ui.FontStyle.italic})})})}), T$.StringToDataColumn()))[$toList](), rows: this.jsonObjects[$map](data_table.DataRow, dart.fn(obj => new data_table.DataRow.new({cells: propertyNames[$map](data_table.DataCell, dart.fn(propName => new data_table.DataCell.new(new text.Text.new(core.String.as(dart.dsend(obj, '_get', [propName])))), T$.StringToDataCell()))[$toList]()}), T$.dynamicToDataRow()))[$toList]()});
    }
  };
  (main.DataTableWidget.new = function(opts) {
    let jsonObjects = opts && 'jsonObjects' in opts ? opts.jsonObjects : C[2] || CT.C2;
    this[jsonObjects$] = jsonObjects;
    main.DataTableWidget.__proto__.new.call(this);
    ;
  }).prototype = main.DataTableWidget.prototype;
  dart.addTypeTests(main.DataTableWidget);
  dart.addTypeCaches(main.DataTableWidget);
  dart.setMethodSignature(main.DataTableWidget, () => ({
    __proto__: dart.getMethods(main.DataTableWidget.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.DataTableWidget, I[0]);
  dart.setFieldSignature(main.DataTableWidget, () => ({
    __proto__: dart.getFields(main.DataTableWidget.__proto__),
    jsonObjects: dart.finalFieldType(core.List)
  }));
  var BottomNavigationBarItem_tooltip = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.tooltip");
  var BottomNavigationBarItem_backgroundColor = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.backgroundColor");
  var BottomNavigationBarItem_label = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.label");
  var Icon_textDirection = dart.privateName(icon, "Icon.textDirection");
  var Icon_semanticLabel = dart.privateName(icon, "Icon.semanticLabel");
  var Icon_shadows = dart.privateName(icon, "Icon.shadows");
  var Icon_color = dart.privateName(icon, "Icon.color");
  var Icon_opticalSize = dart.privateName(icon, "Icon.opticalSize");
  var Icon_grade = dart.privateName(icon, "Icon.grade");
  var Icon_weight = dart.privateName(icon, "Icon.weight");
  var Icon_fill = dart.privateName(icon, "Icon.fill");
  var Icon_size = dart.privateName(icon, "Icon.size");
  var IconData_matchTextDirection = dart.privateName(icon_data, "IconData.matchTextDirection");
  var IconData_fontPackage = dart.privateName(icon_data, "IconData.fontPackage");
  var IconData_fontFamily = dart.privateName(icon_data, "IconData.fontFamily");
  var IconData_codePoint = dart.privateName(icon_data, "IconData.codePoint");
  var Icon_icon = dart.privateName(icon, "Icon.icon");
  var BottomNavigationBarItem_activeIcon = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.activeIcon");
  var BottomNavigationBarItem_icon = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.icon");
  framework$.HookWidget = class HookWidget extends framework.StatelessWidget {
    createElement() {
      return new framework$._StatelessHookElement.new(this);
    }
  };
  (framework$.HookWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    framework$.HookWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = framework$.HookWidget.prototype;
  dart.addTypeTests(framework$.HookWidget);
  dart.addTypeCaches(framework$.HookWidget);
  dart.setMethodSignature(framework$.HookWidget, () => ({
    __proto__: dart.getMethods(framework$.HookWidget.__proto__),
    createElement: dart.fnType(framework$._StatelessHookElement, [])
  }));
  dart.setLibraryUri(framework$.HookWidget, I[1]);
  main.NewNavBar = class NewNavBar extends framework$.HookWidget {
    static ['_#new#tearOff']() {
      return new main.NewNavBar.new();
    }
    buttonTapped(index) {
      core.print("Tocaram no bot√£o " + dart.str(index));
    }
    build(context) {
      let state = hooks.useState(core.int, -1);
      core.print("no build da classe NewNavBar " + dart.str(state.value));
      if (state.value >= 0) {
        return new bottom_navigation_bar.BottomNavigationBar.new({selectedItemColor: new ui.Color.fromARGB(255, 150, 145, 145), currentIndex: state.value, onTap: dart.fn(index => {
            state.value = index;
          }, T$.intTovoid()), items: C[3] || CT.C3});
      } else {
        return new bottom_navigation_bar.BottomNavigationBar.new({onTap: dart.fn(index => {
            state.value = index;
          }, T$.intTovoid()), selectedItemColor: new ui.Color.fromARGB(255, 139, 136, 136), items: C[3] || CT.C3});
      }
    }
  };
  (main.NewNavBar.new = function() {
    main.NewNavBar.__proto__.new.call(this);
    ;
  }).prototype = main.NewNavBar.prototype;
  dart.addTypeTests(main.NewNavBar);
  dart.addTypeCaches(main.NewNavBar);
  dart.setMethodSignature(main.NewNavBar, () => ({
    __proto__: dart.getMethods(main.NewNavBar.__proto__),
    buttonTapped: dart.fnType(dart.void, [core.int]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.NewNavBar, I[0]);
  main.main = function main$0() {
    let app = new main.MyApp.new();
    binding.runApp(app);
  };
  dart.defineLazy(main, {
    /*main.dataObjects*/get dataObjects() {
      return [];
    },
    set dataObjects(value) {}
  }, false);
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  var keys$ = dart.privateName(framework$, "Hook.keys");
  var _use = dart.privateName(framework$, "_use");
  const _is_Hook_default = Symbol('_is_Hook_default');
  framework$.Hook$ = dart.generic(R => {
    const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
    (Object_Diagnosticable$36.new = function() {
    }).prototype = Object_Diagnosticable$36.prototype;
    dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
    class Hook extends Object_Diagnosticable$36 {
      get keys() {
        return this[keys$];
      }
      set keys(value) {
        super.keys = value;
      }
      static use(R, hook) {
        if (!(framework$.HookElement._currentHookElement != null)) dart.assertFailed("Hooks can only be called from the build method of a widget that mix-in `Hooks`.\n\nHooks should only be called within the build method of a widget.\nCalling them outside of build method leads to an unstable state and is therefore prohibited.\n", I[2], 133, 12, "HookElement._currentHookElement != null");
        return dart.nullCheck(framework$.HookElement._currentHookElement)[_use](R, hook);
      }
      static shouldPreserveState(hook1, hook2) {
        let p1 = hook1.keys;
        let p2 = hook2.keys;
        if (dart.equals(p1, p2)) {
          return true;
        }
        if (p1 == null || p2 == null || p1[$length] !== p2[$length]) {
          return false;
        }
        let i1 = p1[$iterator];
        let i2 = p2[$iterator];
        while (true) {
          if (!i1.moveNext() || !i2.moveNext()) {
            return true;
          }
          if (!dart.equals(i1.current, i2.current)) {
            return false;
          }
        }
      }
    }
    (Hook.new = function(opts) {
      let keys = opts && 'keys' in opts ? opts.keys : null;
      this[keys$] = keys;
      ;
    }).prototype = Hook.prototype;
    dart.addTypeTests(Hook);
    Hook.prototype[_is_Hook_default] = true;
    dart.addTypeCaches(Hook);
    dart.setStaticMethodSignature(Hook, () => ['use', 'shouldPreserveState']);
    dart.setLibraryUri(Hook, I[1]);
    dart.setFieldSignature(Hook, () => ({
      __proto__: dart.getFields(Hook.__proto__),
      keys: dart.finalFieldType(dart.nullable(core.List$(dart.nullable(core.Object))))
    }));
    return Hook;
  });
  framework$.Hook = framework$.Hook$();
  dart.addTypeTests(framework$.Hook, _is_Hook_default);
  var _debugLastBuiltValue = dart.privateName(framework$, "HookState._debugLastBuiltValue");
  var _hook = dart.privateName(framework$, "HookState._hook");
  var _element = dart.privateName(framework$, "_element");
  var _debugLastBuiltValue$ = dart.privateName(framework$, "_debugLastBuiltValue");
  var _hook$ = dart.privateName(framework$, "_hook");
  var _isOptionalRebuild = dart.privateName(framework$, "_isOptionalRebuild");
  var _shouldRebuildQueue = dart.privateName(framework$, "_shouldRebuildQueue");
  const _is_HookState_default = Symbol('_is_HookState_default');
  framework$.HookState$ = dart.generic((R, T) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
    (Object_Diagnosticable$36.new = function() {
    }).prototype = Object_Diagnosticable$36.prototype;
    dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
    class HookState extends Object_Diagnosticable$36 {
      get [_debugLastBuiltValue$]() {
        return this[_debugLastBuiltValue];
      }
      set [_debugLastBuiltValue$](value) {
        this[_debugLastBuiltValue] = __t$RN().as(value);
      }
      get [_hook$]() {
        return this[_hook];
      }
      set [_hook$](value) {
        this[_hook] = __t$TN().as(value);
      }
      get context() {
        return dart.nullCheck(this[_element]);
      }
      get debugValue() {
        return this[_debugLastBuiltValue$];
      }
      get debugSkipValue() {
        return false;
      }
      get debugLabel() {
        return null;
      }
      get debugHasShortDescription() {
        return true;
      }
      get hook() {
        return dart.nullCheck(this[_hook$]);
      }
      initHook() {
      }
      dispose() {
      }
      didUpdateHook(oldHook) {
        T.as(oldHook);
      }
      deactivate() {
      }
      reassemble() {
      }
      shouldRebuild() {
        return true;
      }
      markMayNeedRebuild() {
        let t0;
        if (dart.nullCheck(this[_element])[_isOptionalRebuild] !== false) {
          t0 = dart.nullCheck(this[_element]);
          (() => {
            t0[_isOptionalRebuild] = true;
            t0[_shouldRebuildQueue].add(new (T$._EntryOfVoidTobool()).new(dart.bind(this, 'shouldRebuild')));
            t0.markNeedsBuild();
            return t0;
          })();
        }
        if (!dart.nullCheck(this[_element]).dirty) dart.assertFailed("Bad state", I[2], 280, 12, "_element!.dirty");
      }
      setState(fn) {
        let t0;
        fn();
        t0 = dart.nullCheck(this[_element]);
        (() => {
          t0[_isOptionalRebuild] = false;
          t0.markNeedsBuild();
          return t0;
        })();
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        let value = this.debugValue;
        if (!dart.equals(value, this)) {
          properties.add(new (T$.DiagnosticsPropertyOfObject()).new(null, value));
        }
        this.hook.debugFillProperties(properties);
      }
    }
    (HookState.new = function() {
      this[_element] = null;
      this[_debugLastBuiltValue] = null;
      this[_hook] = null;
      ;
    }).prototype = HookState.prototype;
    dart.addTypeTests(HookState);
    HookState.prototype[_is_HookState_default] = true;
    dart.addTypeCaches(HookState);
    dart.setMethodSignature(HookState, () => ({
      __proto__: dart.getMethods(HookState.__proto__),
      initHook: dart.fnType(dart.void, []),
      dispose: dart.fnType(dart.void, []),
      didUpdateHook: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      deactivate: dart.fnType(dart.void, []),
      reassemble: dart.fnType(dart.void, []),
      shouldRebuild: dart.fnType(core.bool, []),
      markMayNeedRebuild: dart.fnType(dart.void, []),
      setState: dart.fnType(dart.void, [dart.fnType(dart.void, [])])
    }));
    dart.setGetterSignature(HookState, () => ({
      __proto__: dart.getGetters(HookState.__proto__),
      context: framework.BuildContext,
      debugValue: dart.nullable(core.Object),
      debugSkipValue: core.bool,
      debugLabel: dart.nullable(core.String),
      debugHasShortDescription: core.bool,
      hook: T
    }));
    dart.setLibraryUri(HookState, I[1]);
    dart.setFieldSignature(HookState, () => ({
      __proto__: dart.getFields(HookState.__proto__),
      [_element]: dart.fieldType(dart.nullable(framework$.HookElement)),
      [_debugLastBuiltValue$]: dart.fieldType(dart.nullable(R)),
      [_hook$]: dart.fieldType(dart.nullable(T))
    }));
    return HookState;
  });
  framework$.HookState = framework$.HookState$();
  dart.addTypeTests(framework$.HookState, _is_HookState_default);
  var value$ = dart.privateName(framework$, "_Entry.value");
  const _is__Entry_default = Symbol('_is__Entry_default');
  framework$._Entry$ = dart.generic(T => {
    class _Entry extends collection.LinkedListEntry {
      get value() {
        return this[value$];
      }
      set value(value) {
        this[value$] = T.as(value);
      }
      static ['_#new#tearOff'](T, value) {
        return new (framework$._Entry$(T)).new(value);
      }
    }
    (_Entry.new = function(value) {
      this[value$] = value;
      _Entry.__proto__.new.call(this);
      ;
    }).prototype = _Entry.prototype;
    dart.addTypeTests(_Entry);
    _Entry.prototype[_is__Entry_default] = true;
    dart.addTypeCaches(_Entry);
    dart.setLibraryUri(_Entry, I[1]);
    dart.setFieldSignature(_Entry, () => ({
      __proto__: dart.getFields(_Entry.__proto__),
      value: dart.fieldType(T)
    }));
    return _Entry;
  }, T => {
    dart.setBaseClass(framework$._Entry$(T), collection.LinkedListEntry$(framework$._Entry$(T)));
  });
  framework$._Entry = framework$._Entry$();
  dart.addTypeTests(framework$._Entry, _is__Entry_default);
  var _currentHookState = dart.privateName(framework$, "HookElement._currentHookState");
  var _hooks = dart.privateName(framework$, "HookElement._hooks");
  var _shouldRebuildQueue$ = dart.privateName(framework$, "HookElement._shouldRebuildQueue");
  var _needDispose = dart.privateName(framework$, "HookElement._needDispose");
  var _isOptionalRebuild$ = dart.privateName(framework$, "HookElement._isOptionalRebuild");
  var _buildCache = dart.privateName(framework$, "HookElement._buildCache");
  var _debugIsInitHook = dart.privateName(framework$, "HookElement._debugIsInitHook");
  var _debugDidReassemble = dart.privateName(framework$, "HookElement._debugDidReassemble");
  var _currentHookState$ = dart.privateName(framework$, "_currentHookState");
  var _hooks$ = dart.privateName(framework$, "_hooks");
  var _needDispose$ = dart.privateName(framework$, "_needDispose");
  var _buildCache$ = dart.privateName(framework$, "_buildCache");
  var _debugIsInitHook$ = dart.privateName(framework$, "_debugIsInitHook");
  var _debugDidReassemble$ = dart.privateName(framework$, "_debugDidReassemble");
  framework$.HookElement = class HookElement extends framework.ComponentElement {};
  framework$.HookElement[dart.mixinOn] = ComponentElement => class HookElement extends ComponentElement {
    get [_currentHookState$]() {
      return this[_currentHookState];
    }
    set [_currentHookState$](value) {
      this[_currentHookState] = value;
    }
    get [_hooks$]() {
      return this[_hooks];
    }
    set [_hooks$](value) {
      super[_hooks$] = value;
    }
    get [_shouldRebuildQueue]() {
      return this[_shouldRebuildQueue$];
    }
    set [_shouldRebuildQueue](value) {
      super[_shouldRebuildQueue] = value;
    }
    get [_needDispose$]() {
      return this[_needDispose];
    }
    set [_needDispose$](value) {
      this[_needDispose] = value;
    }
    get [_isOptionalRebuild]() {
      return this[_isOptionalRebuild$];
    }
    set [_isOptionalRebuild](value) {
      this[_isOptionalRebuild$] = value;
    }
    get [_buildCache$]() {
      return this[_buildCache];
    }
    set [_buildCache$](value) {
      this[_buildCache] = value;
    }
    get [_debugIsInitHook$]() {
      return this[_debugIsInitHook];
    }
    set [_debugIsInitHook$](value) {
      this[_debugIsInitHook] = value;
    }
    get [_debugDidReassemble$]() {
      return this[_debugDidReassemble];
    }
    set [_debugDidReassemble$](value) {
      this[_debugDidReassemble] = value;
    }
    get debugHooks() {
      ;
      return (() => {
        let t0 = T$.JSArrayOfHookStateOfObjectN$HookOfObjectN().of([]);
        for (let hook of this[_hooks$])
          t0.push(hook.value);
        return t0;
      })();
    }
    update(newWidget) {
      framework.Widget.as(newWidget);
      this[_isOptionalRebuild] = false;
      super.update(newWidget);
    }
    didChangeDependencies() {
      this[_isOptionalRebuild] = false;
      super.didChangeDependencies();
    }
    reassemble() {
      super.reassemble();
      this[_isOptionalRebuild] = false;
      this[_debugDidReassemble$] = true;
      for (let hook of this[_hooks$]) {
        hook.value.reassemble();
      }
    }
    build() {
      let mustRebuild = this[_isOptionalRebuild] !== true || this[_shouldRebuildQueue][$any](dart.fn(cb => cb.value(), T$._EntryOfVoidToboolTobool()));
      this[_isOptionalRebuild] = null;
      this[_shouldRebuildQueue].clear();
      if (!mustRebuild) {
        return dart.nullCheck(this[_buildCache$]);
      }
      {
        this[_debugIsInitHook$] = false;
      }
      this[_currentHookState$] = this[_hooks$].isEmpty ? null : this[_hooks$].first;
      framework$.HookElement._currentHookElement = this;
      try {
        this[_buildCache$] = super.build();
      } finally {
        this[_isOptionalRebuild] = null;
        framework$['_extension#0|_unmountAllRemainingHooks'](this);
        framework$.HookElement._currentHookElement = null;
        if (this[_needDispose$] != null && dart.nullCheck(this[_needDispose$])[$isNotEmpty]) {
          for (let toDispose = dart.nullCheck(this[_needDispose$]).last; toDispose != null; toDispose = toDispose.previous) {
            toDispose.value.dispose();
          }
          this[_needDispose$] = null;
        }
      }
      return dart.nullCheck(this[_buildCache$]);
    }
    [_use](R, hook) {
      let t1;
      if (this[_currentHookState$] == null) {
        framework$['_extension#0|_appendHook'](R, this, hook);
      } else if (!hook[$runtimeType]._equals(dart.nullCheck(this[_currentHookState$]).value.hook[$runtimeType])) {
        let previousHookType = dart.nullCheck(this[_currentHookState$]).value.hook[$runtimeType];
        framework$['_extension#0|_unmountAllRemainingHooks'](this);
        if (true && this[_debugDidReassemble$]) {
          framework$['_extension#0|_appendHook'](R, this, hook);
        } else {
          dart.throw(new core.StateError.new("Type mismatch between hooks:\n- previous hook: " + dart.str(previousHookType) + "\n- new hook: " + dart.str(hook[$runtimeType]) + "\n"));
        }
      } else if (!hook[$_equals](dart.nullCheck(this[_currentHookState$]).value.hook)) {
        let previousHook = dart.nullCheck(this[_currentHookState$]).value.hook;
        if (framework$.Hook.shouldPreserveState(previousHook, hook)) {
          t1 = dart.nullCheck(this[_currentHookState$]).value;
          (() => {
            t1[_hook$] = hook;
            t1.didUpdateHook(previousHook);
            return t1;
          })();
        } else {
          this[_needDispose$] == null ? this[_needDispose$] = new (T$.LinkedListOf_EntryOfHookStateOfObjectN$HookOfObjectN()).new() : null;
          dart.nullCheck(this[_needDispose$]).add(new (T$._EntryOfHookStateOfObjectN$HookOfObjectN()).new(dart.nullCheck(this[_currentHookState$]).value));
          dart.nullCheck(this[_currentHookState$]).value = framework$['_extension#0|_createHookState'](R, this, hook);
        }
      }
      let result = R.as(dart.nullCheck(this[_currentHookState$]).value.build(this));
      if (!dart.fn(() => {
        dart.nullCheck(this[_currentHookState$]).value[_debugLastBuiltValue$] = result;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed("", I[2], 465, 12, "() {\n      _currentHookState!.value._debugLastBuiltValue = result;\n      return true;\n    }()");
      this[_currentHookState$] = dart.nullCheck(this[_currentHookState$]).next;
      return result;
    }
    dependOnInheritedWidgetOfExactType(T, opts) {
      let aspect = opts && 'aspect' in opts ? opts.aspect : null;
      if (!!this[_debugIsInitHook$]) dart.assertFailed("Cannot listen to inherited widgets inside HookState.initState." + " Use HookState.build instead", I[2], 478, 7, "!_debugIsInitHook");
      return super.dependOnInheritedWidgetOfExactType(T, {aspect: aspect});
    }
    unmount() {
      super.unmount();
      if (this[_hooks$][$isNotEmpty]) {
        for (let hook = this[_hooks$].last; hook != null; hook = hook.previous) {
          try {
            hook.value.dispose();
          } catch (e) {
            let exception = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            if (core.Object.is(exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "hooks library", context: diagnostics.DiagnosticsNode.message("while disposing " + dart.str(dart.runtimeType(hook)))}));
            } else
              throw e;
          }
        }
      }
    }
    deactivate() {
      for (let hook of this[_hooks$]) {
        try {
          hook.value.deactivate();
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "hooks library", context: diagnostics.DiagnosticsNode.message("while deactivating " + dart.str(hook[$runtimeType]))}));
          } else
            throw e;
        }
      }
      super.deactivate();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      for (let hookState of dart.nullCheck(this.debugHooks)) {
        if (hookState.debugHasShortDescription) {
          if (hookState.debugSkipValue) {
            properties.add(new diagnostics.StringProperty.new(dart.nullCheck(hookState.debugLabel), "", {ifEmpty: ""}));
          } else {
            properties.add(new diagnostics.DiagnosticsProperty.new(hookState.debugLabel, hookState.debugValue));
          }
        } else {
          properties.add(new (T$.DiagnosticsPropertyOfHookStateOfObjectN$HookOfObjectN()).new(hookState.debugLabel, hookState));
        }
      }
    }
  };
  (framework$.HookElement[dart.mixinNew] = function() {
    this[_currentHookState] = null;
    this[_hooks] = new (T$.LinkedListOf_EntryOfHookStateOfObjectN$HookOfObjectN()).new();
    this[_shouldRebuildQueue$] = new (T$.LinkedListOf_EntryOfVoidTobool()).new();
    this[_needDispose] = null;
    this[_isOptionalRebuild$] = false;
    this[_buildCache] = null;
    this[_debugIsInitHook] = false;
    this[_debugDidReassemble] = false;
  }).prototype = framework$.HookElement.prototype;
  dart.addTypeTests(framework$.HookElement);
  dart.addTypeCaches(framework$.HookElement);
  framework$.HookElement[dart.implements] = () => [framework.ComponentElement];
  dart.setMethodSignature(framework$.HookElement, () => ({
    __proto__: dart.getMethods(framework$.HookElement.__proto__),
    build: dart.fnType(framework.Widget, []),
    [_use]: dart.gFnType(R => [R, [framework$.Hook$(R)]], R => [dart.nullable(core.Object)]),
    dependOnInheritedWidgetOfExactType: dart.gFnType(T => [dart.nullable(T), [], {aspect: dart.nullable(core.Object)}, {}], T => [framework.InheritedWidget])
  }));
  dart.setGetterSignature(framework$.HookElement, () => ({
    __proto__: dart.getGetters(framework$.HookElement.__proto__),
    debugHooks: dart.nullable(core.List$(framework$.HookState$(dart.nullable(core.Object), framework$.Hook$(dart.nullable(core.Object)))))
  }));
  dart.setLibraryUri(framework$.HookElement, I[1]);
  dart.setFieldSignature(framework$.HookElement, () => ({
    __proto__: dart.getFields(framework$.HookElement.__proto__),
    [_currentHookState$]: dart.fieldType(dart.nullable(framework$._Entry$(framework$.HookState$(dart.nullable(core.Object), framework$.Hook$(dart.nullable(core.Object)))))),
    [_hooks$]: dart.finalFieldType(collection.LinkedList$(framework$._Entry$(framework$.HookState$(dart.nullable(core.Object), framework$.Hook$(dart.nullable(core.Object)))))),
    [_shouldRebuildQueue]: dart.finalFieldType(collection.LinkedList$(framework$._Entry$(dart.fnType(core.bool, [])))),
    [_needDispose$]: dart.fieldType(dart.nullable(collection.LinkedList$(framework$._Entry$(framework$.HookState$(dart.nullable(core.Object), framework$.Hook$(dart.nullable(core.Object))))))),
    [_isOptionalRebuild]: dart.fieldType(dart.nullable(core.bool)),
    [_buildCache$]: dart.fieldType(dart.nullable(framework.Widget)),
    [_debugIsInitHook$]: dart.fieldType(core.bool),
    [_debugDidReassemble$]: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(framework$.HookElement, () => ['_currentHookElement']);
  dart.defineLazy(framework$.HookElement, {
    /*framework$.HookElement._currentHookElement*/get _currentHookElement() {
      return null;
    },
    set _currentHookElement(value) {}
  }, false);
  const StatelessElement_HookElement$36 = class StatelessElement_HookElement extends framework.StatelessElement {};
  (StatelessElement_HookElement$36.new = function(widget) {
    framework$.HookElement[dart.mixinNew].call(this);
    StatelessElement_HookElement$36.__proto__.new.call(this, widget);
  }).prototype = StatelessElement_HookElement$36.prototype;
  dart.applyMixin(StatelessElement_HookElement$36, framework$.HookElement);
  framework$._StatelessHookElement = class _StatelessHookElement extends StatelessElement_HookElement$36 {
    static ['_#new#tearOff'](hooks) {
      return new framework$._StatelessHookElement.new(hooks);
    }
  };
  (framework$._StatelessHookElement.new = function(hooks) {
    framework$._StatelessHookElement.__proto__.new.call(this, hooks);
    ;
  }).prototype = framework$._StatelessHookElement.prototype;
  dart.addTypeTests(framework$._StatelessHookElement);
  dart.addTypeCaches(framework$._StatelessHookElement);
  dart.setLibraryUri(framework$._StatelessHookElement, I[1]);
  framework$.StatefulHookWidget = class StatefulHookWidget extends framework.StatefulWidget {
    createElement() {
      return new framework$._StatefulHookElement.new(this);
    }
  };
  (framework$.StatefulHookWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    framework$.StatefulHookWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = framework$.StatefulHookWidget.prototype;
  dart.addTypeTests(framework$.StatefulHookWidget);
  dart.addTypeCaches(framework$.StatefulHookWidget);
  dart.setMethodSignature(framework$.StatefulHookWidget, () => ({
    __proto__: dart.getMethods(framework$.StatefulHookWidget.__proto__),
    createElement: dart.fnType(framework$._StatefulHookElement, [])
  }));
  dart.setLibraryUri(framework$.StatefulHookWidget, I[1]);
  const StatefulElement_HookElement$36 = class StatefulElement_HookElement extends framework.StatefulElement {};
  (StatefulElement_HookElement$36.new = function(widget) {
    framework$.HookElement[dart.mixinNew].call(this);
    StatefulElement_HookElement$36.__proto__.new.call(this, widget);
  }).prototype = StatefulElement_HookElement$36.prototype;
  dart.applyMixin(StatefulElement_HookElement$36, framework$.HookElement);
  framework$._StatefulHookElement = class _StatefulHookElement extends StatefulElement_HookElement$36 {
    static ['_#new#tearOff'](hooks) {
      return new framework$._StatefulHookElement.new(hooks);
    }
  };
  (framework$._StatefulHookElement.new = function(hooks) {
    framework$._StatefulHookElement.__proto__.new.call(this, hooks);
    ;
  }).prototype = framework$._StatefulHookElement.prototype;
  dart.addTypeTests(framework$._StatefulHookElement);
  dart.addTypeCaches(framework$._StatefulHookElement);
  dart.setLibraryUri(framework$._StatefulHookElement, I[1]);
  var builder$ = dart.privateName(framework$, "HookBuilder.builder");
  framework$.HookBuilder = class HookBuilder extends framework$.HookWidget {
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    static ['_#new#tearOff'](opts) {
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let key = opts && 'key' in opts ? opts.key : null;
      return new framework$.HookBuilder.new({builder: builder, key: key});
    }
    build(context) {
      let t3;
      t3 = context;
      return this.builder(t3);
    }
  };
  (framework$.HookBuilder.new = function(opts) {
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let key = opts && 'key' in opts ? opts.key : null;
    this[builder$] = builder;
    framework$.HookBuilder.__proto__.new.call(this, {key: key});
    ;
  }).prototype = framework$.HookBuilder.prototype;
  dart.addTypeTests(framework$.HookBuilder);
  dart.addTypeCaches(framework$.HookBuilder);
  dart.setMethodSignature(framework$.HookBuilder, () => ({
    __proto__: dart.getMethods(framework$.HookBuilder.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(framework$.HookBuilder, I[1]);
  dart.setFieldSignature(framework$.HookBuilder, () => ({
    __proto__: dart.getFields(framework$.HookBuilder.__proto__),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext]))
  }));
  framework$.use = function use(R, hook) {
    return framework$.Hook.use(R, hook);
  };
  framework$['_extension#0|_createHookState'] = function _extension$350$124_createHookState(R, $this, hook) {
    let t4;
    if (!dart.fn(() => {
      $this[_debugIsInitHook$] = true;
      return true;
    }, T$.VoidTobool())()) dart.assertFailed("", I[2], 310, 12, "() {\n      _debugIsInitHook = true;\n      return true;\n    }()");
    let state = (t4 = hook.createState(), (() => {
      t4[_element] = $this;
      t4[_hook$] = hook;
      t4.initHook();
      return t4;
    })());
    if (!dart.fn(() => {
      $this[_debugIsInitHook$] = false;
      return true;
    }, T$.VoidTobool())()) dart.assertFailed("", I[2], 320, 12, "() {\n      _debugIsInitHook = false;\n      return true;\n    }()");
    return state;
  };
  framework$['_extension#0|get#_createHookState'] = function _extension$350$124get$35_createHookState($this) {
    return dart.fn((R, hook) => framework$['_extension#0|_createHookState'](R, $this, hook), T$.HookOfRToHookStateOfR$HookOfR());
  };
  framework$['_extension#0|_appendHook'] = function _extension$350$124_appendHook(R, $this, hook) {
    let result = framework$['_extension#0|_createHookState'](R, $this, hook);
    $this[_currentHookState$] = new (T$._EntryOfHookStateOfObjectN$HookOfObjectN()).new(result);
    $this[_hooks$].add(dart.nullCheck($this[_currentHookState$]));
  };
  framework$['_extension#0|get#_appendHook'] = function _extension$350$124get$35_appendHook($this) {
    return dart.fn((R, hook) => framework$['_extension#0|_appendHook'](R, $this, hook), T$.HookOfRTovoid());
  };
  framework$['_extension#0|_unmountAllRemainingHooks'] = function _extension$350$124_unmountAllRemainingHooks($this) {
    let t8;
    if ($this[_currentHookState$] != null) {
      t8 = $this;
      t8[_needDispose$] == null ? t8[_needDispose$] = new (T$.LinkedListOf_EntryOfHookStateOfObjectN$HookOfObjectN()).new() : null;
      while ($this[_currentHookState$] != null) {
        let previousHookState = dart.nullCheck($this[_currentHookState$]);
        $this[_currentHookState$] = dart.nullCheck($this[_currentHookState$]).next;
        previousHookState.unlink();
        dart.nullCheck($this[_needDispose$]).add(previousHookState);
      }
    }
  };
  framework$['_extension#0|get#_unmountAllRemainingHooks'] = function _extension$350$124get$35_unmountAllRemainingHooks($this) {
    return dart.fn(() => framework$['_extension#0|_unmountAllRemainingHooks']($this), T$.VoidTovoid());
  };
  framework$.useContext = function useContext() {
    if (!(framework$.HookElement._currentHookElement != null)) dart.assertFailed("`useContext` can only be called from the build method of HookWidget", I[2], 598, 5, "HookElement._currentHookElement != null");
    return dart.nullCheck(framework$.HookElement._currentHookElement);
  };
  dart.defineLazy(framework$, {
    /*framework$.debugHotReloadHooksEnabled*/get debugHotReloadHooksEnabled() {
      return true;
    },
    set debugHotReloadHooksEnabled(value) {}
  }, false);
  var listenable$ = dart.privateName(hooks, "_ListenableHook.listenable");
  hooks._ListenableHook = class _ListenableHook extends framework$.Hook$(dart.void) {
    get listenable() {
      return this[listenable$];
    }
    set listenable(value) {
      super.listenable = value;
    }
    static ['_#new#tearOff'](listenable) {
      return new hooks._ListenableHook.new(listenable);
    }
    createState() {
      return new hooks._ListenableStateHook.new();
    }
  };
  (hooks._ListenableHook.new = function(listenable) {
    this[listenable$] = listenable;
    hooks._ListenableHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._ListenableHook.prototype;
  dart.addTypeTests(hooks._ListenableHook);
  dart.addTypeCaches(hooks._ListenableHook);
  dart.setMethodSignature(hooks._ListenableHook, () => ({
    __proto__: dart.getMethods(hooks._ListenableHook.__proto__),
    createState: dart.fnType(hooks._ListenableStateHook, [])
  }));
  dart.setLibraryUri(hooks._ListenableHook, I[3]);
  dart.setFieldSignature(hooks._ListenableHook, () => ({
    __proto__: dart.getFields(hooks._ListenableHook.__proto__),
    listenable: dart.finalFieldType(dart.nullable(change_notifier.Listenable))
  }));
  const _is__UseAnimationHook_default = Symbol('_is__UseAnimationHook_default');
  hooks._UseAnimationHook$ = dart.generic(T => {
    class _UseAnimationHook extends hooks._ListenableHook {
      static ['_#new#tearOff'](T, animation) {
        return new (hooks._UseAnimationHook$(T)).new(animation);
      }
      createState() {
        return new hooks._UseAnimationStateHook.new();
      }
    }
    (_UseAnimationHook.new = function(animation) {
      _UseAnimationHook.__proto__.new.call(this, animation);
      ;
    }).prototype = _UseAnimationHook.prototype;
    dart.addTypeTests(_UseAnimationHook);
    _UseAnimationHook.prototype[_is__UseAnimationHook_default] = true;
    dart.addTypeCaches(_UseAnimationHook);
    dart.setMethodSignature(_UseAnimationHook, () => ({
      __proto__: dart.getMethods(_UseAnimationHook.__proto__),
      createState: dart.fnType(hooks._UseAnimationStateHook, [])
    }));
    dart.setLibraryUri(_UseAnimationHook, I[3]);
    return _UseAnimationHook;
  });
  hooks._UseAnimationHook = hooks._UseAnimationHook$();
  dart.addTypeTests(hooks._UseAnimationHook, _is__UseAnimationHook_default);
  var _listener = dart.privateName(hooks, "_listener");
  hooks._ListenableStateHook = class _ListenableStateHook extends framework$.HookState$(dart.void, hooks._ListenableHook) {
    initHook() {
      let t9;
      super.initHook();
      t9 = this.hook.listenable;
      t9 == null ? null : t9.addListener(dart.bind(this, _listener));
    }
    didUpdateHook(oldHook) {
      let t9, t9$;
      hooks._ListenableHook.as(oldHook);
      super.didUpdateHook(oldHook);
      if (!dart.equals(this.hook.listenable, oldHook.listenable)) {
        t9 = oldHook.listenable;
        t9 == null ? null : t9.removeListener(dart.bind(this, _listener));
        t9$ = this.hook.listenable;
        t9$ == null ? null : t9$.addListener(dart.bind(this, _listener));
      }
    }
    build(context) {
    }
    [_listener]() {
      this.setState(dart.fn(() => {
      }, T$.VoidTovoid()));
    }
    dispose() {
      let t9;
      t9 = this.hook.listenable;
      t9 == null ? null : t9.removeListener(dart.bind(this, _listener));
    }
    get debugLabel() {
      return "useListenable";
    }
    get debugValue() {
      return this.hook.listenable;
    }
    static ['_#new#tearOff']() {
      return new hooks._ListenableStateHook.new();
    }
  };
  (hooks._ListenableStateHook.new = function() {
    hooks._ListenableStateHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._ListenableStateHook.prototype;
  dart.addTypeTests(hooks._ListenableStateHook);
  dart.addTypeCaches(hooks._ListenableStateHook);
  dart.setMethodSignature(hooks._ListenableStateHook, () => ({
    __proto__: dart.getMethods(hooks._ListenableStateHook.__proto__),
    build: dart.fnType(dart.void, [framework.BuildContext]),
    [_listener]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(hooks._ListenableStateHook, () => ({
    __proto__: dart.getGetters(hooks._ListenableStateHook.__proto__),
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._ListenableStateHook, I[3]);
  hooks._UseAnimationStateHook = class _UseAnimationStateHook extends hooks._ListenableStateHook {
    get debugLabel() {
      return "useAnimation";
    }
    get debugValue() {
      let t9;
      t9 = T$.AnimationN().as(this.hook.listenable);
      return t9 == null ? null : t9.value;
    }
    static ['_#new#tearOff']() {
      return new hooks._UseAnimationStateHook.new();
    }
  };
  (hooks._UseAnimationStateHook.new = function() {
    hooks._UseAnimationStateHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._UseAnimationStateHook.prototype;
  dart.addTypeTests(hooks._UseAnimationStateHook);
  dart.addTypeCaches(hooks._UseAnimationStateHook);
  dart.setLibraryUri(hooks._UseAnimationStateHook, I[3]);
  var duration$ = dart.privateName(hooks, "_AnimationControllerHook.duration");
  var reverseDuration$ = dart.privateName(hooks, "_AnimationControllerHook.reverseDuration");
  var debugLabel$ = dart.privateName(hooks, "_AnimationControllerHook.debugLabel");
  var initialValue$ = dart.privateName(hooks, "_AnimationControllerHook.initialValue");
  var lowerBound$ = dart.privateName(hooks, "_AnimationControllerHook.lowerBound");
  var upperBound$ = dart.privateName(hooks, "_AnimationControllerHook.upperBound");
  var vsync$ = dart.privateName(hooks, "_AnimationControllerHook.vsync");
  var animationBehavior$ = dart.privateName(hooks, "_AnimationControllerHook.animationBehavior");
  hooks._AnimationControllerHook = class _AnimationControllerHook extends framework$.Hook$(animation_controller.AnimationController) {
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get reverseDuration() {
      return this[reverseDuration$];
    }
    set reverseDuration(value) {
      super.reverseDuration = value;
    }
    get debugLabel() {
      return this[debugLabel$];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get initialValue() {
      return this[initialValue$];
    }
    set initialValue(value) {
      super.initialValue = value;
    }
    get lowerBound() {
      return this[lowerBound$];
    }
    set lowerBound(value) {
      super.lowerBound = value;
    }
    get upperBound() {
      return this[upperBound$];
    }
    set upperBound(value) {
      super.upperBound = value;
    }
    get vsync() {
      return this[vsync$];
    }
    set vsync(value) {
      super.vsync = value;
    }
    get animationBehavior() {
      return this[animationBehavior$];
    }
    set animationBehavior(value) {
      super.animationBehavior = value;
    }
    static ['_#new#tearOff'](opts) {
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let reverseDuration = opts && 'reverseDuration' in opts ? opts.reverseDuration : null;
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
      let lowerBound = opts && 'lowerBound' in opts ? opts.lowerBound : null;
      let upperBound = opts && 'upperBound' in opts ? opts.upperBound : null;
      let vsync = opts && 'vsync' in opts ? opts.vsync : null;
      let animationBehavior = opts && 'animationBehavior' in opts ? opts.animationBehavior : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return new hooks._AnimationControllerHook.new({duration: duration, reverseDuration: reverseDuration, debugLabel: debugLabel, initialValue: initialValue, lowerBound: lowerBound, upperBound: upperBound, vsync: vsync, animationBehavior: animationBehavior, keys: keys});
    }
    createState() {
      return new hooks._AnimationControllerHookState.new();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfDuration()).new("duration", this.duration));
      properties.add(new (T$.DiagnosticsPropertyOfDuration()).new("reverseDuration", this.reverseDuration));
    }
  };
  (hooks._AnimationControllerHook.new = function(opts) {
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let reverseDuration = opts && 'reverseDuration' in opts ? opts.reverseDuration : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
    let lowerBound = opts && 'lowerBound' in opts ? opts.lowerBound : null;
    let upperBound = opts && 'upperBound' in opts ? opts.upperBound : null;
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    let animationBehavior = opts && 'animationBehavior' in opts ? opts.animationBehavior : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    this[duration$] = duration;
    this[reverseDuration$] = reverseDuration;
    this[debugLabel$] = debugLabel;
    this[initialValue$] = initialValue;
    this[lowerBound$] = lowerBound;
    this[upperBound$] = upperBound;
    this[vsync$] = vsync;
    this[animationBehavior$] = animationBehavior;
    hooks._AnimationControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._AnimationControllerHook.prototype;
  dart.addTypeTests(hooks._AnimationControllerHook);
  dart.addTypeCaches(hooks._AnimationControllerHook);
  dart.setMethodSignature(hooks._AnimationControllerHook, () => ({
    __proto__: dart.getMethods(hooks._AnimationControllerHook.__proto__),
    createState: dart.fnType(hooks._AnimationControllerHookState, [])
  }));
  dart.setLibraryUri(hooks._AnimationControllerHook, I[3]);
  dart.setFieldSignature(hooks._AnimationControllerHook, () => ({
    __proto__: dart.getFields(hooks._AnimationControllerHook.__proto__),
    duration: dart.finalFieldType(dart.nullable(core.Duration)),
    reverseDuration: dart.finalFieldType(dart.nullable(core.Duration)),
    debugLabel: dart.finalFieldType(dart.nullable(core.String)),
    initialValue: dart.finalFieldType(core.double),
    lowerBound: dart.finalFieldType(core.double),
    upperBound: dart.finalFieldType(core.double),
    vsync: dart.finalFieldType(ticker.TickerProvider),
    animationBehavior: dart.finalFieldType(animation_controller.AnimationBehavior)
  }));
  var ___AnimationControllerHookState__animationController = dart.privateName(hooks, "_#_AnimationControllerHookState#_animationController");
  var _animationController = dart.privateName(hooks, "_animationController");
  hooks._AnimationControllerHookState = class _AnimationControllerHookState extends framework$.HookState$(animation_controller.AnimationController, hooks._AnimationControllerHook) {
    get [_animationController]() {
      let t10, t9;
      t9 = this[___AnimationControllerHookState__animationController];
      return t9 == null ? (t10 = new animation_controller.AnimationController.new({vsync: this.hook.vsync, duration: this.hook.duration, reverseDuration: this.hook.reverseDuration, debugLabel: this.hook.debugLabel, lowerBound: this.hook.lowerBound, upperBound: this.hook.upperBound, animationBehavior: this.hook.animationBehavior, value: this.hook.initialValue}), this[___AnimationControllerHookState__animationController] == null ? this[___AnimationControllerHookState__animationController] = t10 : dart.throw(new _internal.LateError.fieldADI("_animationController"))) : t9;
    }
    didUpdateHook(oldHook) {
      hooks._AnimationControllerHook.as(oldHook);
      super.didUpdateHook(oldHook);
      if (!this.hook.vsync[$_equals](oldHook.vsync)) {
        this[_animationController].resync(this.hook.vsync);
      }
      if (!dart.equals(this.hook.duration, oldHook.duration)) {
        this[_animationController].duration = this.hook.duration;
      }
      if (!dart.equals(this.hook.reverseDuration, oldHook.reverseDuration)) {
        this[_animationController].reverseDuration = this.hook.reverseDuration;
      }
    }
    build(context) {
      return this[_animationController];
    }
    dispose() {
      this[_animationController].dispose();
    }
    get debugHasShortDescription() {
      return false;
    }
    get debugLabel() {
      return "useAnimationController";
    }
    static ['_#new#tearOff']() {
      return new hooks._AnimationControllerHookState.new();
    }
  };
  (hooks._AnimationControllerHookState.new = function() {
    this[___AnimationControllerHookState__animationController] = null;
    hooks._AnimationControllerHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._AnimationControllerHookState.prototype;
  dart.addTypeTests(hooks._AnimationControllerHookState);
  dart.addTypeCaches(hooks._AnimationControllerHookState);
  dart.setMethodSignature(hooks._AnimationControllerHookState, () => ({
    __proto__: dart.getMethods(hooks._AnimationControllerHookState.__proto__),
    build: dart.fnType(animation_controller.AnimationController, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._AnimationControllerHookState, () => ({
    __proto__: dart.getGetters(hooks._AnimationControllerHookState.__proto__),
    [_animationController]: animation_controller.AnimationController,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._AnimationControllerHookState, I[3]);
  dart.setFieldSignature(hooks._AnimationControllerHookState, () => ({
    __proto__: dart.getFields(hooks._AnimationControllerHookState.__proto__),
    [___AnimationControllerHookState__animationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController))
  }));
  hooks._SingleTickerProviderHook = class _SingleTickerProviderHook extends framework$.Hook$(ticker.TickerProvider) {
    static ['_#new#tearOff'](keys = null) {
      return new hooks._SingleTickerProviderHook.new(keys);
    }
    createState() {
      return new hooks._TickerProviderHookState.new();
    }
  };
  (hooks._SingleTickerProviderHook.new = function(keys = null) {
    hooks._SingleTickerProviderHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._SingleTickerProviderHook.prototype;
  dart.addTypeTests(hooks._SingleTickerProviderHook);
  dart.addTypeCaches(hooks._SingleTickerProviderHook);
  dart.setMethodSignature(hooks._SingleTickerProviderHook, () => ({
    __proto__: dart.getMethods(hooks._SingleTickerProviderHook.__proto__),
    createState: dart.fnType(hooks._TickerProviderHookState, [])
  }));
  dart.setLibraryUri(hooks._SingleTickerProviderHook, I[3]);
  var _ticker = dart.privateName(hooks, "_ticker");
  hooks._TickerProviderHookState = class _TickerProviderHookState extends framework$.HookState$(ticker.TickerProvider, hooks._SingleTickerProviderHook) {
    createTicker(onTick) {
      if (!dart.fn(() => {
        if (this[_ticker] == null) {
          return true;
        }
        dart.throw(assertions.FlutterError.new(dart.str(this.context.widget[$runtimeType]) + " attempted to use a useSingleTickerProvider multiple times.\n" + "A SingleTickerProviderStateMixin can only be used as a TickerProvider once. " + "If you need multiple Ticker, consider using useSingleTickerProvider multiple times " + "to create as many Tickers as needed."));
      }, T$.VoidTobool())()) dart.assertFailed("", I[4], 177, 12, "() {\n      if (_ticker == null) {\n        return true;\n      }\n      throw FlutterError(\n          '${context.widget.runtimeType} attempted to use a useSingleTickerProvider multiple times.\\n'\n          'A SingleTickerProviderStateMixin can only be used as a TickerProvider once. '\n          'If you need multiple Ticker, consider using useSingleTickerProvider multiple times '\n          'to create as many Tickers as needed.');\n    }()");
      return this[_ticker] = new ticker.Ticker.new(onTick, {debugLabel: "created by " + dart.str(this.context)});
    }
    dispose() {
      if (!dart.fn(() => {
        if (this[_ticker] == null || !dart.nullCheck(this[_ticker]).isActive) {
          return true;
        }
        dart.throw(assertions.FlutterError.new("useSingleTickerProvider created a Ticker, but at the time " + "dispose() was called on the Hook, that Ticker was still active. Tickers used " + " by AnimationControllers should be disposed by calling dispose() on " + " the AnimationController itself. Otherwise, the ticker will leak.\n"));
      }, T$.VoidTobool())()) dart.assertFailed("", I[4], 192, 12, "() {\n      if (_ticker == null || !_ticker!.isActive) {\n        return true;\n      }\n      throw FlutterError(\n          'useSingleTickerProvider created a Ticker, but at the time '\n          'dispose() was called on the Hook, that Ticker was still active. Tickers used '\n          ' by AnimationControllers should be disposed by calling dispose() on '\n          ' the AnimationController itself. Otherwise, the ticker will leak.\\n');\n    }()");
    }
    build(context) {
      if (this[_ticker] != null) {
        dart.nullCheck(this[_ticker]).muted = !ticker_provider.TickerMode.of(context);
      }
      return this;
    }
    get debugLabel() {
      return "useSingleTickerProvider";
    }
    get debugSkipValue() {
      return true;
    }
    static ['_#new#tearOff']() {
      return new hooks._TickerProviderHookState.new();
    }
  };
  (hooks._TickerProviderHookState.new = function() {
    this[_ticker] = null;
    hooks._TickerProviderHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._TickerProviderHookState.prototype;
  dart.addTypeTests(hooks._TickerProviderHookState);
  dart.addTypeCaches(hooks._TickerProviderHookState);
  hooks._TickerProviderHookState[dart.implements] = () => [ticker.TickerProvider];
  dart.setMethodSignature(hooks._TickerProviderHookState, () => ({
    __proto__: dart.getMethods(hooks._TickerProviderHookState.__proto__),
    createTicker: dart.fnType(ticker.Ticker, [dart.fnType(dart.void, [core.Duration])]),
    build: dart.fnType(ticker.TickerProvider, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._TickerProviderHookState, () => ({
    __proto__: dart.getGetters(hooks._TickerProviderHookState.__proto__),
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._TickerProviderHookState, I[3]);
  dart.setFieldSignature(hooks._TickerProviderHookState, () => ({
    __proto__: dart.getFields(hooks._TickerProviderHookState.__proto__),
    [_ticker]: dart.fieldType(dart.nullable(ticker.Ticker))
  }));
  var future$ = dart.privateName(hooks, "_FutureHook.future");
  var preserveState$ = dart.privateName(hooks, "_FutureHook.preserveState");
  var initialData$ = dart.privateName(hooks, "_FutureHook.initialData");
  const _is__FutureHook_default = Symbol('_is__FutureHook_default');
  hooks._FutureHook$ = dart.generic(T => {
    var __t$_FutureStateHookOfT = () => (__t$_FutureStateHookOfT = dart.constFn(hooks._FutureStateHook$(T)))();
    class _FutureHook extends framework$.Hook$(async$.AsyncSnapshot$(T)) {
      get future() {
        return this[future$];
      }
      set future(value) {
        super.future = value;
      }
      get preserveState() {
        return this[preserveState$];
      }
      set preserveState(value) {
        super.preserveState = value;
      }
      get initialData() {
        return this[initialData$];
      }
      set initialData(value) {
        super.initialData = value;
      }
      static ['_#new#tearOff'](T, future, opts) {
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        let preserveState = opts && 'preserveState' in opts ? opts.preserveState : true;
        return new (hooks._FutureHook$(T)).new(future, {initialData: initialData, preserveState: preserveState});
      }
      createState() {
        return new (__t$_FutureStateHookOfT()).new();
      }
    }
    (_FutureHook.new = function(future, opts) {
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      let preserveState = opts && 'preserveState' in opts ? opts.preserveState : true;
      this[future$] = future;
      this[initialData$] = initialData;
      this[preserveState$] = preserveState;
      _FutureHook.__proto__.new.call(this);
      ;
    }).prototype = _FutureHook.prototype;
    dart.addTypeTests(_FutureHook);
    _FutureHook.prototype[_is__FutureHook_default] = true;
    dart.addTypeCaches(_FutureHook);
    dart.setMethodSignature(_FutureHook, () => ({
      __proto__: dart.getMethods(_FutureHook.__proto__),
      createState: dart.fnType(hooks._FutureStateHook$(T), [])
    }));
    dart.setLibraryUri(_FutureHook, I[3]);
    dart.setFieldSignature(_FutureHook, () => ({
      __proto__: dart.getFields(_FutureHook.__proto__),
      future: dart.finalFieldType(dart.nullable(async.Future$(T))),
      preserveState: dart.finalFieldType(core.bool),
      initialData: dart.finalFieldType(dart.nullable(T))
    }));
    return _FutureHook;
  });
  hooks._FutureHook = hooks._FutureHook$();
  dart.addTypeTests(hooks._FutureHook, _is__FutureHook_default);
  var _activeCallbackIdentity = dart.privateName(hooks, "_activeCallbackIdentity");
  var ___FutureStateHook__snapshot = dart.privateName(hooks, "_#_FutureStateHook#_snapshot");
  var _snapshot = dart.privateName(hooks, "_snapshot");
  var _subscribe = dart.privateName(hooks, "_subscribe");
  var _unsubscribe = dart.privateName(hooks, "_unsubscribe");
  const _is__FutureStateHook_default = Symbol('_is__FutureStateHook_default');
  hooks._FutureStateHook$ = dart.generic(T => {
    var __t$AsyncSnapshotOfT = () => (__t$AsyncSnapshotOfT = dart.constFn(async$.AsyncSnapshot$(T)))();
    var __t$_FutureHookOfT = () => (__t$_FutureHookOfT = dart.constFn(hooks._FutureHook$(T)))();
    var __t$TToNull = () => (__t$TToNull = dart.constFn(dart.fnType(core.Null, [T])))();
    class _FutureStateHook extends framework$.HookState$(async$.AsyncSnapshot$(T), hooks._FutureHook$(T)) {
      get [_snapshot]() {
        let t9;
        t9 = this[___FutureStateHook__snapshot];
        return t9 == null ? this[___FutureStateHook__snapshot] = this.initial : t9;
      }
      set [_snapshot](_snapshot$35param) {
        this[___FutureStateHook__snapshot] = _snapshot$35param;
      }
      get initial() {
        return this.hook.initialData == null ? new (__t$AsyncSnapshotOfT()).nothing() : new (__t$AsyncSnapshotOfT()).withData(async$.ConnectionState.none, T.as(this.hook.initialData));
      }
      initHook() {
        super.initHook();
        this[_subscribe]();
      }
      didUpdateHook(oldHook) {
        __t$_FutureHookOfT().as(oldHook);
        super.didUpdateHook(oldHook);
        if (!dart.equals(oldHook.future, this.hook.future)) {
          if (this[_activeCallbackIdentity] != null) {
            this[_unsubscribe]();
            if (this.hook.preserveState) {
              this[_snapshot] = this[_snapshot].inState(async$.ConnectionState.none);
            } else {
              this[_snapshot] = this.initial;
            }
          }
          this[_subscribe]();
        }
      }
      dispose() {
        this[_unsubscribe]();
      }
      [_subscribe]() {
        if (this.hook.future != null) {
          let callbackIdentity = new core.Object.new();
          this[_activeCallbackIdentity] = callbackIdentity;
          dart.nullCheck(this.hook.future).then(dart.void, dart.fn(data => {
            if (dart.equals(this[_activeCallbackIdentity], callbackIdentity)) {
              this.setState(dart.fn(() => {
                this[_snapshot] = new (__t$AsyncSnapshotOfT()).withData(async$.ConnectionState.done, data);
              }, T$.VoidTovoid()));
            }
          }, __t$TToNull()), {onError: dart.fn((error, stackTrace) => {
              if (dart.equals(this[_activeCallbackIdentity], callbackIdentity)) {
                this.setState(dart.fn(() => {
                  this[_snapshot] = new (__t$AsyncSnapshotOfT()).withError(async$.ConnectionState.done, error, stackTrace);
                }, T$.VoidTovoid()));
              }
            }, T$.ObjectAndStackTraceToNull())});
          this[_snapshot] = this[_snapshot].inState(async$.ConnectionState.waiting);
        }
      }
      [_unsubscribe]() {
        this[_activeCallbackIdentity] = null;
      }
      build(context) {
        return this[_snapshot];
      }
      get debugLabel() {
        return "useFuture";
      }
      get debugValue() {
        return this[_snapshot];
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._FutureStateHook$(T)).new();
      }
    }
    (_FutureStateHook.new = function() {
      this[_activeCallbackIdentity] = null;
      this[___FutureStateHook__snapshot] = null;
      _FutureStateHook.__proto__.new.call(this);
      ;
    }).prototype = _FutureStateHook.prototype;
    dart.addTypeTests(_FutureStateHook);
    _FutureStateHook.prototype[_is__FutureStateHook_default] = true;
    dart.addTypeCaches(_FutureStateHook);
    dart.setMethodSignature(_FutureStateHook, () => ({
      __proto__: dart.getMethods(_FutureStateHook.__proto__),
      [_subscribe]: dart.fnType(dart.void, []),
      [_unsubscribe]: dart.fnType(dart.void, []),
      build: dart.fnType(async$.AsyncSnapshot$(T), [framework.BuildContext])
    }));
    dart.setGetterSignature(_FutureStateHook, () => ({
      __proto__: dart.getGetters(_FutureStateHook.__proto__),
      [_snapshot]: async$.AsyncSnapshot$(T),
      initial: async$.AsyncSnapshot$(T),
      debugLabel: core.String
    }));
    dart.setSetterSignature(_FutureStateHook, () => ({
      __proto__: dart.getSetters(_FutureStateHook.__proto__),
      [_snapshot]: async$.AsyncSnapshot$(T)
    }));
    dart.setLibraryUri(_FutureStateHook, I[3]);
    dart.setFieldSignature(_FutureStateHook, () => ({
      __proto__: dart.getFields(_FutureStateHook.__proto__),
      [_activeCallbackIdentity]: dart.fieldType(dart.nullable(core.Object)),
      [___FutureStateHook__snapshot]: dart.fieldType(dart.nullable(async$.AsyncSnapshot$(T)))
    }));
    return _FutureStateHook;
  });
  hooks._FutureStateHook = hooks._FutureStateHook$();
  dart.addTypeTests(hooks._FutureStateHook, _is__FutureStateHook_default);
  var stream$ = dart.privateName(hooks, "_StreamHook.stream");
  var initialData$0 = dart.privateName(hooks, "_StreamHook.initialData");
  var preserveState$0 = dart.privateName(hooks, "_StreamHook.preserveState");
  const _is__StreamHook_default = Symbol('_is__StreamHook_default');
  hooks._StreamHook$ = dart.generic(T => {
    var __t$_StreamHookStateOfT = () => (__t$_StreamHookStateOfT = dart.constFn(hooks._StreamHookState$(T)))();
    class _StreamHook extends framework$.Hook$(async$.AsyncSnapshot$(T)) {
      get stream() {
        return this[stream$];
      }
      set stream(value) {
        super.stream = value;
      }
      get initialData() {
        return this[initialData$0];
      }
      set initialData(value) {
        super.initialData = value;
      }
      get preserveState() {
        return this[preserveState$0];
      }
      set preserveState(value) {
        super.preserveState = value;
      }
      static ['_#new#tearOff'](T, stream, opts) {
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        let preserveState = opts && 'preserveState' in opts ? opts.preserveState : null;
        return new (hooks._StreamHook$(T)).new(stream, {initialData: initialData, preserveState: preserveState});
      }
      createState() {
        return new (__t$_StreamHookStateOfT()).new();
      }
    }
    (_StreamHook.new = function(stream, opts) {
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      let preserveState = opts && 'preserveState' in opts ? opts.preserveState : null;
      this[stream$] = stream;
      this[initialData$0] = initialData;
      this[preserveState$0] = preserveState;
      _StreamHook.__proto__.new.call(this);
      ;
    }).prototype = _StreamHook.prototype;
    dart.addTypeTests(_StreamHook);
    _StreamHook.prototype[_is__StreamHook_default] = true;
    dart.addTypeCaches(_StreamHook);
    dart.setMethodSignature(_StreamHook, () => ({
      __proto__: dart.getMethods(_StreamHook.__proto__),
      createState: dart.fnType(hooks._StreamHookState$(T), [])
    }));
    dart.setLibraryUri(_StreamHook, I[3]);
    dart.setFieldSignature(_StreamHook, () => ({
      __proto__: dart.getFields(_StreamHook.__proto__),
      stream: dart.finalFieldType(dart.nullable(async.Stream$(T))),
      initialData: dart.finalFieldType(dart.nullable(T)),
      preserveState: dart.finalFieldType(core.bool)
    }));
    return _StreamHook;
  });
  hooks._StreamHook = hooks._StreamHook$();
  dart.addTypeTests(hooks._StreamHook, _is__StreamHook_default);
  var _subscription = dart.privateName(hooks, "_subscription");
  var ___StreamHookState__summary = dart.privateName(hooks, "_#_StreamHookState#_summary");
  var _summary = dart.privateName(hooks, "_summary");
  const _is__StreamHookState_default = Symbol('_is__StreamHookState_default');
  hooks._StreamHookState$ = dart.generic(T => {
    var __t$_StreamHookOfT = () => (__t$_StreamHookOfT = dart.constFn(hooks._StreamHook$(T)))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var __t$AsyncSnapshotOfT = () => (__t$AsyncSnapshotOfT = dart.constFn(async$.AsyncSnapshot$(T)))();
    class _StreamHookState extends framework$.HookState$(async$.AsyncSnapshot$(T), hooks._StreamHook$(T)) {
      get [_summary]() {
        let t9;
        t9 = this[___StreamHookState__summary];
        return t9 == null ? this[___StreamHookState__summary] = this.initial : t9;
      }
      set [_summary](_summary$35param) {
        this[___StreamHookState__summary] = _summary$35param;
      }
      initHook() {
        super.initHook();
        this[_subscribe]();
      }
      didUpdateHook(oldWidget) {
        __t$_StreamHookOfT().as(oldWidget);
        super.didUpdateHook(oldWidget);
        if (!dart.equals(oldWidget.stream, this.hook.stream)) {
          if (this[_subscription] != null) {
            this[_unsubscribe]();
            if (this.hook.preserveState) {
              this[_summary] = this.afterDisconnected(this[_summary]);
            } else {
              this[_summary] = this.initial;
            }
          }
          this[_subscribe]();
        }
      }
      dispose() {
        this[_unsubscribe]();
      }
      [_subscribe]() {
        if (this.hook.stream != null) {
          this[_subscription] = dart.nullCheck(this.hook.stream).listen(dart.fn(data => {
            this.setState(dart.fn(() => {
              this[_summary] = this.afterData(data);
            }, T$.VoidTovoid()));
          }, __t$TTovoid()), {onError: dart.fn((error, stackTrace) => {
              this.setState(dart.fn(() => {
                this[_summary] = this.afterError(error, stackTrace);
              }, T$.VoidTovoid()));
            }, T$.ObjectAndStackTraceToNull()), onDone: dart.fn(() => {
              this.setState(dart.fn(() => {
                this[_summary] = this.afterDone(this[_summary]);
              }, T$.VoidTovoid()));
            }, T$.VoidTovoid())});
          this[_summary] = this.afterConnected(this[_summary]);
        }
      }
      [_unsubscribe]() {
        let t9;
        t9 = this[_subscription];
        t9 == null ? null : t9.cancel();
        this[_subscription] = null;
      }
      build(context) {
        return this[_summary];
      }
      get initial() {
        return this.hook.initialData == null ? new (__t$AsyncSnapshotOfT()).nothing() : new (__t$AsyncSnapshotOfT()).withData(async$.ConnectionState.none, T.as(this.hook.initialData));
      }
      afterConnected(current) {
        __t$AsyncSnapshotOfT().as(current);
        return current.inState(async$.ConnectionState.waiting);
      }
      afterData(data) {
        T.as(data);
        return new (__t$AsyncSnapshotOfT()).withData(async$.ConnectionState.active, data);
      }
      afterError(error, stackTrace) {
        return new (__t$AsyncSnapshotOfT()).withError(async$.ConnectionState.active, error, stackTrace);
      }
      afterDone(current) {
        __t$AsyncSnapshotOfT().as(current);
        return current.inState(async$.ConnectionState.done);
      }
      afterDisconnected(current) {
        __t$AsyncSnapshotOfT().as(current);
        return current.inState(async$.ConnectionState.none);
      }
      get debugLabel() {
        return "useStream";
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._StreamHookState$(T)).new();
      }
    }
    (_StreamHookState.new = function() {
      this[_subscription] = null;
      this[___StreamHookState__summary] = null;
      _StreamHookState.__proto__.new.call(this);
      ;
    }).prototype = _StreamHookState.prototype;
    dart.addTypeTests(_StreamHookState);
    _StreamHookState.prototype[_is__StreamHookState_default] = true;
    dart.addTypeCaches(_StreamHookState);
    dart.setMethodSignature(_StreamHookState, () => ({
      __proto__: dart.getMethods(_StreamHookState.__proto__),
      [_subscribe]: dart.fnType(dart.void, []),
      [_unsubscribe]: dart.fnType(dart.void, []),
      build: dart.fnType(async$.AsyncSnapshot$(T), [framework.BuildContext]),
      afterConnected: dart.fnType(async$.AsyncSnapshot$(T), [dart.nullable(core.Object)]),
      afterData: dart.fnType(async$.AsyncSnapshot$(T), [dart.nullable(core.Object)]),
      afterError: dart.fnType(async$.AsyncSnapshot$(T), [core.Object, core.StackTrace]),
      afterDone: dart.fnType(async$.AsyncSnapshot$(T), [dart.nullable(core.Object)]),
      afterDisconnected: dart.fnType(async$.AsyncSnapshot$(T), [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_StreamHookState, () => ({
      __proto__: dart.getGetters(_StreamHookState.__proto__),
      [_summary]: async$.AsyncSnapshot$(T),
      initial: async$.AsyncSnapshot$(T),
      debugLabel: core.String
    }));
    dart.setSetterSignature(_StreamHookState, () => ({
      __proto__: dart.getSetters(_StreamHookState.__proto__),
      [_summary]: async$.AsyncSnapshot$(T)
    }));
    dart.setLibraryUri(_StreamHookState, I[3]);
    dart.setFieldSignature(_StreamHookState, () => ({
      __proto__: dart.getFields(_StreamHookState.__proto__),
      [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [___StreamHookState__summary]: dart.fieldType(dart.nullable(async$.AsyncSnapshot$(T)))
    }));
    return _StreamHookState;
  });
  hooks._StreamHookState = hooks._StreamHookState$();
  dart.addTypeTests(hooks._StreamHookState, _is__StreamHookState_default);
  var sync$ = dart.privateName(hooks, "_StreamControllerHook.sync");
  var onListen$ = dart.privateName(hooks, "_StreamControllerHook.onListen");
  var onCancel$ = dart.privateName(hooks, "_StreamControllerHook.onCancel");
  const _is__StreamControllerHook_default = Symbol('_is__StreamControllerHook_default');
  hooks._StreamControllerHook$ = dart.generic(T => {
    var __t$_StreamControllerHookStateOfT = () => (__t$_StreamControllerHookStateOfT = dart.constFn(hooks._StreamControllerHookState$(T)))();
    class _StreamControllerHook extends framework$.Hook$(async.StreamController$(T)) {
      get sync() {
        return this[sync$];
      }
      set sync(value) {
        super.sync = value;
      }
      get onListen() {
        return this[onListen$];
      }
      set onListen(value) {
        super.onListen = value;
      }
      get onCancel() {
        return this[onCancel$];
      }
      set onCancel(value) {
        super.onCancel = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let sync = opts && 'sync' in opts ? opts.sync : null;
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let keys = opts && 'keys' in opts ? opts.keys : null;
        return new (hooks._StreamControllerHook$(T)).new({sync: sync, onListen: onListen, onCancel: onCancel, keys: keys});
      }
      createState() {
        return new (__t$_StreamControllerHookStateOfT()).new();
      }
    }
    (_StreamControllerHook.new = function(opts) {
      let sync = opts && 'sync' in opts ? opts.sync : null;
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      this[sync$] = sync;
      this[onListen$] = onListen;
      this[onCancel$] = onCancel;
      _StreamControllerHook.__proto__.new.call(this, {keys: keys});
      ;
    }).prototype = _StreamControllerHook.prototype;
    dart.addTypeTests(_StreamControllerHook);
    _StreamControllerHook.prototype[_is__StreamControllerHook_default] = true;
    dart.addTypeCaches(_StreamControllerHook);
    dart.setMethodSignature(_StreamControllerHook, () => ({
      __proto__: dart.getMethods(_StreamControllerHook.__proto__),
      createState: dart.fnType(hooks._StreamControllerHookState$(T), [])
    }));
    dart.setLibraryUri(_StreamControllerHook, I[3]);
    dart.setFieldSignature(_StreamControllerHook, () => ({
      __proto__: dart.getFields(_StreamControllerHook.__proto__),
      sync: dart.finalFieldType(core.bool),
      onListen: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
    }));
    return _StreamControllerHook;
  });
  hooks._StreamControllerHook = hooks._StreamControllerHook$();
  dart.addTypeTests(hooks._StreamControllerHook, _is__StreamControllerHook_default);
  var ___StreamControllerHookState__controller = dart.privateName(hooks, "_#_StreamControllerHookState#_controller");
  var ___StreamControllerHookState__controller_isSet = dart.privateName(hooks, "_#_StreamControllerHookState#_controller#isSet");
  var _controller = dart.privateName(hooks, "_controller");
  const _is__StreamControllerHookState_default = Symbol('_is__StreamControllerHookState_default');
  hooks._StreamControllerHookState$ = dart.generic(T => {
    var __t$StreamControllerOfT = () => (__t$StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    var __t$_StreamControllerHookOfT = () => (__t$_StreamControllerHookOfT = dart.constFn(hooks._StreamControllerHook$(T)))();
    class _StreamControllerHookState extends framework$.HookState$(async.StreamController$(T), hooks._StreamControllerHook$(T)) {
      get [_controller]() {
        let t10, t9;
        t9 = this[___StreamControllerHookState__controller];
        return t9 == null ? (t10 = __t$StreamControllerOfT().broadcast({sync: this.hook.sync, onCancel: this.hook.onCancel, onListen: this.hook.onListen}), this[___StreamControllerHookState__controller] == null ? this[___StreamControllerHookState__controller] = t10 : dart.throw(new _internal.LateError.fieldADI("_controller"))) : t9;
      }
      didUpdateHook(oldHook) {
        __t$_StreamControllerHookOfT().as(oldHook);
        super.didUpdateHook(oldHook);
        if (!dart.equals(oldHook.onListen, this.hook.onListen)) {
          this[_controller].onListen = this.hook.onListen;
        }
        if (!dart.equals(oldHook.onCancel, this.hook.onCancel)) {
          this[_controller].onCancel = this.hook.onCancel;
        }
      }
      build(context) {
        return this[_controller];
      }
      dispose() {
        this[_controller].close();
      }
      get debugLabel() {
        return "useStreamController";
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._StreamControllerHookState$(T)).new();
      }
    }
    (_StreamControllerHookState.new = function() {
      this[___StreamControllerHookState__controller] = null;
      this[___StreamControllerHookState__controller_isSet] = false;
      _StreamControllerHookState.__proto__.new.call(this);
      ;
    }).prototype = _StreamControllerHookState.prototype;
    dart.addTypeTests(_StreamControllerHookState);
    _StreamControllerHookState.prototype[_is__StreamControllerHookState_default] = true;
    dart.addTypeCaches(_StreamControllerHookState);
    dart.setMethodSignature(_StreamControllerHookState, () => ({
      __proto__: dart.getMethods(_StreamControllerHookState.__proto__),
      build: dart.fnType(async.StreamController$(T), [framework.BuildContext])
    }));
    dart.setGetterSignature(_StreamControllerHookState, () => ({
      __proto__: dart.getGetters(_StreamControllerHookState.__proto__),
      [_controller]: async.StreamController$(T),
      debugLabel: core.String
    }));
    dart.setLibraryUri(_StreamControllerHookState, I[3]);
    dart.setFieldSignature(_StreamControllerHookState, () => ({
      __proto__: dart.getFields(_StreamControllerHookState.__proto__),
      [___StreamControllerHookState__controller]: dart.fieldType(dart.nullable(async.StreamController$(T))),
      [___StreamControllerHookState__controller_isSet]: dart.fieldType(core.bool)
    }));
    return _StreamControllerHookState;
  });
  hooks._StreamControllerHookState = hooks._StreamControllerHookState$();
  dart.addTypeTests(hooks._StreamControllerHookState, _is__StreamControllerHookState_default);
  hooks._UseValueListenableHook = class _UseValueListenableHook extends hooks._ListenableHook {
    static ['_#new#tearOff'](animation) {
      return new hooks._UseValueListenableHook.new(animation);
    }
    createState() {
      return new hooks._UseValueListenableStateHook.new();
    }
  };
  (hooks._UseValueListenableHook.new = function(animation) {
    hooks._UseValueListenableHook.__proto__.new.call(this, animation);
    ;
  }).prototype = hooks._UseValueListenableHook.prototype;
  dart.addTypeTests(hooks._UseValueListenableHook);
  dart.addTypeCaches(hooks._UseValueListenableHook);
  dart.setMethodSignature(hooks._UseValueListenableHook, () => ({
    __proto__: dart.getMethods(hooks._UseValueListenableHook.__proto__),
    createState: dart.fnType(hooks._UseValueListenableStateHook, [])
  }));
  dart.setLibraryUri(hooks._UseValueListenableHook, I[3]);
  hooks._UseValueListenableStateHook = class _UseValueListenableStateHook extends hooks._ListenableStateHook {
    get debugLabel() {
      return "useValueListenable";
    }
    get debugValue() {
      let t9;
      t9 = T$.ValueListenableN().as(this.hook.listenable);
      return t9 == null ? null : t9.value;
    }
    static ['_#new#tearOff']() {
      return new hooks._UseValueListenableStateHook.new();
    }
  };
  (hooks._UseValueListenableStateHook.new = function() {
    hooks._UseValueListenableStateHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._UseValueListenableStateHook.prototype;
  dart.addTypeTests(hooks._UseValueListenableStateHook);
  dart.addTypeCaches(hooks._UseValueListenableStateHook);
  dart.setLibraryUri(hooks._UseValueListenableStateHook, I[3]);
  var initialData$1 = dart.privateName(hooks, "_ValueNotifierHook.initialData");
  const _is__ValueNotifierHook_default = Symbol('_is__ValueNotifierHook_default');
  hooks._ValueNotifierHook$ = dart.generic(T => {
    var __t$_UseValueNotifierHookStateOfT = () => (__t$_UseValueNotifierHookStateOfT = dart.constFn(hooks._UseValueNotifierHookState$(T)))();
    class _ValueNotifierHook extends framework$.Hook$(change_notifier.ValueNotifier$(T)) {
      get initialData() {
        return this[initialData$1];
      }
      set initialData(value) {
        super.initialData = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let keys = opts && 'keys' in opts ? opts.keys : null;
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        return new (hooks._ValueNotifierHook$(T)).new({keys: keys, initialData: initialData});
      }
      createState() {
        return new (__t$_UseValueNotifierHookStateOfT()).new();
      }
    }
    (_ValueNotifierHook.new = function(opts) {
      let keys = opts && 'keys' in opts ? opts.keys : null;
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      this[initialData$1] = initialData;
      _ValueNotifierHook.__proto__.new.call(this, {keys: keys});
      ;
    }).prototype = _ValueNotifierHook.prototype;
    dart.addTypeTests(_ValueNotifierHook);
    _ValueNotifierHook.prototype[_is__ValueNotifierHook_default] = true;
    dart.addTypeCaches(_ValueNotifierHook);
    dart.setMethodSignature(_ValueNotifierHook, () => ({
      __proto__: dart.getMethods(_ValueNotifierHook.__proto__),
      createState: dart.fnType(hooks._UseValueNotifierHookState$(T), [])
    }));
    dart.setLibraryUri(_ValueNotifierHook, I[3]);
    dart.setFieldSignature(_ValueNotifierHook, () => ({
      __proto__: dart.getFields(_ValueNotifierHook.__proto__),
      initialData: dart.finalFieldType(T)
    }));
    return _ValueNotifierHook;
  });
  hooks._ValueNotifierHook = hooks._ValueNotifierHook$();
  dart.addTypeTests(hooks._ValueNotifierHook, _is__ValueNotifierHook_default);
  var ___UseValueNotifierHookState_notifier = dart.privateName(hooks, "_#_UseValueNotifierHookState#notifier");
  var ___UseValueNotifierHookState_notifier_isSet = dart.privateName(hooks, "_#_UseValueNotifierHookState#notifier#isSet");
  const _is__UseValueNotifierHookState_default = Symbol('_is__UseValueNotifierHookState_default');
  hooks._UseValueNotifierHookState$ = dart.generic(T => {
    var __t$ValueNotifierOfT = () => (__t$ValueNotifierOfT = dart.constFn(change_notifier.ValueNotifier$(T)))();
    class _UseValueNotifierHookState extends framework$.HookState$(change_notifier.ValueNotifier$(T), hooks._ValueNotifierHook$(T)) {
      get notifier() {
        let t10, t9;
        t9 = this[___UseValueNotifierHookState_notifier];
        return t9 == null ? (t10 = new (__t$ValueNotifierOfT()).new(this.hook.initialData), this[___UseValueNotifierHookState_notifier] == null ? this[___UseValueNotifierHookState_notifier] = t10 : dart.throw(new _internal.LateError.fieldADI("notifier"))) : t9;
      }
      build(context) {
        return this.notifier;
      }
      dispose() {
        this.notifier.dispose();
      }
      get debugLabel() {
        return "useValueNotifier";
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._UseValueNotifierHookState$(T)).new();
      }
    }
    (_UseValueNotifierHookState.new = function() {
      this[___UseValueNotifierHookState_notifier] = null;
      this[___UseValueNotifierHookState_notifier_isSet] = false;
      _UseValueNotifierHookState.__proto__.new.call(this);
      ;
    }).prototype = _UseValueNotifierHookState.prototype;
    dart.addTypeTests(_UseValueNotifierHookState);
    _UseValueNotifierHookState.prototype[_is__UseValueNotifierHookState_default] = true;
    dart.addTypeCaches(_UseValueNotifierHookState);
    dart.setMethodSignature(_UseValueNotifierHookState, () => ({
      __proto__: dart.getMethods(_UseValueNotifierHookState.__proto__),
      build: dart.fnType(change_notifier.ValueNotifier$(T), [framework.BuildContext])
    }));
    dart.setGetterSignature(_UseValueNotifierHookState, () => ({
      __proto__: dart.getGetters(_UseValueNotifierHookState.__proto__),
      notifier: change_notifier.ValueNotifier$(T),
      debugLabel: core.String
    }));
    dart.setLibraryUri(_UseValueNotifierHookState, I[3]);
    dart.setFieldSignature(_UseValueNotifierHookState, () => ({
      __proto__: dart.getFields(_UseValueNotifierHookState.__proto__),
      [___UseValueNotifierHookState_notifier]: dart.fieldType(dart.nullable(change_notifier.ValueNotifier$(T))),
      [___UseValueNotifierHookState_notifier_isSet]: dart.fieldType(core.bool)
    }));
    return _UseValueNotifierHookState;
  });
  hooks._UseValueNotifierHookState = hooks._UseValueNotifierHookState$();
  dart.addTypeTests(hooks._UseValueNotifierHookState, _is__UseValueNotifierHookState_default);
  const _is_Store_default = Symbol('_is_Store_default');
  hooks.Store$ = dart.generic((State, Action) => {
    class Store extends core.Object {}
    (Store.new = function() {
      ;
    }).prototype = Store.prototype;
    dart.addTypeTests(Store);
    Store.prototype[_is_Store_default] = true;
    dart.addTypeCaches(Store);
    dart.setLibraryUri(Store, I[3]);
    return Store;
  });
  hooks.Store = hooks.Store$();
  dart.addTypeTests(hooks.Store, _is_Store_default);
  var reducer$ = dart.privateName(hooks, "_ReducerHook.reducer");
  var initialState$ = dart.privateName(hooks, "_ReducerHook.initialState");
  var initialAction$ = dart.privateName(hooks, "_ReducerHook.initialAction");
  const _is__ReducerHook_default = Symbol('_is__ReducerHook_default');
  hooks._ReducerHook$ = dart.generic((State, Action) => {
    var __t$_ReducerHookStateOfState$Action = () => (__t$_ReducerHookStateOfState$Action = dart.constFn(hooks._ReducerHookState$(State, Action)))();
    class _ReducerHook extends framework$.Hook$(hooks.Store$(State, Action)) {
      get reducer() {
        return this[reducer$];
      }
      set reducer(value) {
        super.reducer = value;
      }
      get initialState() {
        return this[initialState$];
      }
      set initialState(value) {
        super.initialState = value;
      }
      get initialAction() {
        return this[initialAction$];
      }
      set initialAction(value) {
        super.initialAction = value;
      }
      static ['_#new#tearOff'](State, Action, reducer, opts) {
        let initialState = opts && 'initialState' in opts ? opts.initialState : null;
        let initialAction = opts && 'initialAction' in opts ? opts.initialAction : null;
        return new (hooks._ReducerHook$(State, Action)).new(reducer, {initialState: initialState, initialAction: initialAction});
      }
      createState() {
        return new (__t$_ReducerHookStateOfState$Action()).new();
      }
    }
    (_ReducerHook.new = function(reducer, opts) {
      let initialState = opts && 'initialState' in opts ? opts.initialState : null;
      let initialAction = opts && 'initialAction' in opts ? opts.initialAction : null;
      this[reducer$] = reducer;
      this[initialState$] = initialState;
      this[initialAction$] = initialAction;
      _ReducerHook.__proto__.new.call(this);
      ;
    }).prototype = _ReducerHook.prototype;
    dart.addTypeTests(_ReducerHook);
    _ReducerHook.prototype[_is__ReducerHook_default] = true;
    dart.addTypeCaches(_ReducerHook);
    dart.setMethodSignature(_ReducerHook, () => ({
      __proto__: dart.getMethods(_ReducerHook.__proto__),
      createState: dart.fnType(hooks._ReducerHookState$(State, Action), [])
    }));
    dart.setLibraryUri(_ReducerHook, I[3]);
    dart.setFieldSignature(_ReducerHook, () => ({
      __proto__: dart.getFields(_ReducerHook.__proto__),
      reducer: dart.finalFieldType(dart.fnType(State, [State, Action])),
      initialState: dart.finalFieldType(State),
      initialAction: dart.finalFieldType(Action)
    }));
    return _ReducerHook;
  });
  hooks._ReducerHook = hooks._ReducerHook$();
  dart.addTypeTests(hooks._ReducerHook, _is__ReducerHook_default);
  var ___ReducerHookState_state = dart.privateName(hooks, "_#_ReducerHookState#state");
  var ___ReducerHookState_state_isSet = dart.privateName(hooks, "_#_ReducerHookState#state#isSet");
  const _is__ReducerHookState_default = Symbol('_is__ReducerHookState_default');
  hooks._ReducerHookState$ = dart.generic((State, Action) => {
    var __t$StateAndActionToState = () => (__t$StateAndActionToState = dart.constFn(dart.fnType(State, [State, Action])))();
    class _ReducerHookState extends framework$.HookState$(hooks.Store$(State, Action), hooks._ReducerHook$(State, Action)) {
      get state() {
        let t11, t10, t9, t9$;
        if (!this[___ReducerHookState_state_isSet]) {
          this[___ReducerHookState_state] = (t9 = this.hook, t10 = this.hook.initialState, t11 = this.hook.initialAction, __t$StateAndActionToState().as(t9.reducer)(t10, t11));
          this[___ReducerHookState_state_isSet] = true;
        }
        t9$ = this[___ReducerHookState_state];
        return t9$;
      }
      set state(state$35param) {
        State.as(state$35param);
        this[___ReducerHookState_state_isSet] = true;
        this[___ReducerHookState_state] = state$35param;
      }
      initHook() {
        super.initHook();
        this.state;
      }
      dispatch(action) {
        let t11, t10, t9;
        Action.as(action);
        let newState = (t9 = this.hook, t10 = this.state, t11 = action, __t$StateAndActionToState().as(t9.reducer)(t10, t11));
        if (!dart.equals(this.state, newState)) {
          this.setState(dart.fn(() => this.state = newState, T$.VoidTovoid()));
        }
      }
      build(context) {
        return this;
      }
      get debugLabel() {
        return "useReducer";
      }
      get debugValue() {
        return this.state;
      }
      static ['_#new#tearOff'](State, Action) {
        return new (hooks._ReducerHookState$(State, Action)).new();
      }
    }
    (_ReducerHookState.new = function() {
      this[___ReducerHookState_state] = null;
      this[___ReducerHookState_state_isSet] = false;
      _ReducerHookState.__proto__.new.call(this);
      ;
    }).prototype = _ReducerHookState.prototype;
    dart.addTypeTests(_ReducerHookState);
    _ReducerHookState.prototype[_is__ReducerHookState_default] = true;
    dart.addTypeCaches(_ReducerHookState);
    _ReducerHookState[dart.implements] = () => [hooks.Store$(State, Action)];
    dart.setMethodSignature(_ReducerHookState, () => ({
      __proto__: dart.getMethods(_ReducerHookState.__proto__),
      dispatch: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      build: dart.fnType(hooks.Store$(State, Action), [framework.BuildContext])
    }));
    dart.setGetterSignature(_ReducerHookState, () => ({
      __proto__: dart.getGetters(_ReducerHookState.__proto__),
      state: State,
      debugLabel: core.String
    }));
    dart.setSetterSignature(_ReducerHookState, () => ({
      __proto__: dart.getSetters(_ReducerHookState.__proto__),
      state: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(_ReducerHookState, I[3]);
    dart.setFieldSignature(_ReducerHookState, () => ({
      __proto__: dart.getFields(_ReducerHookState.__proto__),
      [___ReducerHookState_state]: dart.fieldType(dart.nullable(State)),
      [___ReducerHookState_state_isSet]: dart.fieldType(core.bool)
    }));
    return _ReducerHookState;
  });
  hooks._ReducerHookState = hooks._ReducerHookState$();
  dart.addTypeTests(hooks._ReducerHookState, _is__ReducerHookState_default);
  var value$0 = dart.privateName(hooks, "_PreviousHook.value");
  const _is__PreviousHook_default = Symbol('_is__PreviousHook_default');
  hooks._PreviousHook$ = dart.generic(T => {
    var __t$_PreviousHookStateOfT = () => (__t$_PreviousHookStateOfT = dart.constFn(hooks._PreviousHookState$(T)))();
    class _PreviousHook extends framework$.Hook$(dart.nullable(T)) {
      get value() {
        return this[value$0];
      }
      set value(value) {
        super.value = value;
      }
      static ['_#new#tearOff'](T, value) {
        return new (hooks._PreviousHook$(T)).new(value);
      }
      createState() {
        return new (__t$_PreviousHookStateOfT()).new();
      }
    }
    (_PreviousHook.new = function(value) {
      this[value$0] = value;
      _PreviousHook.__proto__.new.call(this);
      ;
    }).prototype = _PreviousHook.prototype;
    dart.addTypeTests(_PreviousHook);
    _PreviousHook.prototype[_is__PreviousHook_default] = true;
    dart.addTypeCaches(_PreviousHook);
    dart.setMethodSignature(_PreviousHook, () => ({
      __proto__: dart.getMethods(_PreviousHook.__proto__),
      createState: dart.fnType(hooks._PreviousHookState$(T), [])
    }));
    dart.setLibraryUri(_PreviousHook, I[3]);
    dart.setFieldSignature(_PreviousHook, () => ({
      __proto__: dart.getFields(_PreviousHook.__proto__),
      value: dart.finalFieldType(T)
    }));
    return _PreviousHook;
  });
  hooks._PreviousHook = hooks._PreviousHook$();
  dart.addTypeTests(hooks._PreviousHook, _is__PreviousHook_default);
  var previous = dart.privateName(hooks, "_PreviousHookState.previous");
  const _is__PreviousHookState_default = Symbol('_is__PreviousHookState_default');
  hooks._PreviousHookState$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$_PreviousHookOfT = () => (__t$_PreviousHookOfT = dart.constFn(hooks._PreviousHook$(T)))();
    class _PreviousHookState extends framework$.HookState$(dart.nullable(T), hooks._PreviousHook$(T)) {
      get previous() {
        return this[previous];
      }
      set previous(value) {
        this[previous] = __t$TN().as(value);
      }
      didUpdateHook(old) {
        __t$_PreviousHookOfT().as(old);
        this.previous = old.value;
      }
      build(context) {
        return this.previous;
      }
      get debugLabel() {
        return "usePrevious";
      }
      get debugValue() {
        return this.previous;
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._PreviousHookState$(T)).new();
      }
    }
    (_PreviousHookState.new = function() {
      this[previous] = null;
      _PreviousHookState.__proto__.new.call(this);
      ;
    }).prototype = _PreviousHookState.prototype;
    dart.addTypeTests(_PreviousHookState);
    _PreviousHookState.prototype[_is__PreviousHookState_default] = true;
    dart.addTypeCaches(_PreviousHookState);
    dart.setMethodSignature(_PreviousHookState, () => ({
      __proto__: dart.getMethods(_PreviousHookState.__proto__),
      build: dart.fnType(dart.nullable(T), [framework.BuildContext])
    }));
    dart.setGetterSignature(_PreviousHookState, () => ({
      __proto__: dart.getGetters(_PreviousHookState.__proto__),
      debugLabel: core.String
    }));
    dart.setLibraryUri(_PreviousHookState, I[3]);
    dart.setFieldSignature(_PreviousHookState, () => ({
      __proto__: dart.getFields(_PreviousHookState.__proto__),
      previous: dart.fieldType(dart.nullable(T))
    }));
    return _PreviousHookState;
  });
  hooks._PreviousHookState = hooks._PreviousHookState$();
  dart.addTypeTests(hooks._PreviousHookState, _is__PreviousHookState_default);
  var callback$ = dart.privateName(hooks, "_ReassembleHook.callback");
  hooks._ReassembleHook = class _ReassembleHook extends framework$.Hook$(dart.void) {
    get callback() {
      return this[callback$];
    }
    set callback(value) {
      super.callback = value;
    }
    static ['_#new#tearOff'](callback) {
      return new hooks._ReassembleHook.new(callback);
    }
    createState() {
      return new hooks._ReassembleHookState.new();
    }
  };
  (hooks._ReassembleHook.new = function(callback) {
    this[callback$] = callback;
    hooks._ReassembleHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._ReassembleHook.prototype;
  dart.addTypeTests(hooks._ReassembleHook);
  dart.addTypeCaches(hooks._ReassembleHook);
  dart.setMethodSignature(hooks._ReassembleHook, () => ({
    __proto__: dart.getMethods(hooks._ReassembleHook.__proto__),
    createState: dart.fnType(hooks._ReassembleHookState, [])
  }));
  dart.setLibraryUri(hooks._ReassembleHook, I[3]);
  dart.setFieldSignature(hooks._ReassembleHook, () => ({
    __proto__: dart.getFields(hooks._ReassembleHook.__proto__),
    callback: dart.finalFieldType(dart.fnType(dart.void, []))
  }));
  hooks._ReassembleHookState = class _ReassembleHookState extends framework$.HookState$(dart.void, hooks._ReassembleHook) {
    reassemble() {
      super.reassemble();
      this.hook.callback();
    }
    build(context) {
    }
    get debugLabel() {
      return "useReassemble";
    }
    get debugSkipValue() {
      return true;
    }
    static ['_#new#tearOff']() {
      return new hooks._ReassembleHookState.new();
    }
  };
  (hooks._ReassembleHookState.new = function() {
    hooks._ReassembleHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._ReassembleHookState.prototype;
  dart.addTypeTests(hooks._ReassembleHookState);
  dart.addTypeCaches(hooks._ReassembleHookState);
  dart.setMethodSignature(hooks._ReassembleHookState, () => ({
    __proto__: dart.getMethods(hooks._ReassembleHookState.__proto__),
    build: dart.fnType(dart.void, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._ReassembleHookState, () => ({
    __proto__: dart.getGetters(hooks._ReassembleHookState.__proto__),
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._ReassembleHookState, I[3]);
  hooks._IsMountedHook = class _IsMountedHook extends framework$.Hook$(dart.fnType(core.bool, [])) {
    static ['_#new#tearOff']() {
      return new hooks._IsMountedHook.new();
    }
    createState() {
      return new hooks._IsMountedHookState.new();
    }
  };
  (hooks._IsMountedHook.new = function() {
    hooks._IsMountedHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._IsMountedHook.prototype;
  dart.addTypeTests(hooks._IsMountedHook);
  dart.addTypeCaches(hooks._IsMountedHook);
  dart.setMethodSignature(hooks._IsMountedHook, () => ({
    __proto__: dart.getMethods(hooks._IsMountedHook.__proto__),
    createState: dart.fnType(hooks._IsMountedHookState, [])
  }));
  dart.setLibraryUri(hooks._IsMountedHook, I[3]);
  var _mounted = dart.privateName(hooks, "_mounted");
  var _isMounted = dart.privateName(hooks, "_isMounted");
  hooks._IsMountedHookState = class _IsMountedHookState extends framework$.HookState$(dart.fnType(core.bool, []), hooks._IsMountedHook) {
    build(context) {
      return dart.bind(this, _isMounted);
    }
    [_isMounted]() {
      return this[_mounted];
    }
    dispose() {
      this[_mounted] = false;
      super.dispose();
    }
    get debugLabel() {
      return "useIsMounted";
    }
    get debugValue() {
      return this[_mounted];
    }
    static ['_#new#tearOff']() {
      return new hooks._IsMountedHookState.new();
    }
  };
  (hooks._IsMountedHookState.new = function() {
    this[_mounted] = true;
    hooks._IsMountedHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._IsMountedHookState.prototype;
  dart.addTypeTests(hooks._IsMountedHookState);
  dart.addTypeCaches(hooks._IsMountedHookState);
  dart.setMethodSignature(hooks._IsMountedHookState, () => ({
    __proto__: dart.getMethods(hooks._IsMountedHookState.__proto__),
    build: dart.fnType(dart.fnType(core.bool, []), [framework.BuildContext]),
    [_isMounted]: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(hooks._IsMountedHookState, () => ({
    __proto__: dart.getGetters(hooks._IsMountedHookState.__proto__),
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._IsMountedHookState, I[3]);
  dart.setFieldSignature(hooks._IsMountedHookState, () => ({
    __proto__: dart.getFields(hooks._IsMountedHookState.__proto__),
    [_mounted]: dart.fieldType(core.bool)
  }));
  var value$1 = dart.privateName(hooks, "ObjectRef.value");
  const _is_ObjectRef_default = Symbol('_is_ObjectRef_default');
  hooks.ObjectRef$ = dart.generic(T => {
    class ObjectRef extends core.Object {
      get value() {
        return this[value$1];
      }
      set value(value) {
        this[value$1] = T.as(value);
      }
      static ['_#new#tearOff'](T, value) {
        return new (hooks.ObjectRef$(T)).new(value);
      }
    }
    (ObjectRef.new = function(value) {
      this[value$1] = value;
      ;
    }).prototype = ObjectRef.prototype;
    dart.addTypeTests(ObjectRef);
    ObjectRef.prototype[_is_ObjectRef_default] = true;
    dart.addTypeCaches(ObjectRef);
    dart.setLibraryUri(ObjectRef, I[3]);
    dart.setFieldSignature(ObjectRef, () => ({
      __proto__: dart.getFields(ObjectRef.__proto__),
      value: dart.fieldType(T)
    }));
    return ObjectRef;
  });
  hooks.ObjectRef = hooks.ObjectRef$();
  dart.addTypeTests(hooks.ObjectRef, _is_ObjectRef_default);
  var valueBuilder$ = dart.privateName(hooks, "_MemoizedHook.valueBuilder");
  const _is__MemoizedHook_default = Symbol('_is__MemoizedHook_default');
  hooks._MemoizedHook$ = dart.generic(T => {
    var __t$_MemoizedHookStateOfT = () => (__t$_MemoizedHookStateOfT = dart.constFn(hooks._MemoizedHookState$(T)))();
    class _MemoizedHook extends framework$.Hook$(T) {
      get valueBuilder() {
        return this[valueBuilder$];
      }
      set valueBuilder(value) {
        super.valueBuilder = value;
      }
      static ['_#new#tearOff'](T, valueBuilder, opts) {
        let keys = opts && 'keys' in opts ? opts.keys : null;
        return new (hooks._MemoizedHook$(T)).new(valueBuilder, {keys: keys});
      }
      createState() {
        return new (__t$_MemoizedHookStateOfT()).new();
      }
    }
    (_MemoizedHook.new = function(valueBuilder, opts) {
      let keys = opts && 'keys' in opts ? opts.keys : null;
      this[valueBuilder$] = valueBuilder;
      _MemoizedHook.__proto__.new.call(this, {keys: keys});
      ;
    }).prototype = _MemoizedHook.prototype;
    dart.addTypeTests(_MemoizedHook);
    _MemoizedHook.prototype[_is__MemoizedHook_default] = true;
    dart.addTypeCaches(_MemoizedHook);
    dart.setMethodSignature(_MemoizedHook, () => ({
      __proto__: dart.getMethods(_MemoizedHook.__proto__),
      createState: dart.fnType(hooks._MemoizedHookState$(T), [])
    }));
    dart.setLibraryUri(_MemoizedHook, I[3]);
    dart.setFieldSignature(_MemoizedHook, () => ({
      __proto__: dart.getFields(_MemoizedHook.__proto__),
      valueBuilder: dart.finalFieldType(dart.fnType(T, []))
    }));
    return _MemoizedHook;
  });
  hooks._MemoizedHook = hooks._MemoizedHook$();
  dart.addTypeTests(hooks._MemoizedHook, _is__MemoizedHook_default);
  var ___MemoizedHookState_value = dart.privateName(hooks, "_#_MemoizedHookState#value");
  var ___MemoizedHookState_value_isSet = dart.privateName(hooks, "_#_MemoizedHookState#value#isSet");
  const _is__MemoizedHookState_default = Symbol('_is__MemoizedHookState_default');
  hooks._MemoizedHookState$ = dart.generic(T => {
    class _MemoizedHookState extends framework$.HookState$(T, hooks._MemoizedHook$(T)) {
      get value() {
        let t10;
        if (!this[___MemoizedHookState_value_isSet]) {
          let t9 = this.hook.valueBuilder();
          if (this[___MemoizedHookState_value_isSet]) dart.throw(new _internal.LateError.fieldADI("value"));
          this[___MemoizedHookState_value] = t9;
          this[___MemoizedHookState_value_isSet] = true;
        }
        t10 = this[___MemoizedHookState_value];
        return t10;
      }
      build(context) {
        return this.value;
      }
      get debugLabel() {
        return "useMemoized<" + dart.str(dart.wrapType(T)) + ">";
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._MemoizedHookState$(T)).new();
      }
    }
    (_MemoizedHookState.new = function() {
      this[___MemoizedHookState_value] = null;
      this[___MemoizedHookState_value_isSet] = false;
      _MemoizedHookState.__proto__.new.call(this);
      ;
    }).prototype = _MemoizedHookState.prototype;
    dart.addTypeTests(_MemoizedHookState);
    _MemoizedHookState.prototype[_is__MemoizedHookState_default] = true;
    dart.addTypeCaches(_MemoizedHookState);
    dart.setMethodSignature(_MemoizedHookState, () => ({
      __proto__: dart.getMethods(_MemoizedHookState.__proto__),
      build: dart.fnType(T, [framework.BuildContext])
    }));
    dart.setGetterSignature(_MemoizedHookState, () => ({
      __proto__: dart.getGetters(_MemoizedHookState.__proto__),
      value: T,
      debugLabel: core.String
    }));
    dart.setLibraryUri(_MemoizedHookState, I[3]);
    dart.setFieldSignature(_MemoizedHookState, () => ({
      __proto__: dart.getFields(_MemoizedHookState.__proto__),
      [___MemoizedHookState_value]: dart.fieldType(dart.nullable(T)),
      [___MemoizedHookState_value_isSet]: dart.fieldType(core.bool)
    }));
    return _MemoizedHookState;
  });
  hooks._MemoizedHookState = hooks._MemoizedHookState$();
  dart.addTypeTests(hooks._MemoizedHookState, _is__MemoizedHookState_default);
  var valueChanged$ = dart.privateName(hooks, "_ValueChangedHook.valueChanged");
  var value$2 = dart.privateName(hooks, "_ValueChangedHook.value");
  const _is__ValueChangedHook_default = Symbol('_is__ValueChangedHook_default');
  hooks._ValueChangedHook$ = dart.generic((T, R) => {
    var __t$_ValueChangedHookStateOfT$R = () => (__t$_ValueChangedHookStateOfT$R = dart.constFn(hooks._ValueChangedHookState$(T, R)))();
    class _ValueChangedHook extends framework$.Hook$(dart.nullable(R)) {
      get valueChanged() {
        return this[valueChanged$];
      }
      set valueChanged(value) {
        super.valueChanged = value;
      }
      get value() {
        return this[value$2];
      }
      set value(value) {
        super.value = value;
      }
      static ['_#new#tearOff'](T, R, value, valueChanged) {
        return new (hooks._ValueChangedHook$(T, R)).new(value, valueChanged);
      }
      createState() {
        return new (__t$_ValueChangedHookStateOfT$R()).new();
      }
    }
    (_ValueChangedHook.new = function(value, valueChanged) {
      this[value$2] = value;
      this[valueChanged$] = valueChanged;
      _ValueChangedHook.__proto__.new.call(this);
      ;
    }).prototype = _ValueChangedHook.prototype;
    dart.addTypeTests(_ValueChangedHook);
    _ValueChangedHook.prototype[_is__ValueChangedHook_default] = true;
    dart.addTypeCaches(_ValueChangedHook);
    dart.setMethodSignature(_ValueChangedHook, () => ({
      __proto__: dart.getMethods(_ValueChangedHook.__proto__),
      createState: dart.fnType(hooks._ValueChangedHookState$(T, R), [])
    }));
    dart.setLibraryUri(_ValueChangedHook, I[3]);
    dart.setFieldSignature(_ValueChangedHook, () => ({
      __proto__: dart.getFields(_ValueChangedHook.__proto__),
      valueChanged: dart.finalFieldType(dart.fnType(dart.nullable(R), [T, dart.nullable(R)])),
      value: dart.finalFieldType(T)
    }));
    return _ValueChangedHook;
  });
  hooks._ValueChangedHook = hooks._ValueChangedHook$();
  dart.addTypeTests(hooks._ValueChangedHook, _is__ValueChangedHook_default);
  var _result = dart.privateName(hooks, "_result");
  const _is__ValueChangedHookState_default = Symbol('_is__ValueChangedHookState_default');
  hooks._ValueChangedHookState$ = dart.generic((T, R) => {
    var __t$_ValueChangedHookOfT$R = () => (__t$_ValueChangedHookOfT$R = dart.constFn(hooks._ValueChangedHook$(T, R)))();
    var __t$TAndRNToRN = () => (__t$TAndRNToRN = dart.constFn(dart.fnType(__t$RN(), [T, __t$RN()])))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$DiagnosticsPropertyOfR = () => (__t$DiagnosticsPropertyOfR = dart.constFn(diagnostics.DiagnosticsProperty$(R)))();
    class _ValueChangedHookState extends framework$.HookState$(dart.nullable(R), hooks._ValueChangedHook$(T, R)) {
      didUpdateHook(oldHook) {
        let t12, t11, t10;
        __t$_ValueChangedHookOfT$R().as(oldHook);
        super.didUpdateHook(oldHook);
        if (!dart.equals(this.hook.value, oldHook.value)) {
          this[_result] = (t10 = this.hook, t11 = oldHook.value, t12 = this[_result], __t$TAndRNToRN().as(t10.valueChanged)(t11, t12));
        }
      }
      build(context) {
        return this[_result];
      }
      get debugLabel() {
        return "useValueChanged";
      }
      get debugHasShortDescription() {
        return false;
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (__t$DiagnosticsPropertyOfT()).new("value", this.hook.value));
        properties.add(new (__t$DiagnosticsPropertyOfR()).new("result", this[_result]));
      }
      static ['_#new#tearOff'](T, R) {
        return new (hooks._ValueChangedHookState$(T, R)).new();
      }
    }
    (_ValueChangedHookState.new = function() {
      this[_result] = null;
      _ValueChangedHookState.__proto__.new.call(this);
      ;
    }).prototype = _ValueChangedHookState.prototype;
    dart.addTypeTests(_ValueChangedHookState);
    _ValueChangedHookState.prototype[_is__ValueChangedHookState_default] = true;
    dart.addTypeCaches(_ValueChangedHookState);
    dart.setMethodSignature(_ValueChangedHookState, () => ({
      __proto__: dart.getMethods(_ValueChangedHookState.__proto__),
      build: dart.fnType(dart.nullable(R), [framework.BuildContext])
    }));
    dart.setGetterSignature(_ValueChangedHookState, () => ({
      __proto__: dart.getGetters(_ValueChangedHookState.__proto__),
      debugLabel: core.String
    }));
    dart.setLibraryUri(_ValueChangedHookState, I[3]);
    dart.setFieldSignature(_ValueChangedHookState, () => ({
      __proto__: dart.getFields(_ValueChangedHookState.__proto__),
      [_result]: dart.fieldType(dart.nullable(R))
    }));
    return _ValueChangedHookState;
  });
  hooks._ValueChangedHookState = hooks._ValueChangedHookState$();
  dart.addTypeTests(hooks._ValueChangedHookState, _is__ValueChangedHookState_default);
  var effect$ = dart.privateName(hooks, "_EffectHook.effect");
  hooks._EffectHook = class _EffectHook extends framework$.Hook$(dart.void) {
    get effect() {
      return this[effect$];
    }
    set effect(value) {
      super.effect = value;
    }
    static ['_#new#tearOff'](effect, keys = null) {
      return new hooks._EffectHook.new(effect, keys);
    }
    createState() {
      return new hooks._EffectHookState.new();
    }
  };
  (hooks._EffectHook.new = function(effect, keys = null) {
    this[effect$] = effect;
    hooks._EffectHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._EffectHook.prototype;
  dart.addTypeTests(hooks._EffectHook);
  dart.addTypeCaches(hooks._EffectHook);
  dart.setMethodSignature(hooks._EffectHook, () => ({
    __proto__: dart.getMethods(hooks._EffectHook.__proto__),
    createState: dart.fnType(hooks._EffectHookState, [])
  }));
  dart.setLibraryUri(hooks._EffectHook, I[3]);
  dart.setFieldSignature(hooks._EffectHook, () => ({
    __proto__: dart.getFields(hooks._EffectHook.__proto__),
    effect: dart.finalFieldType(dart.fnType(dart.nullable(dart.fnType(dart.void, [])), []))
  }));
  hooks._EffectHookState = class _EffectHookState extends framework$.HookState$(dart.void, hooks._EffectHook) {
    initHook() {
      super.initHook();
      this.scheduleEffect();
    }
    didUpdateHook(oldHook) {
      let t10;
      hooks._EffectHook.as(oldHook);
      super.didUpdateHook(oldHook);
      if (this.hook.keys == null) {
        t10 = this.disposer;
        t10 == null ? null : t10();
        this.scheduleEffect();
      }
    }
    build(context) {
    }
    dispose() {
      let t10;
      t10 = this.disposer;
      return t10 == null ? null : t10();
    }
    scheduleEffect() {
      this.disposer = this.hook.effect();
    }
    get debugLabel() {
      return "useEffect";
    }
    get debugSkipValue() {
      return true;
    }
    static ['_#new#tearOff']() {
      return new hooks._EffectHookState.new();
    }
  };
  (hooks._EffectHookState.new = function() {
    this.disposer = null;
    hooks._EffectHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._EffectHookState.prototype;
  dart.addTypeTests(hooks._EffectHookState);
  dart.addTypeCaches(hooks._EffectHookState);
  dart.setMethodSignature(hooks._EffectHookState, () => ({
    __proto__: dart.getMethods(hooks._EffectHookState.__proto__),
    build: dart.fnType(dart.void, [framework.BuildContext]),
    scheduleEffect: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(hooks._EffectHookState, () => ({
    __proto__: dart.getGetters(hooks._EffectHookState.__proto__),
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._EffectHookState, I[3]);
  dart.setFieldSignature(hooks._EffectHookState, () => ({
    __proto__: dart.getFields(hooks._EffectHookState.__proto__),
    disposer: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  var initialData$2 = dart.privateName(hooks, "_StateHook.initialData");
  const _is__StateHook_default = Symbol('_is__StateHook_default');
  hooks._StateHook$ = dart.generic(T => {
    var __t$_StateHookStateOfT = () => (__t$_StateHookStateOfT = dart.constFn(hooks._StateHookState$(T)))();
    class _StateHook extends framework$.Hook$(change_notifier.ValueNotifier$(T)) {
      get initialData() {
        return this[initialData$2];
      }
      set initialData(value) {
        super.initialData = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        return new (hooks._StateHook$(T)).new({initialData: initialData});
      }
      createState() {
        return new (__t$_StateHookStateOfT()).new();
      }
    }
    (_StateHook.new = function(opts) {
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      this[initialData$2] = initialData;
      _StateHook.__proto__.new.call(this);
      ;
    }).prototype = _StateHook.prototype;
    dart.addTypeTests(_StateHook);
    _StateHook.prototype[_is__StateHook_default] = true;
    dart.addTypeCaches(_StateHook);
    dart.setMethodSignature(_StateHook, () => ({
      __proto__: dart.getMethods(_StateHook.__proto__),
      createState: dart.fnType(hooks._StateHookState$(T), [])
    }));
    dart.setLibraryUri(_StateHook, I[3]);
    dart.setFieldSignature(_StateHook, () => ({
      __proto__: dart.getFields(_StateHook.__proto__),
      initialData: dart.finalFieldType(T)
    }));
    return _StateHook;
  });
  hooks._StateHook = hooks._StateHook$();
  dart.addTypeTests(hooks._StateHook, _is__StateHook_default);
  var ___StateHookState__state = dart.privateName(hooks, "_#_StateHookState#_state");
  var ___StateHookState__state_isSet = dart.privateName(hooks, "_#_StateHookState#_state#isSet");
  var _state = dart.privateName(hooks, "_state");
  const _is__StateHookState_default = Symbol('_is__StateHookState_default');
  hooks._StateHookState$ = dart.generic(T => {
    var __t$ValueNotifierOfT = () => (__t$ValueNotifierOfT = dart.constFn(change_notifier.ValueNotifier$(T)))();
    class _StateHookState extends framework$.HookState$(change_notifier.ValueNotifier$(T), hooks._StateHook$(T)) {
      get [_state]() {
        let t11, t11$, t10;
        t10 = this[___StateHookState__state];
        return t10 == null ? (t11$ = (t11 = new (__t$ValueNotifierOfT()).new(this.hook.initialData), (() => {
          t11.addListener(dart.bind(this, _listener));
          return t11;
        })()), this[___StateHookState__state] == null ? this[___StateHookState__state] = t11$ : dart.throw(new _internal.LateError.fieldADI("_state"))) : t10;
      }
      dispose() {
        this[_state].dispose();
      }
      build(context) {
        return this[_state];
      }
      [_listener]() {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
      get debugValue() {
        return this[_state].value;
      }
      get debugLabel() {
        return "useState<" + dart.str(dart.wrapType(T)) + ">";
      }
      static ['_#new#tearOff'](T) {
        return new (hooks._StateHookState$(T)).new();
      }
    }
    (_StateHookState.new = function() {
      this[___StateHookState__state] = null;
      this[___StateHookState__state_isSet] = false;
      _StateHookState.__proto__.new.call(this);
      ;
    }).prototype = _StateHookState.prototype;
    dart.addTypeTests(_StateHookState);
    _StateHookState.prototype[_is__StateHookState_default] = true;
    dart.addTypeCaches(_StateHookState);
    dart.setMethodSignature(_StateHookState, () => ({
      __proto__: dart.getMethods(_StateHookState.__proto__),
      build: dart.fnType(change_notifier.ValueNotifier$(T), [framework.BuildContext]),
      [_listener]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_StateHookState, () => ({
      __proto__: dart.getGetters(_StateHookState.__proto__),
      [_state]: change_notifier.ValueNotifier$(T),
      debugLabel: core.String
    }));
    dart.setLibraryUri(_StateHookState, I[3]);
    dart.setFieldSignature(_StateHookState, () => ({
      __proto__: dart.getFields(_StateHookState.__proto__),
      [___StateHookState__state]: dart.fieldType(dart.nullable(change_notifier.ValueNotifier$(T))),
      [___StateHookState__state_isSet]: dart.fieldType(core.bool)
    }));
    return _StateHookState;
  });
  hooks._StateHookState = hooks._StateHookState$();
  dart.addTypeTests(hooks._StateHookState, _is__StateHookState_default);
  var length$ = dart.privateName(hooks, "_TabControllerHook.length");
  var vsync$0 = dart.privateName(hooks, "_TabControllerHook.vsync");
  var initialIndex$ = dart.privateName(hooks, "_TabControllerHook.initialIndex");
  hooks._TabControllerHook = class _TabControllerHook extends framework$.Hook$(tab_controller.TabController) {
    get length() {
      return this[length$];
    }
    set length(value) {
      super.length = value;
    }
    get vsync() {
      return this[vsync$0];
    }
    set vsync(value) {
      super.vsync = value;
    }
    get initialIndex() {
      return this[initialIndex$];
    }
    set initialIndex(value) {
      super.initialIndex = value;
    }
    static ['_#new#tearOff'](opts) {
      let length = opts && 'length' in opts ? opts.length : null;
      let vsync = opts && 'vsync' in opts ? opts.vsync : null;
      let initialIndex = opts && 'initialIndex' in opts ? opts.initialIndex : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return new hooks._TabControllerHook.new({length: length, vsync: vsync, initialIndex: initialIndex, keys: keys});
    }
    createState() {
      return new hooks._TabControllerHookState.new();
    }
  };
  (hooks._TabControllerHook.new = function(opts) {
    let length = opts && 'length' in opts ? opts.length : null;
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    let initialIndex = opts && 'initialIndex' in opts ? opts.initialIndex : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    this[length$] = length;
    this[vsync$0] = vsync;
    this[initialIndex$] = initialIndex;
    hooks._TabControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._TabControllerHook.prototype;
  dart.addTypeTests(hooks._TabControllerHook);
  dart.addTypeCaches(hooks._TabControllerHook);
  dart.setMethodSignature(hooks._TabControllerHook, () => ({
    __proto__: dart.getMethods(hooks._TabControllerHook.__proto__),
    createState: dart.fnType(framework$.HookState$(tab_controller.TabController, framework$.Hook$(tab_controller.TabController)), [])
  }));
  dart.setLibraryUri(hooks._TabControllerHook, I[3]);
  dart.setFieldSignature(hooks._TabControllerHook, () => ({
    __proto__: dart.getFields(hooks._TabControllerHook.__proto__),
    length: dart.finalFieldType(core.int),
    vsync: dart.finalFieldType(ticker.TickerProvider),
    initialIndex: dart.finalFieldType(core.int)
  }));
  var ___TabControllerHookState_controller = dart.privateName(hooks, "_#_TabControllerHookState#controller");
  var ___TabControllerHookState_controller_isSet = dart.privateName(hooks, "_#_TabControllerHookState#controller#isSet");
  hooks._TabControllerHookState = class _TabControllerHookState extends framework$.HookState$(tab_controller.TabController, hooks._TabControllerHook) {
    get controller() {
      let t11, t10;
      t10 = this[___TabControllerHookState_controller];
      return t10 == null ? (t11 = new tab_controller.TabController.new({length: this.hook.length, initialIndex: this.hook.initialIndex, vsync: this.hook.vsync}), this[___TabControllerHookState_controller] == null ? this[___TabControllerHookState_controller] = t11 : dart.throw(new _internal.LateError.fieldADI("controller"))) : t10;
    }
    build(context) {
      return this.controller;
    }
    dispose() {
      return this.controller.dispose();
    }
    get debugLabel() {
      return "useTabController";
    }
    static ['_#new#tearOff']() {
      return new hooks._TabControllerHookState.new();
    }
  };
  (hooks._TabControllerHookState.new = function() {
    this[___TabControllerHookState_controller] = null;
    this[___TabControllerHookState_controller_isSet] = false;
    hooks._TabControllerHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._TabControllerHookState.prototype;
  dart.addTypeTests(hooks._TabControllerHookState);
  dart.addTypeCaches(hooks._TabControllerHookState);
  dart.setMethodSignature(hooks._TabControllerHookState, () => ({
    __proto__: dart.getMethods(hooks._TabControllerHookState.__proto__),
    build: dart.fnType(tab_controller.TabController, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._TabControllerHookState, () => ({
    __proto__: dart.getGetters(hooks._TabControllerHookState.__proto__),
    controller: tab_controller.TabController,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._TabControllerHookState, I[3]);
  dart.setFieldSignature(hooks._TabControllerHookState, () => ({
    __proto__: dart.getFields(hooks._TabControllerHookState.__proto__),
    [___TabControllerHookState_controller]: dart.fieldType(dart.nullable(tab_controller.TabController)),
    [___TabControllerHookState_controller_isSet]: dart.fieldType(core.bool)
  }));
  hooks._TextEditingControllerHookCreator = class _TextEditingControllerHookCreator extends core.Object {
    static ['_#new#tearOff']() {
      return new hooks._TextEditingControllerHookCreator.new();
    }
    call(opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return framework$.use(editable_text.TextEditingController, new hooks._TextEditingControllerHook.new(text, keys));
    }
    fromValue(value, keys = null) {
      return framework$.use(editable_text.TextEditingController, new hooks._TextEditingControllerHook.fromValue(value, keys));
    }
  };
  (hooks._TextEditingControllerHookCreator.new = function() {
    ;
  }).prototype = hooks._TextEditingControllerHookCreator.prototype;
  dart.addTypeTests(hooks._TextEditingControllerHookCreator);
  dart.addTypeCaches(hooks._TextEditingControllerHookCreator);
  dart.setMethodSignature(hooks._TextEditingControllerHookCreator, () => ({
    __proto__: dart.getMethods(hooks._TextEditingControllerHookCreator.__proto__),
    call: dart.fnType(editable_text.TextEditingController, [], {keys: dart.nullable(core.List$(dart.nullable(core.Object))), text: dart.nullable(core.String)}, {}),
    fromValue: dart.fnType(editable_text.TextEditingController, [text_input.TextEditingValue], [dart.nullable(core.List$(dart.nullable(core.Object)))])
  }));
  dart.setLibraryUri(hooks._TextEditingControllerHookCreator, I[3]);
  var initialText$ = dart.privateName(hooks, "_TextEditingControllerHook.initialText");
  var initialValue$0 = dart.privateName(hooks, "_TextEditingControllerHook.initialValue");
  hooks._TextEditingControllerHook = class _TextEditingControllerHook extends framework$.Hook$(editable_text.TextEditingController) {
    get initialText() {
      return this[initialText$];
    }
    set initialText(value) {
      super.initialText = value;
    }
    get initialValue() {
      return this[initialValue$0];
    }
    set initialValue(value) {
      super.initialValue = value;
    }
    static ['_#new#tearOff'](initialText, keys = null) {
      return new hooks._TextEditingControllerHook.new(initialText, keys);
    }
    static ['_#fromValue#tearOff'](initialValue, keys = null) {
      return new hooks._TextEditingControllerHook.fromValue(initialValue, keys);
    }
    createState() {
      return new hooks._TextEditingControllerHookState.new();
    }
  };
  (hooks._TextEditingControllerHook.new = function(initialText, keys = null) {
    this[initialText$] = initialText;
    this[initialValue$0] = null;
    hooks._TextEditingControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._TextEditingControllerHook.prototype;
  (hooks._TextEditingControllerHook.fromValue = function(initialValue, keys = null) {
    this[initialValue$0] = initialValue;
    this[initialText$] = null;
    hooks._TextEditingControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._TextEditingControllerHook.prototype;
  dart.addTypeTests(hooks._TextEditingControllerHook);
  dart.addTypeCaches(hooks._TextEditingControllerHook);
  dart.setMethodSignature(hooks._TextEditingControllerHook, () => ({
    __proto__: dart.getMethods(hooks._TextEditingControllerHook.__proto__),
    createState: dart.fnType(hooks._TextEditingControllerHookState, [])
  }));
  dart.setLibraryUri(hooks._TextEditingControllerHook, I[3]);
  dart.setFieldSignature(hooks._TextEditingControllerHook, () => ({
    __proto__: dart.getFields(hooks._TextEditingControllerHook.__proto__),
    initialText: dart.finalFieldType(dart.nullable(core.String)),
    initialValue: dart.finalFieldType(dart.nullable(text_input.TextEditingValue))
  }));
  var ___TextEditingControllerHookState__controller = dart.privateName(hooks, "_#_TextEditingControllerHookState#_controller");
  var ___TextEditingControllerHookState__controller_isSet = dart.privateName(hooks, "_#_TextEditingControllerHookState#_controller#isSet");
  hooks._TextEditingControllerHookState = class _TextEditingControllerHookState extends framework$.HookState$(editable_text.TextEditingController, hooks._TextEditingControllerHook) {
    get [_controller]() {
      let t11, t10;
      t10 = this[___TextEditingControllerHookState__controller];
      return t10 == null ? (t11 = this.hook.initialValue != null ? new editable_text.TextEditingController.fromValue(this.hook.initialValue) : new editable_text.TextEditingController.new({text: this.hook.initialText}), this[___TextEditingControllerHookState__controller] == null ? this[___TextEditingControllerHookState__controller] = t11 : dart.throw(new _internal.LateError.fieldADI("_controller"))) : t10;
    }
    build(context) {
      return this[_controller];
    }
    dispose() {
      return this[_controller].dispose();
    }
    get debugLabel() {
      return "useTextEditingController";
    }
    static ['_#new#tearOff']() {
      return new hooks._TextEditingControllerHookState.new();
    }
  };
  (hooks._TextEditingControllerHookState.new = function() {
    this[___TextEditingControllerHookState__controller] = null;
    this[___TextEditingControllerHookState__controller_isSet] = false;
    hooks._TextEditingControllerHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._TextEditingControllerHookState.prototype;
  dart.addTypeTests(hooks._TextEditingControllerHookState);
  dart.addTypeCaches(hooks._TextEditingControllerHookState);
  dart.setMethodSignature(hooks._TextEditingControllerHookState, () => ({
    __proto__: dart.getMethods(hooks._TextEditingControllerHookState.__proto__),
    build: dart.fnType(editable_text.TextEditingController, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._TextEditingControllerHookState, () => ({
    __proto__: dart.getGetters(hooks._TextEditingControllerHookState.__proto__),
    [_controller]: editable_text.TextEditingController,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._TextEditingControllerHookState, I[3]);
  dart.setFieldSignature(hooks._TextEditingControllerHookState, () => ({
    __proto__: dart.getFields(hooks._TextEditingControllerHookState.__proto__),
    [___TextEditingControllerHookState__controller]: dart.fieldType(dart.nullable(editable_text.TextEditingController)),
    [___TextEditingControllerHookState__controller_isSet]: dart.fieldType(core.bool)
  }));
  var debugLabel$0 = dart.privateName(hooks, "_FocusNodeHook.debugLabel");
  var onKey$ = dart.privateName(hooks, "_FocusNodeHook.onKey");
  var onKeyEvent$ = dart.privateName(hooks, "_FocusNodeHook.onKeyEvent");
  var skipTraversal$ = dart.privateName(hooks, "_FocusNodeHook.skipTraversal");
  var canRequestFocus$ = dart.privateName(hooks, "_FocusNodeHook.canRequestFocus");
  var descendantsAreFocusable$ = dart.privateName(hooks, "_FocusNodeHook.descendantsAreFocusable");
  hooks._FocusNodeHook = class _FocusNodeHook extends framework$.Hook$(focus_manager.FocusNode) {
    get debugLabel() {
      return this[debugLabel$0];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get onKey() {
      return this[onKey$];
    }
    set onKey(value) {
      super.onKey = value;
    }
    get onKeyEvent() {
      return this[onKeyEvent$];
    }
    set onKeyEvent(value) {
      super.onKeyEvent = value;
    }
    get skipTraversal() {
      return this[skipTraversal$];
    }
    set skipTraversal(value) {
      super.skipTraversal = value;
    }
    get canRequestFocus() {
      return this[canRequestFocus$];
    }
    set canRequestFocus(value) {
      super.canRequestFocus = value;
    }
    get descendantsAreFocusable() {
      return this[descendantsAreFocusable$];
    }
    set descendantsAreFocusable(value) {
      super.descendantsAreFocusable = value;
    }
    static ['_#new#tearOff'](opts) {
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let onKey = opts && 'onKey' in opts ? opts.onKey : null;
      let onKeyEvent = opts && 'onKeyEvent' in opts ? opts.onKeyEvent : null;
      let skipTraversal = opts && 'skipTraversal' in opts ? opts.skipTraversal : null;
      let canRequestFocus = opts && 'canRequestFocus' in opts ? opts.canRequestFocus : null;
      let descendantsAreFocusable = opts && 'descendantsAreFocusable' in opts ? opts.descendantsAreFocusable : null;
      return new hooks._FocusNodeHook.new({debugLabel: debugLabel, onKey: onKey, onKeyEvent: onKeyEvent, skipTraversal: skipTraversal, canRequestFocus: canRequestFocus, descendantsAreFocusable: descendantsAreFocusable});
    }
    createState() {
      return new hooks._FocusNodeHookState.new();
    }
  };
  (hooks._FocusNodeHook.new = function(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let onKey = opts && 'onKey' in opts ? opts.onKey : null;
    let onKeyEvent = opts && 'onKeyEvent' in opts ? opts.onKeyEvent : null;
    let skipTraversal = opts && 'skipTraversal' in opts ? opts.skipTraversal : null;
    let canRequestFocus = opts && 'canRequestFocus' in opts ? opts.canRequestFocus : null;
    let descendantsAreFocusable = opts && 'descendantsAreFocusable' in opts ? opts.descendantsAreFocusable : null;
    this[debugLabel$0] = debugLabel;
    this[onKey$] = onKey;
    this[onKeyEvent$] = onKeyEvent;
    this[skipTraversal$] = skipTraversal;
    this[canRequestFocus$] = canRequestFocus;
    this[descendantsAreFocusable$] = descendantsAreFocusable;
    hooks._FocusNodeHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._FocusNodeHook.prototype;
  dart.addTypeTests(hooks._FocusNodeHook);
  dart.addTypeCaches(hooks._FocusNodeHook);
  dart.setMethodSignature(hooks._FocusNodeHook, () => ({
    __proto__: dart.getMethods(hooks._FocusNodeHook.__proto__),
    createState: dart.fnType(hooks._FocusNodeHookState, [])
  }));
  dart.setLibraryUri(hooks._FocusNodeHook, I[3]);
  dart.setFieldSignature(hooks._FocusNodeHook, () => ({
    __proto__: dart.getFields(hooks._FocusNodeHook.__proto__),
    debugLabel: dart.finalFieldType(dart.nullable(core.String)),
    onKey: dart.finalFieldType(dart.nullable(dart.fnType(focus_manager.KeyEventResult, [focus_manager.FocusNode, raw_keyboard.RawKeyEvent]))),
    onKeyEvent: dart.finalFieldType(dart.nullable(dart.fnType(focus_manager.KeyEventResult, [focus_manager.FocusNode, hardware_keyboard.KeyEvent]))),
    skipTraversal: dart.finalFieldType(core.bool),
    canRequestFocus: dart.finalFieldType(core.bool),
    descendantsAreFocusable: dart.finalFieldType(core.bool)
  }));
  var ___FocusNodeHookState__focusNode = dart.privateName(hooks, "_#_FocusNodeHookState#_focusNode");
  var _focusNode = dart.privateName(hooks, "_focusNode");
  hooks._FocusNodeHookState = class _FocusNodeHookState extends framework$.HookState$(focus_manager.FocusNode, hooks._FocusNodeHook) {
    get [_focusNode]() {
      let t11, t10;
      t10 = this[___FocusNodeHookState__focusNode];
      return t10 == null ? (t11 = new focus_manager.FocusNode.new({debugLabel: this.hook.debugLabel, onKey: this.hook.onKey, onKeyEvent: this.hook.onKeyEvent, skipTraversal: this.hook.skipTraversal, canRequestFocus: this.hook.canRequestFocus, descendantsAreFocusable: this.hook.descendantsAreFocusable}), this[___FocusNodeHookState__focusNode] == null ? this[___FocusNodeHookState__focusNode] = t11 : dart.throw(new _internal.LateError.fieldADI("_focusNode"))) : t10;
    }
    didUpdateHook(oldHook) {
      let t10;
      hooks._FocusNodeHook.as(oldHook);
      t10 = this[_focusNode];
      (() => {
        t10.debugLabel = this.hook.debugLabel;
        t10.skipTraversal = this.hook.skipTraversal;
        t10.canRequestFocus = this.hook.canRequestFocus;
        t10.descendantsAreFocusable = this.hook.descendantsAreFocusable;
        t10.onKey = this.hook.onKey;
        t10.onKeyEvent = this.hook.onKeyEvent;
        return t10;
      })();
    }
    build(context) {
      return this[_focusNode];
    }
    dispose() {
      return this[_focusNode].dispose();
    }
    get debugLabel() {
      return "useFocusNode";
    }
    static ['_#new#tearOff']() {
      return new hooks._FocusNodeHookState.new();
    }
  };
  (hooks._FocusNodeHookState.new = function() {
    this[___FocusNodeHookState__focusNode] = null;
    hooks._FocusNodeHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._FocusNodeHookState.prototype;
  dart.addTypeTests(hooks._FocusNodeHookState);
  dart.addTypeCaches(hooks._FocusNodeHookState);
  dart.setMethodSignature(hooks._FocusNodeHookState, () => ({
    __proto__: dart.getMethods(hooks._FocusNodeHookState.__proto__),
    build: dart.fnType(focus_manager.FocusNode, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._FocusNodeHookState, () => ({
    __proto__: dart.getGetters(hooks._FocusNodeHookState.__proto__),
    [_focusNode]: focus_manager.FocusNode,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._FocusNodeHookState, I[3]);
  dart.setFieldSignature(hooks._FocusNodeHookState, () => ({
    __proto__: dart.getFields(hooks._FocusNodeHookState.__proto__),
    [___FocusNodeHookState__focusNode]: dart.fieldType(dart.nullable(focus_manager.FocusNode))
  }));
  var debugLabel$1 = dart.privateName(hooks, "_FocusScopeNodeHook.debugLabel");
  var onKey$0 = dart.privateName(hooks, "_FocusScopeNodeHook.onKey");
  var onKeyEvent$0 = dart.privateName(hooks, "_FocusScopeNodeHook.onKeyEvent");
  var skipTraversal$0 = dart.privateName(hooks, "_FocusScopeNodeHook.skipTraversal");
  var canRequestFocus$0 = dart.privateName(hooks, "_FocusScopeNodeHook.canRequestFocus");
  hooks._FocusScopeNodeHook = class _FocusScopeNodeHook extends framework$.Hook$(focus_manager.FocusScopeNode) {
    get debugLabel() {
      return this[debugLabel$1];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get onKey() {
      return this[onKey$0];
    }
    set onKey(value) {
      super.onKey = value;
    }
    get onKeyEvent() {
      return this[onKeyEvent$0];
    }
    set onKeyEvent(value) {
      super.onKeyEvent = value;
    }
    get skipTraversal() {
      return this[skipTraversal$0];
    }
    set skipTraversal(value) {
      super.skipTraversal = value;
    }
    get canRequestFocus() {
      return this[canRequestFocus$0];
    }
    set canRequestFocus(value) {
      super.canRequestFocus = value;
    }
    static ['_#new#tearOff'](opts) {
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let onKey = opts && 'onKey' in opts ? opts.onKey : null;
      let onKeyEvent = opts && 'onKeyEvent' in opts ? opts.onKeyEvent : null;
      let skipTraversal = opts && 'skipTraversal' in opts ? opts.skipTraversal : null;
      let canRequestFocus = opts && 'canRequestFocus' in opts ? opts.canRequestFocus : null;
      return new hooks._FocusScopeNodeHook.new({debugLabel: debugLabel, onKey: onKey, onKeyEvent: onKeyEvent, skipTraversal: skipTraversal, canRequestFocus: canRequestFocus});
    }
    createState() {
      return new hooks._FocusScopeNodeHookState.new();
    }
  };
  (hooks._FocusScopeNodeHook.new = function(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let onKey = opts && 'onKey' in opts ? opts.onKey : null;
    let onKeyEvent = opts && 'onKeyEvent' in opts ? opts.onKeyEvent : null;
    let skipTraversal = opts && 'skipTraversal' in opts ? opts.skipTraversal : null;
    let canRequestFocus = opts && 'canRequestFocus' in opts ? opts.canRequestFocus : null;
    this[debugLabel$1] = debugLabel;
    this[onKey$0] = onKey;
    this[onKeyEvent$0] = onKeyEvent;
    this[skipTraversal$0] = skipTraversal;
    this[canRequestFocus$0] = canRequestFocus;
    hooks._FocusScopeNodeHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._FocusScopeNodeHook.prototype;
  dart.addTypeTests(hooks._FocusScopeNodeHook);
  dart.addTypeCaches(hooks._FocusScopeNodeHook);
  dart.setMethodSignature(hooks._FocusScopeNodeHook, () => ({
    __proto__: dart.getMethods(hooks._FocusScopeNodeHook.__proto__),
    createState: dart.fnType(hooks._FocusScopeNodeHookState, [])
  }));
  dart.setLibraryUri(hooks._FocusScopeNodeHook, I[3]);
  dart.setFieldSignature(hooks._FocusScopeNodeHook, () => ({
    __proto__: dart.getFields(hooks._FocusScopeNodeHook.__proto__),
    debugLabel: dart.finalFieldType(dart.nullable(core.String)),
    onKey: dart.finalFieldType(dart.nullable(dart.fnType(focus_manager.KeyEventResult, [focus_manager.FocusNode, raw_keyboard.RawKeyEvent]))),
    onKeyEvent: dart.finalFieldType(dart.nullable(dart.fnType(focus_manager.KeyEventResult, [focus_manager.FocusNode, hardware_keyboard.KeyEvent]))),
    skipTraversal: dart.finalFieldType(core.bool),
    canRequestFocus: dart.finalFieldType(core.bool)
  }));
  var ___FocusScopeNodeHookState__focusScopeNode = dart.privateName(hooks, "_#_FocusScopeNodeHookState#_focusScopeNode");
  var _focusScopeNode = dart.privateName(hooks, "_focusScopeNode");
  hooks._FocusScopeNodeHookState = class _FocusScopeNodeHookState extends framework$.HookState$(focus_manager.FocusScopeNode, hooks._FocusScopeNodeHook) {
    get [_focusScopeNode]() {
      let t11, t10;
      t10 = this[___FocusScopeNodeHookState__focusScopeNode];
      return t10 == null ? (t11 = new focus_manager.FocusScopeNode.new({debugLabel: this.hook.debugLabel, onKey: this.hook.onKey, onKeyEvent: this.hook.onKeyEvent, skipTraversal: this.hook.skipTraversal, canRequestFocus: this.hook.canRequestFocus}), this[___FocusScopeNodeHookState__focusScopeNode] == null ? this[___FocusScopeNodeHookState__focusScopeNode] = t11 : dart.throw(new _internal.LateError.fieldADI("_focusScopeNode"))) : t10;
    }
    didUpdateHook(oldHook) {
      let t10;
      hooks._FocusScopeNodeHook.as(oldHook);
      t10 = this[_focusScopeNode];
      (() => {
        t10.debugLabel = this.hook.debugLabel;
        t10.skipTraversal = this.hook.skipTraversal;
        t10.canRequestFocus = this.hook.canRequestFocus;
        t10.onKey = this.hook.onKey;
        t10.onKeyEvent = this.hook.onKeyEvent;
        return t10;
      })();
    }
    build(context) {
      return this[_focusScopeNode];
    }
    dispose() {
      return this[_focusScopeNode].dispose();
    }
    get debugLabel() {
      return "useFocusScopeNode";
    }
    static ['_#new#tearOff']() {
      return new hooks._FocusScopeNodeHookState.new();
    }
  };
  (hooks._FocusScopeNodeHookState.new = function() {
    this[___FocusScopeNodeHookState__focusScopeNode] = null;
    hooks._FocusScopeNodeHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._FocusScopeNodeHookState.prototype;
  dart.addTypeTests(hooks._FocusScopeNodeHookState);
  dart.addTypeCaches(hooks._FocusScopeNodeHookState);
  dart.setMethodSignature(hooks._FocusScopeNodeHookState, () => ({
    __proto__: dart.getMethods(hooks._FocusScopeNodeHookState.__proto__),
    build: dart.fnType(focus_manager.FocusScopeNode, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._FocusScopeNodeHookState, () => ({
    __proto__: dart.getGetters(hooks._FocusScopeNodeHookState.__proto__),
    [_focusScopeNode]: focus_manager.FocusScopeNode,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._FocusScopeNodeHookState, I[3]);
  dart.setFieldSignature(hooks._FocusScopeNodeHookState, () => ({
    __proto__: dart.getFields(hooks._FocusScopeNodeHookState.__proto__),
    [___FocusScopeNodeHookState__focusScopeNode]: dart.fieldType(dart.nullable(focus_manager.FocusScopeNode))
  }));
  var initialScrollOffset$ = dart.privateName(hooks, "_ScrollControllerHook.initialScrollOffset");
  var keepScrollOffset$ = dart.privateName(hooks, "_ScrollControllerHook.keepScrollOffset");
  var debugLabel$2 = dart.privateName(hooks, "_ScrollControllerHook.debugLabel");
  hooks._ScrollControllerHook = class _ScrollControllerHook extends framework$.Hook$(scroll_controller.ScrollController) {
    get initialScrollOffset() {
      return this[initialScrollOffset$];
    }
    set initialScrollOffset(value) {
      super.initialScrollOffset = value;
    }
    get keepScrollOffset() {
      return this[keepScrollOffset$];
    }
    set keepScrollOffset(value) {
      super.keepScrollOffset = value;
    }
    get debugLabel() {
      return this[debugLabel$2];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    static ['_#new#tearOff'](opts) {
      let initialScrollOffset = opts && 'initialScrollOffset' in opts ? opts.initialScrollOffset : null;
      let keepScrollOffset = opts && 'keepScrollOffset' in opts ? opts.keepScrollOffset : null;
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return new hooks._ScrollControllerHook.new({initialScrollOffset: initialScrollOffset, keepScrollOffset: keepScrollOffset, debugLabel: debugLabel, keys: keys});
    }
    createState() {
      return new hooks._ScrollControllerHookState.new();
    }
  };
  (hooks._ScrollControllerHook.new = function(opts) {
    let initialScrollOffset = opts && 'initialScrollOffset' in opts ? opts.initialScrollOffset : null;
    let keepScrollOffset = opts && 'keepScrollOffset' in opts ? opts.keepScrollOffset : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    this[initialScrollOffset$] = initialScrollOffset;
    this[keepScrollOffset$] = keepScrollOffset;
    this[debugLabel$2] = debugLabel;
    hooks._ScrollControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._ScrollControllerHook.prototype;
  dart.addTypeTests(hooks._ScrollControllerHook);
  dart.addTypeCaches(hooks._ScrollControllerHook);
  dart.setMethodSignature(hooks._ScrollControllerHook, () => ({
    __proto__: dart.getMethods(hooks._ScrollControllerHook.__proto__),
    createState: dart.fnType(framework$.HookState$(scroll_controller.ScrollController, framework$.Hook$(scroll_controller.ScrollController)), [])
  }));
  dart.setLibraryUri(hooks._ScrollControllerHook, I[3]);
  dart.setFieldSignature(hooks._ScrollControllerHook, () => ({
    __proto__: dart.getFields(hooks._ScrollControllerHook.__proto__),
    initialScrollOffset: dart.finalFieldType(core.double),
    keepScrollOffset: dart.finalFieldType(core.bool),
    debugLabel: dart.finalFieldType(dart.nullable(core.String))
  }));
  var ___ScrollControllerHookState_controller = dart.privateName(hooks, "_#_ScrollControllerHookState#controller");
  var ___ScrollControllerHookState_controller_isSet = dart.privateName(hooks, "_#_ScrollControllerHookState#controller#isSet");
  hooks._ScrollControllerHookState = class _ScrollControllerHookState extends framework$.HookState$(scroll_controller.ScrollController, hooks._ScrollControllerHook) {
    get controller() {
      let t11, t10;
      t10 = this[___ScrollControllerHookState_controller];
      return t10 == null ? (t11 = new scroll_controller.ScrollController.new({initialScrollOffset: this.hook.initialScrollOffset, keepScrollOffset: this.hook.keepScrollOffset, debugLabel: this.hook.debugLabel}), this[___ScrollControllerHookState_controller] == null ? this[___ScrollControllerHookState_controller] = t11 : dart.throw(new _internal.LateError.fieldADI("controller"))) : t10;
    }
    build(context) {
      return this.controller;
    }
    dispose() {
      return this.controller.dispose();
    }
    get debugLabel() {
      return "useScrollController";
    }
    static ['_#new#tearOff']() {
      return new hooks._ScrollControllerHookState.new();
    }
  };
  (hooks._ScrollControllerHookState.new = function() {
    this[___ScrollControllerHookState_controller] = null;
    this[___ScrollControllerHookState_controller_isSet] = false;
    hooks._ScrollControllerHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._ScrollControllerHookState.prototype;
  dart.addTypeTests(hooks._ScrollControllerHookState);
  dart.addTypeCaches(hooks._ScrollControllerHookState);
  dart.setMethodSignature(hooks._ScrollControllerHookState, () => ({
    __proto__: dart.getMethods(hooks._ScrollControllerHookState.__proto__),
    build: dart.fnType(scroll_controller.ScrollController, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._ScrollControllerHookState, () => ({
    __proto__: dart.getGetters(hooks._ScrollControllerHookState.__proto__),
    controller: scroll_controller.ScrollController,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._ScrollControllerHookState, I[3]);
  dart.setFieldSignature(hooks._ScrollControllerHookState, () => ({
    __proto__: dart.getFields(hooks._ScrollControllerHookState.__proto__),
    [___ScrollControllerHookState_controller]: dart.fieldType(dart.nullable(scroll_controller.ScrollController)),
    [___ScrollControllerHookState_controller_isSet]: dart.fieldType(core.bool)
  }));
  var initialPage$ = dart.privateName(hooks, "_PageControllerHook.initialPage");
  var keepPage$ = dart.privateName(hooks, "_PageControllerHook.keepPage");
  var viewportFraction$ = dart.privateName(hooks, "_PageControllerHook.viewportFraction");
  hooks._PageControllerHook = class _PageControllerHook extends framework$.Hook$(page_view.PageController) {
    get initialPage() {
      return this[initialPage$];
    }
    set initialPage(value) {
      super.initialPage = value;
    }
    get keepPage() {
      return this[keepPage$];
    }
    set keepPage(value) {
      super.keepPage = value;
    }
    get viewportFraction() {
      return this[viewportFraction$];
    }
    set viewportFraction(value) {
      super.viewportFraction = value;
    }
    static ['_#new#tearOff'](opts) {
      let initialPage = opts && 'initialPage' in opts ? opts.initialPage : null;
      let keepPage = opts && 'keepPage' in opts ? opts.keepPage : null;
      let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return new hooks._PageControllerHook.new({initialPage: initialPage, keepPage: keepPage, viewportFraction: viewportFraction, keys: keys});
    }
    createState() {
      return new hooks._PageControllerHookState.new();
    }
  };
  (hooks._PageControllerHook.new = function(opts) {
    let initialPage = opts && 'initialPage' in opts ? opts.initialPage : null;
    let keepPage = opts && 'keepPage' in opts ? opts.keepPage : null;
    let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    this[initialPage$] = initialPage;
    this[keepPage$] = keepPage;
    this[viewportFraction$] = viewportFraction;
    hooks._PageControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._PageControllerHook.prototype;
  dart.addTypeTests(hooks._PageControllerHook);
  dart.addTypeCaches(hooks._PageControllerHook);
  dart.setMethodSignature(hooks._PageControllerHook, () => ({
    __proto__: dart.getMethods(hooks._PageControllerHook.__proto__),
    createState: dart.fnType(framework$.HookState$(page_view.PageController, framework$.Hook$(page_view.PageController)), [])
  }));
  dart.setLibraryUri(hooks._PageControllerHook, I[3]);
  dart.setFieldSignature(hooks._PageControllerHook, () => ({
    __proto__: dart.getFields(hooks._PageControllerHook.__proto__),
    initialPage: dart.finalFieldType(core.int),
    keepPage: dart.finalFieldType(core.bool),
    viewportFraction: dart.finalFieldType(core.double)
  }));
  var ___PageControllerHookState_controller = dart.privateName(hooks, "_#_PageControllerHookState#controller");
  var ___PageControllerHookState_controller_isSet = dart.privateName(hooks, "_#_PageControllerHookState#controller#isSet");
  hooks._PageControllerHookState = class _PageControllerHookState extends framework$.HookState$(page_view.PageController, hooks._PageControllerHook) {
    get controller() {
      let t11, t10;
      t10 = this[___PageControllerHookState_controller];
      return t10 == null ? (t11 = new page_view.PageController.new({initialPage: this.hook.initialPage, keepPage: this.hook.keepPage, viewportFraction: this.hook.viewportFraction}), this[___PageControllerHookState_controller] == null ? this[___PageControllerHookState_controller] = t11 : dart.throw(new _internal.LateError.fieldADI("controller"))) : t10;
    }
    build(context) {
      return this.controller;
    }
    dispose() {
      return this.controller.dispose();
    }
    get debugLabel() {
      return "usePageController";
    }
    static ['_#new#tearOff']() {
      return new hooks._PageControllerHookState.new();
    }
  };
  (hooks._PageControllerHookState.new = function() {
    this[___PageControllerHookState_controller] = null;
    this[___PageControllerHookState_controller_isSet] = false;
    hooks._PageControllerHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._PageControllerHookState.prototype;
  dart.addTypeTests(hooks._PageControllerHookState);
  dart.addTypeCaches(hooks._PageControllerHookState);
  dart.setMethodSignature(hooks._PageControllerHookState, () => ({
    __proto__: dart.getMethods(hooks._PageControllerHookState.__proto__),
    build: dart.fnType(page_view.PageController, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._PageControllerHookState, () => ({
    __proto__: dart.getGetters(hooks._PageControllerHookState.__proto__),
    controller: page_view.PageController,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._PageControllerHookState, I[3]);
  dart.setFieldSignature(hooks._PageControllerHookState, () => ({
    __proto__: dart.getFields(hooks._PageControllerHookState.__proto__),
    [___PageControllerHookState_controller]: dart.fieldType(dart.nullable(page_view.PageController)),
    [___PageControllerHookState_controller_isSet]: dart.fieldType(core.bool)
  }));
  var rebuildOnChange$ = dart.privateName(hooks, "_AppLifecycleHook.rebuildOnChange");
  var onStateChanged$ = dart.privateName(hooks, "_AppLifecycleHook.onStateChanged");
  hooks._AppLifecycleHook = class _AppLifecycleHook extends framework$.Hook$(dart.nullable(ui.AppLifecycleState)) {
    get rebuildOnChange() {
      return this[rebuildOnChange$];
    }
    set rebuildOnChange(value) {
      super.rebuildOnChange = value;
    }
    get onStateChanged() {
      return this[onStateChanged$];
    }
    set onStateChanged(value) {
      super.onStateChanged = value;
    }
    static ['_#new#tearOff'](opts) {
      let rebuildOnChange = opts && 'rebuildOnChange' in opts ? opts.rebuildOnChange : false;
      let onStateChanged = opts && 'onStateChanged' in opts ? opts.onStateChanged : null;
      return new hooks._AppLifecycleHook.new({rebuildOnChange: rebuildOnChange, onStateChanged: onStateChanged});
    }
    createState() {
      return new hooks.__AppLifecycleStateState.new();
    }
  };
  (hooks._AppLifecycleHook.new = function(opts) {
    let rebuildOnChange = opts && 'rebuildOnChange' in opts ? opts.rebuildOnChange : false;
    let onStateChanged = opts && 'onStateChanged' in opts ? opts.onStateChanged : null;
    this[rebuildOnChange$] = rebuildOnChange;
    this[onStateChanged$] = onStateChanged;
    hooks._AppLifecycleHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._AppLifecycleHook.prototype;
  dart.addTypeTests(hooks._AppLifecycleHook);
  dart.addTypeCaches(hooks._AppLifecycleHook);
  dart.setMethodSignature(hooks._AppLifecycleHook, () => ({
    __proto__: dart.getMethods(hooks._AppLifecycleHook.__proto__),
    createState: dart.fnType(hooks.__AppLifecycleStateState, [])
  }));
  dart.setLibraryUri(hooks._AppLifecycleHook, I[3]);
  dart.setFieldSignature(hooks._AppLifecycleHook, () => ({
    __proto__: dart.getFields(hooks._AppLifecycleHook.__proto__),
    rebuildOnChange: dart.finalFieldType(core.bool),
    onStateChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(ui.AppLifecycleState), ui.AppLifecycleState])))
  }));
  const HookState_WidgetsBindingObserver$36 = class HookState_WidgetsBindingObserver extends framework$.HookState$(dart.nullable(ui.AppLifecycleState), hooks._AppLifecycleHook) {};
  (HookState_WidgetsBindingObserver$36.new = function() {
    HookState_WidgetsBindingObserver$36.__proto__.new.call(this);
  }).prototype = HookState_WidgetsBindingObserver$36.prototype;
  dart.applyMixin(HookState_WidgetsBindingObserver$36, binding.WidgetsBindingObserver);
  hooks.__AppLifecycleStateState = class __AppLifecycleStateState extends HookState_WidgetsBindingObserver$36 {
    initHook() {
      super.initHook();
      this[_state] = binding.WidgetsBinding.instance.lifecycleState;
      binding.WidgetsBinding.instance.addObserver(this);
    }
    build(context) {
      return this[_state];
    }
    dispose() {
      super.dispose();
      binding.WidgetsBinding.instance.removeObserver(this);
    }
    didChangeAppLifecycleState(state) {
      let t10;
      let previous = this[_state];
      this[_state] = state;
      t10 = this.hook.onStateChanged;
      t10 == null ? null : t10(previous, state);
      if (this.hook.rebuildOnChange) {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
    }
    static ['_#new#tearOff']() {
      return new hooks.__AppLifecycleStateState.new();
    }
  };
  (hooks.__AppLifecycleStateState.new = function() {
    this[_state] = null;
    hooks.__AppLifecycleStateState.__proto__.new.call(this);
    ;
  }).prototype = hooks.__AppLifecycleStateState.prototype;
  dart.addTypeTests(hooks.__AppLifecycleStateState);
  dart.addTypeCaches(hooks.__AppLifecycleStateState);
  dart.setMethodSignature(hooks.__AppLifecycleStateState, () => ({
    __proto__: dart.getMethods(hooks.__AppLifecycleStateState.__proto__),
    build: dart.fnType(dart.nullable(ui.AppLifecycleState), [framework.BuildContext])
  }));
  dart.setLibraryUri(hooks.__AppLifecycleStateState, I[3]);
  dart.setFieldSignature(hooks.__AppLifecycleStateState, () => ({
    __proto__: dart.getFields(hooks.__AppLifecycleStateState.__proto__),
    [_state]: dart.fieldType(dart.nullable(ui.AppLifecycleState))
  }));
  var initialValue$1 = dart.privateName(hooks, "_TransformationControllerHook.initialValue");
  hooks._TransformationControllerHook = class _TransformationControllerHook extends framework$.Hook$(interactive_viewer.TransformationController) {
    get initialValue() {
      return this[initialValue$1];
    }
    set initialValue(value) {
      super.initialValue = value;
    }
    static ['_#new#tearOff'](opts) {
      let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return new hooks._TransformationControllerHook.new({initialValue: initialValue, keys: keys});
    }
    createState() {
      return new hooks._TransformationControllerHookState.new();
    }
  };
  (hooks._TransformationControllerHook.new = function(opts) {
    let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    this[initialValue$1] = initialValue;
    hooks._TransformationControllerHook.__proto__.new.call(this, {keys: keys});
    ;
  }).prototype = hooks._TransformationControllerHook.prototype;
  dart.addTypeTests(hooks._TransformationControllerHook);
  dart.addTypeCaches(hooks._TransformationControllerHook);
  dart.setMethodSignature(hooks._TransformationControllerHook, () => ({
    __proto__: dart.getMethods(hooks._TransformationControllerHook.__proto__),
    createState: dart.fnType(framework$.HookState$(interactive_viewer.TransformationController, framework$.Hook$(interactive_viewer.TransformationController)), [])
  }));
  dart.setLibraryUri(hooks._TransformationControllerHook, I[3]);
  dart.setFieldSignature(hooks._TransformationControllerHook, () => ({
    __proto__: dart.getFields(hooks._TransformationControllerHook.__proto__),
    initialValue: dart.finalFieldType(dart.nullable(vector_math_64.Matrix4))
  }));
  var ___TransformationControllerHookState_controller = dart.privateName(hooks, "_#_TransformationControllerHookState#controller");
  var ___TransformationControllerHookState_controller_isSet = dart.privateName(hooks, "_#_TransformationControllerHookState#controller#isSet");
  hooks._TransformationControllerHookState = class _TransformationControllerHookState extends framework$.HookState$(interactive_viewer.TransformationController, hooks._TransformationControllerHook) {
    get controller() {
      let t11, t10;
      t10 = this[___TransformationControllerHookState_controller];
      return t10 == null ? (t11 = new interactive_viewer.TransformationController.new(this.hook.initialValue), this[___TransformationControllerHookState_controller] == null ? this[___TransformationControllerHookState_controller] = t11 : dart.throw(new _internal.LateError.fieldADI("controller"))) : t10;
    }
    build(context) {
      return this.controller;
    }
    dispose() {
      return this.controller.dispose();
    }
    get debugLabel() {
      return "useTransformationController";
    }
    static ['_#new#tearOff']() {
      return new hooks._TransformationControllerHookState.new();
    }
  };
  (hooks._TransformationControllerHookState.new = function() {
    this[___TransformationControllerHookState_controller] = null;
    this[___TransformationControllerHookState_controller_isSet] = false;
    hooks._TransformationControllerHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._TransformationControllerHookState.prototype;
  dart.addTypeTests(hooks._TransformationControllerHookState);
  dart.addTypeCaches(hooks._TransformationControllerHookState);
  dart.setMethodSignature(hooks._TransformationControllerHookState, () => ({
    __proto__: dart.getMethods(hooks._TransformationControllerHookState.__proto__),
    build: dart.fnType(interactive_viewer.TransformationController, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._TransformationControllerHookState, () => ({
    __proto__: dart.getGetters(hooks._TransformationControllerHookState.__proto__),
    controller: interactive_viewer.TransformationController,
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._TransformationControllerHookState, I[3]);
  dart.setFieldSignature(hooks._TransformationControllerHookState, () => ({
    __proto__: dart.getFields(hooks._TransformationControllerHookState.__proto__),
    [___TransformationControllerHookState_controller]: dart.fieldType(dart.nullable(interactive_viewer.TransformationController)),
    [___TransformationControllerHookState_controller_isSet]: dart.fieldType(core.bool)
  }));
  var rebuildOnChange$0 = dart.privateName(hooks, "_PlatformBrightnessHook.rebuildOnChange");
  var onBrightnessChange$ = dart.privateName(hooks, "_PlatformBrightnessHook.onBrightnessChange");
  hooks._PlatformBrightnessHook = class _PlatformBrightnessHook extends framework$.Hook$(ui.Brightness) {
    get rebuildOnChange() {
      return this[rebuildOnChange$0];
    }
    set rebuildOnChange(value) {
      super.rebuildOnChange = value;
    }
    get onBrightnessChange() {
      return this[onBrightnessChange$];
    }
    set onBrightnessChange(value) {
      super.onBrightnessChange = value;
    }
    static ['_#new#tearOff'](opts) {
      let rebuildOnChange = opts && 'rebuildOnChange' in opts ? opts.rebuildOnChange : false;
      let onBrightnessChange = opts && 'onBrightnessChange' in opts ? opts.onBrightnessChange : null;
      return new hooks._PlatformBrightnessHook.new({rebuildOnChange: rebuildOnChange, onBrightnessChange: onBrightnessChange});
    }
    createState() {
      return new hooks._PlatformBrightnessState.new();
    }
  };
  (hooks._PlatformBrightnessHook.new = function(opts) {
    let rebuildOnChange = opts && 'rebuildOnChange' in opts ? opts.rebuildOnChange : false;
    let onBrightnessChange = opts && 'onBrightnessChange' in opts ? opts.onBrightnessChange : null;
    this[rebuildOnChange$0] = rebuildOnChange;
    this[onBrightnessChange$] = onBrightnessChange;
    hooks._PlatformBrightnessHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._PlatformBrightnessHook.prototype;
  dart.addTypeTests(hooks._PlatformBrightnessHook);
  dart.addTypeCaches(hooks._PlatformBrightnessHook);
  dart.setMethodSignature(hooks._PlatformBrightnessHook, () => ({
    __proto__: dart.getMethods(hooks._PlatformBrightnessHook.__proto__),
    createState: dart.fnType(hooks._PlatformBrightnessState, [])
  }));
  dart.setLibraryUri(hooks._PlatformBrightnessHook, I[3]);
  dart.setFieldSignature(hooks._PlatformBrightnessHook, () => ({
    __proto__: dart.getFields(hooks._PlatformBrightnessHook.__proto__),
    rebuildOnChange: dart.finalFieldType(core.bool),
    onBrightnessChange: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [ui.Brightness, ui.Brightness])))
  }));
  var ___PlatformBrightnessState__brightness = dart.privateName(hooks, "_#_PlatformBrightnessState#_brightness");
  var _brightness = dart.privateName(hooks, "_brightness");
  const HookState_WidgetsBindingObserver$36$ = class HookState_WidgetsBindingObserver extends framework$.HookState$(ui.Brightness, hooks._PlatformBrightnessHook) {};
  (HookState_WidgetsBindingObserver$36$.new = function() {
    HookState_WidgetsBindingObserver$36$.__proto__.new.call(this);
  }).prototype = HookState_WidgetsBindingObserver$36$.prototype;
  dart.applyMixin(HookState_WidgetsBindingObserver$36$, binding.WidgetsBindingObserver);
  hooks._PlatformBrightnessState = class _PlatformBrightnessState extends HookState_WidgetsBindingObserver$36$ {
    get [_brightness]() {
      let t10;
      t10 = this[___PlatformBrightnessState__brightness];
      return t10 == null ? dart.throw(new _internal.LateError.fieldNI("_brightness")) : t10;
    }
    set [_brightness](_brightness$35param) {
      this[___PlatformBrightnessState__brightness] = _brightness$35param;
    }
    get debugLabel() {
      return "usePlatformBrightness";
    }
    initHook() {
      super.initHook();
      this[_brightness] = binding.WidgetsBinding.instance.window.platformBrightness;
      binding.WidgetsBinding.instance.addObserver(this);
    }
    build(context) {
      return this[_brightness];
    }
    dispose() {
      binding.WidgetsBinding.instance.removeObserver(this);
      super.dispose();
    }
    didChangePlatformBrightness() {
      let t10;
      super.didChangePlatformBrightness();
      let _previous = this[_brightness];
      this[_brightness] = binding.WidgetsBinding.instance.window.platformBrightness;
      t10 = this.hook.onBrightnessChange;
      t10 == null ? null : t10(_previous, this[_brightness]);
      if (this.hook.rebuildOnChange) {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
    }
    static ['_#new#tearOff']() {
      return new hooks._PlatformBrightnessState.new();
    }
  };
  (hooks._PlatformBrightnessState.new = function() {
    this[___PlatformBrightnessState__brightness] = null;
    hooks._PlatformBrightnessState.__proto__.new.call(this);
    ;
  }).prototype = hooks._PlatformBrightnessState.prototype;
  dart.addTypeTests(hooks._PlatformBrightnessState);
  dart.addTypeCaches(hooks._PlatformBrightnessState);
  dart.setMethodSignature(hooks._PlatformBrightnessState, () => ({
    __proto__: dart.getMethods(hooks._PlatformBrightnessState.__proto__),
    build: dart.fnType(ui.Brightness, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._PlatformBrightnessState, () => ({
    __proto__: dart.getGetters(hooks._PlatformBrightnessState.__proto__),
    [_brightness]: ui.Brightness
  }));
  dart.setSetterSignature(hooks._PlatformBrightnessState, () => ({
    __proto__: dart.getSetters(hooks._PlatformBrightnessState.__proto__),
    [_brightness]: ui.Brightness
  }));
  dart.setLibraryUri(hooks._PlatformBrightnessState, I[3]);
  dart.setFieldSignature(hooks._PlatformBrightnessState, () => ({
    __proto__: dart.getFields(hooks._PlatformBrightnessState.__proto__),
    [___PlatformBrightnessState__brightness]: dart.fieldType(dart.nullable(ui.Brightness))
  }));
  var wantKeepAlive$ = dart.privateName(hooks, "_AutomaticKeepAliveHook.wantKeepAlive");
  hooks._AutomaticKeepAliveHook = class _AutomaticKeepAliveHook extends framework$.Hook$(dart.void) {
    get wantKeepAlive() {
      return this[wantKeepAlive$];
    }
    set wantKeepAlive(value) {
      super.wantKeepAlive = value;
    }
    static ['_#new#tearOff'](opts) {
      let wantKeepAlive = opts && 'wantKeepAlive' in opts ? opts.wantKeepAlive : null;
      return new hooks._AutomaticKeepAliveHook.new({wantKeepAlive: wantKeepAlive});
    }
    createState() {
      return new hooks._AutomaticKeepAliveHookState.new();
    }
  };
  (hooks._AutomaticKeepAliveHook.new = function(opts) {
    let wantKeepAlive = opts && 'wantKeepAlive' in opts ? opts.wantKeepAlive : null;
    this[wantKeepAlive$] = wantKeepAlive;
    hooks._AutomaticKeepAliveHook.__proto__.new.call(this);
    ;
  }).prototype = hooks._AutomaticKeepAliveHook.prototype;
  dart.addTypeTests(hooks._AutomaticKeepAliveHook);
  dart.addTypeCaches(hooks._AutomaticKeepAliveHook);
  dart.setMethodSignature(hooks._AutomaticKeepAliveHook, () => ({
    __proto__: dart.getMethods(hooks._AutomaticKeepAliveHook.__proto__),
    createState: dart.fnType(framework$.HookState$(dart.void, hooks._AutomaticKeepAliveHook), [])
  }));
  dart.setLibraryUri(hooks._AutomaticKeepAliveHook, I[3]);
  dart.setFieldSignature(hooks._AutomaticKeepAliveHook, () => ({
    __proto__: dart.getFields(hooks._AutomaticKeepAliveHook.__proto__),
    wantKeepAlive: dart.finalFieldType(core.bool)
  }));
  var _keepAliveHandle = dart.privateName(hooks, "_keepAliveHandle");
  var _ensureKeepAlive = dart.privateName(hooks, "_ensureKeepAlive");
  var _releaseKeepAlive = dart.privateName(hooks, "_releaseKeepAlive");
  hooks._AutomaticKeepAliveHookState = class _AutomaticKeepAliveHookState extends framework$.HookState$(dart.void, hooks._AutomaticKeepAliveHook) {
    [_ensureKeepAlive]() {
      this[_keepAliveHandle] = new automatic_keep_alive.KeepAliveHandle.new();
      new automatic_keep_alive.KeepAliveNotification.new(dart.nullCheck(this[_keepAliveHandle])).dispatch(this.context);
    }
    [_releaseKeepAlive]() {
      let t10;
      t10 = this[_keepAliveHandle];
      t10 == null ? null : t10.dispose();
      this[_keepAliveHandle] = null;
    }
    initHook() {
      super.initHook();
      if (this.hook.wantKeepAlive) {
        this[_ensureKeepAlive]();
      }
    }
    build(context) {
      if (this.hook.wantKeepAlive && this[_keepAliveHandle] == null) {
        this[_ensureKeepAlive]();
      }
    }
    deactivate() {
      if (this[_keepAliveHandle] != null) {
        this[_releaseKeepAlive]();
      }
      super.deactivate();
    }
    get debugValue() {
      return this[_keepAliveHandle];
    }
    get debugLabel() {
      return "useAutomaticKeepAlive";
    }
    static ['_#new#tearOff']() {
      return new hooks._AutomaticKeepAliveHookState.new();
    }
  };
  (hooks._AutomaticKeepAliveHookState.new = function() {
    this[_keepAliveHandle] = null;
    hooks._AutomaticKeepAliveHookState.__proto__.new.call(this);
    ;
  }).prototype = hooks._AutomaticKeepAliveHookState.prototype;
  dart.addTypeTests(hooks._AutomaticKeepAliveHookState);
  dart.addTypeCaches(hooks._AutomaticKeepAliveHookState);
  dart.setMethodSignature(hooks._AutomaticKeepAliveHookState, () => ({
    __proto__: dart.getMethods(hooks._AutomaticKeepAliveHookState.__proto__),
    [_ensureKeepAlive]: dart.fnType(dart.void, []),
    [_releaseKeepAlive]: dart.fnType(dart.void, []),
    build: dart.fnType(dart.void, [framework.BuildContext])
  }));
  dart.setGetterSignature(hooks._AutomaticKeepAliveHookState, () => ({
    __proto__: dart.getGetters(hooks._AutomaticKeepAliveHookState.__proto__),
    debugLabel: core.String
  }));
  dart.setLibraryUri(hooks._AutomaticKeepAliveHookState, I[3]);
  dart.setFieldSignature(hooks._AutomaticKeepAliveHookState, () => ({
    __proto__: dart.getFields(hooks._AutomaticKeepAliveHookState.__proto__),
    [_keepAliveHandle]: dart.fieldType(dart.nullable(automatic_keep_alive.KeepAliveHandle))
  }));
  var listenable$0 = dart.privateName(hooks, "_ListenableSelectorHook.listenable");
  var selector$ = dart.privateName(hooks, "_ListenableSelectorHook.selector");
  const _is__ListenableSelectorHook_default = Symbol('_is__ListenableSelectorHook_default');
  hooks._ListenableSelectorHook$ = dart.generic(R => {
    var __t$_ListenableSelectorHookStateOfR = () => (__t$_ListenableSelectorHookStateOfR = dart.constFn(hooks._ListenableSelectorHookState$(R)))();
    class _ListenableSelectorHook extends framework$.Hook$(R) {
      get listenable() {
        return this[listenable$0];
      }
      set listenable(value) {
        super.listenable = value;
      }
      get selector() {
        return this[selector$];
      }
      set selector(value) {
        super.selector = value;
      }
      static ['_#new#tearOff'](R, listenable, selector) {
        return new (hooks._ListenableSelectorHook$(R)).new(listenable, selector);
      }
      createState() {
        return new (__t$_ListenableSelectorHookStateOfR()).new();
      }
    }
    (_ListenableSelectorHook.new = function(listenable, selector) {
      this[listenable$0] = listenable;
      this[selector$] = selector;
      _ListenableSelectorHook.__proto__.new.call(this);
      ;
    }).prototype = _ListenableSelectorHook.prototype;
    dart.addTypeTests(_ListenableSelectorHook);
    _ListenableSelectorHook.prototype[_is__ListenableSelectorHook_default] = true;
    dart.addTypeCaches(_ListenableSelectorHook);
    dart.setMethodSignature(_ListenableSelectorHook, () => ({
      __proto__: dart.getMethods(_ListenableSelectorHook.__proto__),
      createState: dart.fnType(hooks._ListenableSelectorHookState$(R), [])
    }));
    dart.setLibraryUri(_ListenableSelectorHook, I[3]);
    dart.setFieldSignature(_ListenableSelectorHook, () => ({
      __proto__: dart.getFields(_ListenableSelectorHook.__proto__),
      listenable: dart.finalFieldType(change_notifier.Listenable),
      selector: dart.finalFieldType(dart.fnType(R, []))
    }));
    return _ListenableSelectorHook;
  });
  hooks._ListenableSelectorHook = hooks._ListenableSelectorHook$();
  dart.addTypeTests(hooks._ListenableSelectorHook, _is__ListenableSelectorHook_default);
  var ___ListenableSelectorHookState__selectorResult = dart.privateName(hooks, "_#_ListenableSelectorHookState#_selectorResult");
  var ___ListenableSelectorHookState__selectorResult_isSet = dart.privateName(hooks, "_#_ListenableSelectorHookState#_selectorResult#isSet");
  var _selectorResult = dart.privateName(hooks, "_selectorResult");
  const _is__ListenableSelectorHookState_default = Symbol('_is__ListenableSelectorHookState_default');
  hooks._ListenableSelectorHookState$ = dart.generic(R => {
    var __t$_ListenableSelectorHookOfR = () => (__t$_ListenableSelectorHookOfR = dart.constFn(hooks._ListenableSelectorHook$(R)))();
    class _ListenableSelectorHookState extends framework$.HookState$(R, hooks._ListenableSelectorHook$(R)) {
      get [_selectorResult]() {
        let t10;
        if (!this[___ListenableSelectorHookState__selectorResult_isSet]) {
          this[___ListenableSelectorHookState__selectorResult] = this.hook.selector();
          this[___ListenableSelectorHookState__selectorResult_isSet] = true;
        }
        t10 = this[___ListenableSelectorHookState__selectorResult];
        return t10;
      }
      set [_selectorResult](_selectorResult$35param) {
        this[___ListenableSelectorHookState__selectorResult_isSet] = true;
        this[___ListenableSelectorHookState__selectorResult] = _selectorResult$35param;
      }
      initHook() {
        super.initHook();
        this.hook.listenable.addListener(dart.bind(this, _listener));
      }
      didUpdateHook(oldHook) {
        __t$_ListenableSelectorHookOfR().as(oldHook);
        super.didUpdateHook(oldHook);
        if (!this.hook.selector[$_equals](oldHook.selector)) {
          this.setState(dart.fn(() => {
            this[_selectorResult] = this.hook.selector();
          }, T$.VoidTovoid()));
        }
        if (!this.hook.listenable[$_equals](oldHook.listenable)) {
          oldHook.listenable.removeListener(dart.bind(this, _listener));
          this.hook.listenable.addListener(dart.bind(this, _listener));
          this[_selectorResult] = this.hook.selector();
        }
      }
      build(context) {
        return this[_selectorResult];
      }
      [_listener]() {
        let latestSelectorResult = this.hook.selector();
        if (!dart.equals(this[_selectorResult], latestSelectorResult)) {
          this.setState(dart.fn(() => {
            this[_selectorResult] = latestSelectorResult;
          }, T$.VoidTovoid()));
        }
      }
      dispose() {
        this.hook.listenable.removeListener(dart.bind(this, _listener));
      }
      get debugLabel() {
        return "useListenableSelector<" + dart.str(dart.wrapType(R)) + ">";
      }
      get debugSkipValue() {
        return true;
      }
      static ['_#new#tearOff'](R) {
        return new (hooks._ListenableSelectorHookState$(R)).new();
      }
    }
    (_ListenableSelectorHookState.new = function() {
      this[___ListenableSelectorHookState__selectorResult] = null;
      this[___ListenableSelectorHookState__selectorResult_isSet] = false;
      _ListenableSelectorHookState.__proto__.new.call(this);
      ;
    }).prototype = _ListenableSelectorHookState.prototype;
    dart.addTypeTests(_ListenableSelectorHookState);
    _ListenableSelectorHookState.prototype[_is__ListenableSelectorHookState_default] = true;
    dart.addTypeCaches(_ListenableSelectorHookState);
    dart.setMethodSignature(_ListenableSelectorHookState, () => ({
      __proto__: dart.getMethods(_ListenableSelectorHookState.__proto__),
      build: dart.fnType(R, [framework.BuildContext]),
      [_listener]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_ListenableSelectorHookState, () => ({
      __proto__: dart.getGetters(_ListenableSelectorHookState.__proto__),
      [_selectorResult]: R,
      debugLabel: core.String
    }));
    dart.setSetterSignature(_ListenableSelectorHookState, () => ({
      __proto__: dart.getSetters(_ListenableSelectorHookState.__proto__),
      [_selectorResult]: R
    }));
    dart.setLibraryUri(_ListenableSelectorHookState, I[3]);
    dart.setFieldSignature(_ListenableSelectorHookState, () => ({
      __proto__: dart.getFields(_ListenableSelectorHookState.__proto__),
      [___ListenableSelectorHookState__selectorResult]: dart.fieldType(dart.nullable(R)),
      [___ListenableSelectorHookState__selectorResult_isSet]: dart.fieldType(core.bool)
    }));
    return _ListenableSelectorHookState;
  });
  hooks._ListenableSelectorHookState = hooks._ListenableSelectorHookState$();
  dart.addTypeTests(hooks._ListenableSelectorHookState, _is__ListenableSelectorHookState_default);
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  hooks.useAnimation = function useAnimation(T, animation) {
    framework$.use(dart.void, new (hooks._UseAnimationHook$(T)).new(animation));
    return animation.value;
  };
  hooks.useAnimationController = function useAnimationController(opts) {
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let reverseDuration = opts && 'reverseDuration' in opts ? opts.reverseDuration : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let initialValue = opts && 'initialValue' in opts ? opts.initialValue : 0;
    let lowerBound = opts && 'lowerBound' in opts ? opts.lowerBound : 0;
    let upperBound = opts && 'upperBound' in opts ? opts.upperBound : 1;
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    let animationBehavior = opts && 'animationBehavior' in opts ? opts.animationBehavior : C[13] || CT.C13;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    vsync == null ? vsync = hooks.useSingleTickerProvider({keys: keys}) : null;
    return framework$.use(animation_controller.AnimationController, new hooks._AnimationControllerHook.new({duration: duration, reverseDuration: reverseDuration, debugLabel: debugLabel, initialValue: initialValue, lowerBound: lowerBound, upperBound: upperBound, vsync: vsync, animationBehavior: animationBehavior, keys: keys}));
  };
  hooks.useSingleTickerProvider = function useSingleTickerProvider(opts) {
    let keys = opts && 'keys' in opts ? opts.keys : null;
    return framework$.use(ticker.TickerProvider, keys != null ? new hooks._SingleTickerProviderHook.new(keys) : C[14] || CT.C14);
  };
  hooks.useFuture = function useFuture(T, future, opts) {
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let preserveState = opts && 'preserveState' in opts ? opts.preserveState : true;
    return framework$.use(async$.AsyncSnapshot$(T), new (hooks._FutureHook$(T)).new(future, {initialData: initialData, preserveState: preserveState}));
  };
  hooks.useStream = function useStream(T, stream, opts) {
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let preserveState = opts && 'preserveState' in opts ? opts.preserveState : true;
    return framework$.use(async$.AsyncSnapshot$(T), new (hooks._StreamHook$(T)).new(stream, {initialData: initialData, preserveState: preserveState}));
  };
  hooks.useStreamController = function useStreamController(T, opts) {
    let sync = opts && 'sync' in opts ? opts.sync : false;
    let onListen = opts && 'onListen' in opts ? opts.onListen : null;
    let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    return framework$.use(async.StreamController$(T), new (hooks._StreamControllerHook$(T)).new({onCancel: onCancel, onListen: onListen, sync: sync, keys: keys}));
  };
  hooks.useFocusNode = function useFocusNode(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let onKey = opts && 'onKey' in opts ? opts.onKey : null;
    let onKeyEvent = opts && 'onKeyEvent' in opts ? opts.onKeyEvent : null;
    let skipTraversal = opts && 'skipTraversal' in opts ? opts.skipTraversal : false;
    let canRequestFocus = opts && 'canRequestFocus' in opts ? opts.canRequestFocus : true;
    let descendantsAreFocusable = opts && 'descendantsAreFocusable' in opts ? opts.descendantsAreFocusable : true;
    return framework$.use(focus_manager.FocusNode, new hooks._FocusNodeHook.new({debugLabel: debugLabel, onKey: onKey, onKeyEvent: onKeyEvent, skipTraversal: skipTraversal, canRequestFocus: canRequestFocus, descendantsAreFocusable: descendantsAreFocusable}));
  };
  hooks.useFocusScopeNode = function useFocusScopeNode(opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let onKey = opts && 'onKey' in opts ? opts.onKey : null;
    let onKeyEvent = opts && 'onKeyEvent' in opts ? opts.onKeyEvent : null;
    let skipTraversal = opts && 'skipTraversal' in opts ? opts.skipTraversal : false;
    let canRequestFocus = opts && 'canRequestFocus' in opts ? opts.canRequestFocus : true;
    return framework$.use(focus_manager.FocusScopeNode, new hooks._FocusScopeNodeHook.new({debugLabel: debugLabel, onKey: onKey, onKeyEvent: onKeyEvent, skipTraversal: skipTraversal, canRequestFocus: canRequestFocus}));
  };
  hooks.useAutomaticKeepAlive = function useAutomaticKeepAlive(opts) {
    let wantKeepAlive = opts && 'wantKeepAlive' in opts ? opts.wantKeepAlive : true;
    framework$.use(dart.void, new hooks._AutomaticKeepAliveHook.new({wantKeepAlive: wantKeepAlive}));
  };
  hooks.useValueListenable = function useValueListenable(T, valueListenable) {
    framework$.use(dart.void, new hooks._UseValueListenableHook.new(valueListenable));
    return valueListenable.value;
  };
  hooks.useListenable = function useListenable(T, listenable) {
    framework$.use(dart.void, new hooks._ListenableHook.new(listenable));
    return listenable;
  };
  hooks.useValueNotifier = function useValueNotifier(T, initialData, keys = null) {
    return framework$.use(change_notifier.ValueNotifier$(T), new (hooks._ValueNotifierHook$(T)).new({initialData: initialData, keys: keys}));
  };
  hooks.useListenableSelector = function useListenableSelector(R, listenable, selector) {
    return framework$.use(R, new (hooks._ListenableSelectorHook$(R)).new(listenable, selector));
  };
  hooks.useReducer = function useReducer(State, Action, reducer, opts) {
    let initialState = opts && 'initialState' in opts ? opts.initialState : null;
    let initialAction = opts && 'initialAction' in opts ? opts.initialAction : null;
    return framework$.use(hooks.Store$(State, Action), new (hooks._ReducerHook$(State, Action)).new(reducer, {initialAction: initialAction, initialState: initialState}));
  };
  hooks.usePrevious = function usePrevious(T, val) {
    return framework$.use(dart.nullable(T), new (hooks._PreviousHook$(T)).new(val));
  };
  hooks.useReassemble = function useReassemble(callback) {
    if (!dart.fn(() => {
      framework$.use(dart.void, new hooks._ReassembleHook.new(callback));
      return true;
    }, T$.VoidTobool())()) dart.assertFailed("", I[5], 139, 10, "() {\n    use(_ReassembleHook(callback));\n    return true;\n  }()");
  };
  hooks.useIsMounted = function useIsMounted() {
    return framework$.use(T$.VoidTobool(), C[15] || CT.C15);
  };
  hooks.usePageController = function usePageController(opts) {
    let initialPage = opts && 'initialPage' in opts ? opts.initialPage : 0;
    let keepPage = opts && 'keepPage' in opts ? opts.keepPage : true;
    let viewportFraction = opts && 'viewportFraction' in opts ? opts.viewportFraction : 1;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    return framework$.use(page_view.PageController, new hooks._PageControllerHook.new({initialPage: initialPage, keepPage: keepPage, viewportFraction: viewportFraction, keys: keys}));
  };
  hooks.usePlatformBrightness = function usePlatformBrightness() {
    return framework$.use(ui.Brightness, C[16] || CT.C16);
  };
  hooks.useOnPlatformBrightnessChange = function useOnPlatformBrightnessChange(onBrightnessChange) {
    return framework$.use(dart.void, new hooks._PlatformBrightnessHook.new({onBrightnessChange: onBrightnessChange}));
  };
  hooks.useRef = function useRef(T, initialValue) {
    return hooks.useMemoized(hooks.ObjectRef$(T), dart.fn(() => new (hooks.ObjectRef$(T)).new(initialValue), dart.fnType(hooks.ObjectRef$(T), [])));
  };
  hooks.useCallback = function useCallback(T, callback, keys) {
    return hooks.useMemoized(T, dart.fn(() => callback, dart.fnType(T, [])), keys);
  };
  hooks.useMemoized = function useMemoized(T, valueBuilder, keys = C[17] || CT.C17) {
    return framework$.use(T, new (hooks._MemoizedHook$(T)).new(valueBuilder, {keys: keys}));
  };
  hooks.useValueChanged = function useValueChanged(T, R, value, valueChange) {
    return framework$.use(dart.nullable(R), new (hooks._ValueChangedHook$(T, R)).new(value, valueChange));
  };
  hooks.useEffect = function useEffect(effect, keys = null) {
    framework$.use(dart.void, new hooks._EffectHook.new(effect, keys));
  };
  hooks.useState = function useState(T, initialData) {
    return framework$.use(change_notifier.ValueNotifier$(T), new (hooks._StateHook$(T)).new({initialData: initialData}));
  };
  hooks.useScrollController = function useScrollController(opts) {
    let initialScrollOffset = opts && 'initialScrollOffset' in opts ? opts.initialScrollOffset : 0;
    let keepScrollOffset = opts && 'keepScrollOffset' in opts ? opts.keepScrollOffset : true;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    return framework$.use(scroll_controller.ScrollController, new hooks._ScrollControllerHook.new({initialScrollOffset: initialScrollOffset, keepScrollOffset: keepScrollOffset, debugLabel: debugLabel, keys: keys}));
  };
  hooks.useTabController = function useTabController(opts) {
    let initialLength = opts && 'initialLength' in opts ? opts.initialLength : null;
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    let initialIndex = opts && 'initialIndex' in opts ? opts.initialIndex : 0;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    vsync == null ? vsync = hooks.useSingleTickerProvider({keys: keys}) : null;
    return framework$.use(tab_controller.TabController, new hooks._TabControllerHook.new({vsync: vsync, length: initialLength, initialIndex: initialIndex, keys: keys}));
  };
  hooks.useTransformationController = function useTransformationController(opts) {
    let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    return framework$.use(interactive_viewer.TransformationController, new hooks._TransformationControllerHook.new({initialValue: initialValue, keys: keys}));
  };
  hooks.useAppLifecycleState = function useAppLifecycleState() {
    return framework$.use(T$.AppLifecycleStateN(), C[18] || CT.C18);
  };
  hooks.useOnAppLifecycleStateChange = function useOnAppLifecycleStateChange(onStateChanged) {
    framework$.use(T$.AppLifecycleStateN(), new hooks._AppLifecycleHook.new({onStateChanged: onStateChanged}));
  };
  dart.defineLazy(hooks, {
    /*hooks.useTextEditingController*/get useTextEditingController() {
      return C[19] || CT.C19;
    }
  }, false);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:flutter_hooks/flutter_hooks.dart": flutter_hooks,
    "package:flutter_hooks/src/framework.dart": framework$,
    "package:flutter_hooks/src/hooks.dart": hooks
  }, {
    "package:flutter_hooks/src/hooks.dart": ["animation.dart", "async.dart", "listenable.dart", "misc.dart", "primitives.dart", "tab_controller.dart", "text_controller.dart", "focus_node.dart", "focus_scope_node.dart", "scroll_controller.dart", "page_controller.dart", "widgets_binding_observer.dart", "transformation_controller.dart", "platform_brightness.dart", "keep_alive.dart", "listenable_selector.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/framework.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/workspace/build/dart-sdk/packages/flutter/lib/src/widgets/framework.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/listenable.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/animation.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/async.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/misc.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/primitives.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/tab_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/text_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/focus_node.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/focus_scope_node.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/scroll_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/page_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/widgets_binding_observer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/transformation_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/platform_brightness.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/keep_alive.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_hooks-0.18.6/lib/src/listenable_selector.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    flutter_hooks: flutter_hooks,
    src__framework: framework$,
    src__hooks: hooks
  };
}));

//# sourceMappingURL=main.js.map
